{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]"},"docs":[{"location":"","text":"Welcome! \u00b6 I\u2019m dedicated to dynamic systems and learning theory. Content is organized across the following sections. Posts \u00b6 Snippets of math and computer science. Publications \u00b6 Links to my journal and conference papers. Slides of invited talks. Useful (possibly..) code posted to GitHub / GitLab . CV \u00b6 Course Notes \u00b6 Compiled for practical reference. DevKB \u00b6 Data structures, algorithms, ICPC-style problems and system design. ML, backend and DevOps engineering. Awesome People \u00b6 Some people doing amazing work in dynamic systems and learning theory.","title":"**Welcome!**"},{"location":"#welcome","text":"I\u2019m dedicated to dynamic systems and learning theory. Content is organized across the following sections.","title":"Welcome!"},{"location":"#posts","text":"Snippets of math and computer science.","title":"Posts"},{"location":"#publications","text":"Links to my journal and conference papers. Slides of invited talks. Useful (possibly..) code posted to GitHub / GitLab .","title":"Publications"},{"location":"#cv","text":"","title":"CV"},{"location":"#course-notes","text":"Compiled for practical reference.","title":"Course Notes"},{"location":"#devkb","text":"Data structures, algorithms, ICPC-style problems and system design. ML, backend and DevOps engineering.","title":"DevKB"},{"location":"#awesome-people","text":"Some people doing amazing work in dynamic systems and learning theory.","title":"Awesome People"},{"location":"cv/","text":"CV \u00b6","title":"CV"},{"location":"cv/#cv","text":"","title":"CV"},{"location":"cv/education/","text":"Education \u00b6 University \u00b6 PhD. in Mechanical Engineering \u00b6 University of Campinas/Mechanical - Campinas, Brazil (2019 - ) Left due to extreme circumstances. M.Sc. in Mechanical Engineering \u00b6 University of Campinas - Campinas, Brazil (2016 - 2023) co-advised by I. Santos from TU Denmark - Lyngby, Denmark (2016 - 2018) 5-year B.Sc. in Mechanical Engineering \u00b6 Federal University of Para\u00edba - Jo\u00e3o Pessoa, Brazil (2010 - 2015) Budapest University of Technology - Budapest, Hungary (2013 - 2014)","title":"Education"},{"location":"cv/education/#education","text":"","title":"Education"},{"location":"cv/education/#university","text":"","title":"University"},{"location":"cv/education/#phd-in-mechanical-engineering","text":"University of Campinas/Mechanical - Campinas, Brazil (2019 - ) Left due to extreme circumstances.","title":"PhD. in Mechanical Engineering"},{"location":"cv/education/#msc-in-mechanical-engineering","text":"University of Campinas - Campinas, Brazil (2016 - 2023) co-advised by I. Santos from TU Denmark - Lyngby, Denmark (2016 - 2018)","title":"M.Sc. in Mechanical Engineering"},{"location":"cv/education/#5-year-bsc-in-mechanical-engineering","text":"Federal University of Para\u00edba - Jo\u00e3o Pessoa, Brazil (2010 - 2015) Budapest University of Technology - Budapest, Hungary (2013 - 2014)","title":"5-year B.Sc. in Mechanical Engineering"},{"location":"cv/educationExtra/","text":"Education: Extra \u00b6","title":"Education: Extra"},{"location":"cv/educationExtra/#education-extra","text":"","title":"Education: Extra"},{"location":"cv/experienceDev/","text":"Dev & Data \u00b6 Email / Website / LinkedIn / GitHub / GitLab / dev.to Consultant @ MetaOriginal \u00b6 Startup that produces digital twins of real state assets. (Jul 2022 - Aug 2022) Mediated between MetaOriginal and companies such as PureWeb , nVidia Omniverse , etc. Tested/documented a prototype Unreal Engine real-time streaming system. Tech stack: PixelStreaming, Unreal Engine 4.25/4.27/5, GCloud, AWS, Azure Ruby on Rails Jr. Dev @ Original3D \u00b6 Startup that produces digital twins of real state assets. (Sep 2021 - Jan 2022) Wrote all accounting/finance-related front/backend code. Wrote hundreds of pages of software documentation. Implemented testing suites related to business rules and user experience. Tech stack: Ruby-on-Rails, React, Rails ORM, Cucumber, RSpec, Capybara ThreeJS Dev @ Original3D \u00b6 Startup that produces digital twins of real state assets. (Jul 2021 - Aug 2021) Coded several ThreeJS MVPs. Managed to import some 3D models into DOM using ThreeJS. Tech stack: NodeJS, ThreeJS, TypeScript Backend Jr. Dev @ Oxfield \u00b6 Consulting firm specialized in corporate IT solutions. (Apr 2021 - Jun 2021) Devised backend architechture: class diagrams, data models. Backend implementation. Check this NodeJS/SQL login system . Tech stack: NodeJS, Jest, SQL, ExpressJS, Typescript, Docker","title":"Dev & Data"},{"location":"cv/experienceDev/#dev-data","text":"Email / Website / LinkedIn / GitHub / GitLab / dev.to","title":"Dev &amp; Data"},{"location":"cv/experienceDev/#consultant-metaoriginal","text":"Startup that produces digital twins of real state assets. (Jul 2022 - Aug 2022) Mediated between MetaOriginal and companies such as PureWeb , nVidia Omniverse , etc. Tested/documented a prototype Unreal Engine real-time streaming system. Tech stack: PixelStreaming, Unreal Engine 4.25/4.27/5, GCloud, AWS, Azure","title":"Consultant @ MetaOriginal"},{"location":"cv/experienceDev/#ruby-on-rails-jr-dev-original3d","text":"Startup that produces digital twins of real state assets. (Sep 2021 - Jan 2022) Wrote all accounting/finance-related front/backend code. Wrote hundreds of pages of software documentation. Implemented testing suites related to business rules and user experience. Tech stack: Ruby-on-Rails, React, Rails ORM, Cucumber, RSpec, Capybara","title":"Ruby on Rails Jr. Dev @ Original3D"},{"location":"cv/experienceDev/#threejs-dev-original3d","text":"Startup that produces digital twins of real state assets. (Jul 2021 - Aug 2021) Coded several ThreeJS MVPs. Managed to import some 3D models into DOM using ThreeJS. Tech stack: NodeJS, ThreeJS, TypeScript","title":"ThreeJS Dev @ Original3D"},{"location":"cv/experienceDev/#backend-jr-dev-oxfield","text":"Consulting firm specialized in corporate IT solutions. (Apr 2021 - Jun 2021) Devised backend architechture: class diagrams, data models. Backend implementation. Check this NodeJS/SQL login system . Tech stack: NodeJS, Jest, SQL, ExpressJS, Typescript, Docker","title":"Backend Jr. Dev @ Oxfield"},{"location":"cv/experienceEngineering/","text":"Engineering \u00b6 Freelance Engineer \u00b6 (Jan 2017 - Apr 2022) Designed a metallic structure to support the roof of a 510m\u00b2 hangar. Licensed by CREA , the Brazilian engineering council. Ad-hoc Analyst @ FE Structural Foundations \u00b6 (Jan 2021 - permanent) Reviewed maintenance operations of soil-drilling machines. Project Director @ AEROJAMPA \u00b6 (Feb 2010 - Jul 2016) - Led a team of ~10 engineering undergrads. Contributed to aircraft design projects on: aerodynamics structural design performance flight stability and control multidisciplinary optimization Built and presented design reports at the SAE Brasil Aerodesign International Competition , on the grounds of ITA / Embraer . As a team, we got 3 rd best structural design at the 2012 competition . Funded by private sponsors, PRG-UFPB and CNPq . Intern @ RECOGAS \u00b6 RECOGAS, i.e. , Brazil North/Northeast Natural Gas Research (RECOGAS), is a many-institution initiative dedicated to thermal energy systems. (Jan 2017 - Apr 2022) Re-designed a diaphragm pump for usage in refrigeration machinery running a H2O/NH3-based cogeneration cycle. Solved several problems in fluid flow/heat transfer using generalized integral transforms. Funded by CNPq .","title":"Engineering"},{"location":"cv/experienceEngineering/#engineering","text":"","title":"Engineering"},{"location":"cv/experienceEngineering/#freelance-engineer","text":"(Jan 2017 - Apr 2022) Designed a metallic structure to support the roof of a 510m\u00b2 hangar. Licensed by CREA , the Brazilian engineering council.","title":"Freelance Engineer"},{"location":"cv/experienceEngineering/#ad-hoc-analyst-fe-structural-foundations","text":"(Jan 2021 - permanent) Reviewed maintenance operations of soil-drilling machines.","title":"Ad-hoc Analyst @ FE Structural Foundations"},{"location":"cv/experienceEngineering/#project-director-aerojampa","text":"(Feb 2010 - Jul 2016) - Led a team of ~10 engineering undergrads. Contributed to aircraft design projects on: aerodynamics structural design performance flight stability and control multidisciplinary optimization Built and presented design reports at the SAE Brasil Aerodesign International Competition , on the grounds of ITA / Embraer . As a team, we got 3 rd best structural design at the 2012 competition . Funded by private sponsors, PRG-UFPB and CNPq .","title":"Project Director @ AEROJAMPA"},{"location":"cv/experienceEngineering/#intern-recogas","text":"RECOGAS, i.e. , Brazil North/Northeast Natural Gas Research (RECOGAS), is a many-institution initiative dedicated to thermal energy systems. (Jan 2017 - Apr 2022) Re-designed a diaphragm pump for usage in refrigeration machinery running a H2O/NH3-based cogeneration cycle. Solved several problems in fluid flow/heat transfer using generalized integral transforms. Funded by CNPq .","title":"Intern @ RECOGAS"},{"location":"cv/experienceTeachingResearch/","text":"Teaching & Research \u00b6 Researcher @ Unicamp, Dept. of Integrated Systems \u00b6 (Aug 2016 - Mar 2023 expected) Reviewed papers published/refereed at the Lab of System Identification & Control . Wrote a paper and a dissertation on control of periodic systems. Got Hilbert Number 7.. crazy, right: Hilbert \u2192 Courant \u2192 Rellich \u2192 Cordes \u2192 Crandall \u2192 Helton \u2192 Camino \u2192 Me Mechatronics Teacher @ ESATEC \u00b6 (Jan 2020 - Dec 2020) In- and extra-class service to ~100 students. Taught: CNC Programming Metrology Technical Drawing Manufacturing Technology Production Management Hydraulics and Pneumatics Math/Physics Teacher @ MacKenzie \u00b6 (Jan 2020 - Jul 2021) In- and extra-class service to ~50 students. Researcher @ Unicamp, Dept. of Computational Mechanics \u00b6 (Apr 2019 - Dec 2019) Wrote, with A. Alc\u00e2ntara , a research proposal rated ``excelent\u2019\u2018 by FAPESP . Secured ~R$ 130000 in competitive research funding. Published a paper . A spin-off of this work went on to be developed at LAMMS-MIT . Teaching Assistant @ Unicamp Mech. Engineering \u00b6 (Aug 2016 - Dez 2016) ES601: Linear System Analysis with J. Camino : Graded assignments and tests of ~70 undergrads. Some lecturing/tutoring. Reviewer/writer of class material. EM707: Control of Mechanical Systems with A. Serpa . Invited Feb 2017. Teaching Assistant @ UFPB Energy Engineering \u00b6 (Sep 2014 - Jun 2016) Subject 1701179: Fluid Mechanics II with G. Moreira . Some tutoring. Reviewer/writer of class material. Passed selection with a 10/10 (unprecedented). Freelance Teacher \u00b6 (Aug 2016 - permanent) Taught: TOEFL Prep, students did great Mechanical Vibrations Linear Analysis / Control / Signal Processing Machine Kinematics / Dynamics Calculus / Physics Thermodynamics / Heat Transfer Taught from undergrads to college lecturers. Researcher @ Budapest Tech \u00b6 (Jan 2014 - Aug 2014) Coded simulations of highly nonlinear, hysteretical friction force models with J. T\u00f3th and R. Csikja .","title":"Teaching & Research"},{"location":"cv/experienceTeachingResearch/#teaching-research","text":"","title":"Teaching &amp; Research"},{"location":"cv/experienceTeachingResearch/#researcher-unicamp-dept-of-integrated-systems","text":"(Aug 2016 - Mar 2023 expected) Reviewed papers published/refereed at the Lab of System Identification & Control . Wrote a paper and a dissertation on control of periodic systems. Got Hilbert Number 7.. crazy, right: Hilbert \u2192 Courant \u2192 Rellich \u2192 Cordes \u2192 Crandall \u2192 Helton \u2192 Camino \u2192 Me","title":"Researcher @ Unicamp, Dept. of Integrated Systems"},{"location":"cv/experienceTeachingResearch/#mechatronics-teacher-esatec","text":"(Jan 2020 - Dec 2020) In- and extra-class service to ~100 students. Taught: CNC Programming Metrology Technical Drawing Manufacturing Technology Production Management Hydraulics and Pneumatics","title":"Mechatronics Teacher @ ESATEC"},{"location":"cv/experienceTeachingResearch/#mathphysics-teacher-mackenzie","text":"(Jan 2020 - Jul 2021) In- and extra-class service to ~50 students.","title":"Math/Physics Teacher @ MacKenzie"},{"location":"cv/experienceTeachingResearch/#researcher-unicamp-dept-of-computational-mechanics","text":"(Apr 2019 - Dec 2019) Wrote, with A. Alc\u00e2ntara , a research proposal rated ``excelent\u2019\u2018 by FAPESP . Secured ~R$ 130000 in competitive research funding. Published a paper . A spin-off of this work went on to be developed at LAMMS-MIT .","title":"Researcher @ Unicamp, Dept. of Computational Mechanics"},{"location":"cv/experienceTeachingResearch/#teaching-assistant-unicamp-mech-engineering","text":"(Aug 2016 - Dez 2016) ES601: Linear System Analysis with J. Camino : Graded assignments and tests of ~70 undergrads. Some lecturing/tutoring. Reviewer/writer of class material. EM707: Control of Mechanical Systems with A. Serpa . Invited Feb 2017.","title":"Teaching Assistant @ Unicamp Mech. Engineering"},{"location":"cv/experienceTeachingResearch/#teaching-assistant-ufpb-energy-engineering","text":"(Sep 2014 - Jun 2016) Subject 1701179: Fluid Mechanics II with G. Moreira . Some tutoring. Reviewer/writer of class material. Passed selection with a 10/10 (unprecedented).","title":"Teaching Assistant @ UFPB Energy Engineering"},{"location":"cv/experienceTeachingResearch/#freelance-teacher","text":"(Aug 2016 - permanent) Taught: TOEFL Prep, students did great Mechanical Vibrations Linear Analysis / Control / Signal Processing Machine Kinematics / Dynamics Calculus / Physics Thermodynamics / Heat Transfer Taught from undergrads to college lecturers.","title":"Freelance Teacher"},{"location":"cv/experienceTeachingResearch/#researcher-budapest-tech","text":"(Jan 2014 - Aug 2014) Coded simulations of highly nonlinear, hysteretical friction force models with J. T\u00f3th and R. Csikja .","title":"Researcher @ Budapest Tech"},{"location":"cv/language/","text":"Languages \u00b6 \ud83c\uddfa\ud83c\uddf8 English : Fluent/native. \ud83c\udde7\ud83c\uddf7 Portuguese : Fluent/native. \ud83c\uddea\ud83c\uddf8 Spanish : Good reading, simple speech. \ud83c\uddeb\ud83c\uddf7 French : Technical reading. \ud83c\uddf7\ud83c\uddfa Russian : Simple reading. \ud83c\udde9\ud83c\uddea German : On the way. \ud83c\uddee\ud83c\uddf1 Hebrew : On the way.","title":"Languages"},{"location":"cv/language/#languages","text":"\ud83c\uddfa\ud83c\uddf8 English : Fluent/native. \ud83c\udde7\ud83c\uddf7 Portuguese : Fluent/native. \ud83c\uddea\ud83c\uddf8 Spanish : Good reading, simple speech. \ud83c\uddeb\ud83c\uddf7 French : Technical reading. \ud83c\uddf7\ud83c\uddfa Russian : Simple reading. \ud83c\udde9\ud83c\uddea German : On the way. \ud83c\uddee\ud83c\uddf1 Hebrew : On the way.","title":"Languages"},{"location":"cv/professionalEvents/","text":"Professional Events \u00b6","title":"Professional Events"},{"location":"cv/professionalEvents/#professional-events","text":"","title":"Professional Events"},{"location":"cv/result/","text":"Results \u00b6 Research Proposal Rated Excellent @ The S\u00e3o Paulo Research Foundation \u00b6 (2019) Secured ~R$ 130000 from the most competitive research funding agency in Brazil. The proposal is top-notch, very well-crafted (\u2026) work in multilevel analysis via the boundary element method on bone images for the detection of osteoporosis, is original, relevant and can bring relevant contributions to bioengineering and medicine. - FAPESP Comission M.Sc. Full Scholarship @ Mech. Engineering/Unicamp \u00b6 (Aug 2016 - July 2018) Got R$ 36000 in funding from CAPES PROEX academic excellence program. Recommendation from the Dean @ Mech. Engineering/Budapest Tech \u00b6 (2014) B.Sc. Scholarship @ CAPES \u00b6 (2013) Got 22.000,00 \u20ac in funding from CAPES SwB program to study and do research at Mech. Engineering/Budapest Tech . Top 1% Score Worldwide @ TOEFL iBT \u00b6 (2013) 3 rd Best Structural Design @ SAE Brasil Aerodesign International Competition \u00b6 (2012) Achieved as member of the Aerojampa team. 1 st Place InterGEO Olympiad, Math/Physics Olympiad Finalist, Top GPA, \u2026 \u00b6 (2006, 2007, 2008) Some small results in mid/high-school.","title":"Results"},{"location":"cv/result/#results","text":"","title":"Results"},{"location":"cv/result/#research-proposal-rated-excellent-the-sao-paulo-research-foundation","text":"(2019) Secured ~R$ 130000 from the most competitive research funding agency in Brazil. The proposal is top-notch, very well-crafted (\u2026) work in multilevel analysis via the boundary element method on bone images for the detection of osteoporosis, is original, relevant and can bring relevant contributions to bioengineering and medicine. - FAPESP Comission","title":"Research Proposal Rated Excellent @ The S\u00e3o Paulo Research Foundation"},{"location":"cv/result/#msc-full-scholarship-mech-engineeringunicamp","text":"(Aug 2016 - July 2018) Got R$ 36000 in funding from CAPES PROEX academic excellence program.","title":"M.Sc. Full Scholarship @ Mech. Engineering/Unicamp"},{"location":"cv/result/#recommendation-from-the-dean-mech-engineeringbudapest-tech","text":"(2014)","title":"Recommendation from the Dean @ Mech. Engineering/Budapest Tech"},{"location":"cv/result/#bsc-scholarship-capes","text":"(2013) Got 22.000,00 \u20ac in funding from CAPES SwB program to study and do research at Mech. Engineering/Budapest Tech .","title":"B.Sc. Scholarship @ CAPES"},{"location":"cv/result/#top-1-score-worldwide-toefl-ibt","text":"(2013)","title":"Top 1% Score Worldwide @ TOEFL iBT"},{"location":"cv/result/#3rd-best-structural-design-sae-brasil-aerodesign-international-competition","text":"(2012) Achieved as member of the Aerojampa team.","title":"3rd Best Structural Design @ SAE Brasil Aerodesign International Competition"},{"location":"cv/result/#1st-place-intergeo-olympiad-mathphysics-olympiad-finalist-top-gpa","text":"(2006, 2007, 2008) Some small results in mid/high-school.","title":"1st Place InterGEO Olympiad, Math/Physics Olympiad Finalist, Top GPA, ..."},{"location":"cv/volunteer/","text":"Volunteering \u00b6 Teacher @ Campinas Public Schools \u00b6 (2019) Invited workshops at EJA , a GED -style program for adults in Campinas, S\u00e3o Paulo, Brazil. Check a sample lecture on cordel , a kind of poetry from northeastern Brazil. Grader @ Brazilian Robotics Olympiad \u00b6 (2016) The event comprises the IEEE Latin America/Brazil Robotics Competition_ and the Latin American/Brazil RoboCup Open . Worked with a team of ~10 arbitrers at the regional rounds .","title":"Volunteering"},{"location":"cv/volunteer/#volunteering","text":"","title":"Volunteering"},{"location":"cv/volunteer/#teacher-campinas-public-schools","text":"(2019) Invited workshops at EJA , a GED -style program for adults in Campinas, S\u00e3o Paulo, Brazil. Check a sample lecture on cordel , a kind of poetry from northeastern Brazil.","title":"Teacher @ Campinas Public Schools"},{"location":"cv/volunteer/#grader-brazilian-robotics-olympiad","text":"(2016) The event comprises the IEEE Latin America/Brazil Robotics Competition_ and the Latin American/Brazil RoboCup Open . Worked with a team of ~10 arbitrers at the regional rounds .","title":"Grader @ Brazilian Robotics Olympiad"},{"location":"kb/","text":"DevKB \u00b6 Software development knowledge base.","title":"DevKB"},{"location":"kb/#devkb","text":"Software development knowledge base.","title":"DevKB"},{"location":"kb/algo/","text":"\ud83c\udfed Algorithm \u00b6","title":"\ud83c\udfed Algorithm"},{"location":"kb/algo/#algorithm","text":"","title":"\ud83c\udfed Algorithm"},{"location":"kb/algo/backtracking/case/","text":"","title":"Case"},{"location":"kb/algo/backtracking/format/","text":"","title":"Format"},{"location":"kb/algo/backtracking/memory/","text":"","title":"Memory"},{"location":"kb/algo/backtracking/what/","text":"","title":"What"},{"location":"kb/algo/backtracking/why/","text":"","title":"Why"},{"location":"kb/algo/bitwise/programming/","text":"Bitwise Programming \u00b6","title":"Bitwise Programming"},{"location":"kb/algo/bitwise/programming/#bitwise-programming","text":"","title":"Bitwise Programming"},{"location":"kb/algo/complexity/class/","text":"Class \u00b6","title":"Class"},{"location":"kb/algo/complexity/class/#class","text":"","title":"Class"},{"location":"kb/algo/complexity/decisionProblem/","text":"Decision: Problem \u00b6","title":"Decision: Problem"},{"location":"kb/algo/complexity/decisionProblem/#decision-problem","text":"","title":"Decision: Problem"},{"location":"kb/algo/complexity/decisionProcedure/","text":"Decision: Procedure \u00b6","title":"Decision: Procedure"},{"location":"kb/algo/complexity/decisionProcedure/#decision-procedure","text":"","title":"Decision: Procedure"},{"location":"kb/algo/complexity/reduction/","text":"Reduction \u00b6","title":"Reduction"},{"location":"kb/algo/complexity/reduction/#reduction","text":"","title":"Reduction"},{"location":"kb/algo/complexity/timePolynomialExponential/","text":"Polynomial vs. Exponential \u00b6","title":"Polynomial vs. Exponential"},{"location":"kb/algo/complexity/timePolynomialExponential/#polynomial-vs-exponential","text":"","title":"Polynomial vs. Exponential"},{"location":"kb/algo/complexity/type/","text":"Type \u00b6","title":"Type"},{"location":"kb/algo/complexity/type/#type","text":"","title":"Type"},{"location":"kb/algo/design/classification/","text":"Classification \u00b6","title":"Classification"},{"location":"kb/algo/design/classification/#classification","text":"","title":"Classification"},{"location":"kb/algo/design/classificationDesignMethod/","text":"Class: by Design Method \u00b6","title":"Class: by Design Method"},{"location":"kb/algo/design/classificationDesignMethod/#class-by-design-method","text":"","title":"Class: by Design Method"},{"location":"kb/algo/design/classificationImplementation/","text":"Class: by Implementation \u00b6","title":"Class: by Implementation"},{"location":"kb/algo/design/classificationImplementation/#class-by-implementation","text":"","title":"Class: by Implementation"},{"location":"kb/algo/design/classificationOther/","text":"Classification: Other \u00b6","title":"Classification: Other"},{"location":"kb/algo/design/classificationOther/#classification-other","text":"","title":"Classification: Other"},{"location":"kb/algo/divideConquer/alwaysWork/","text":"Always works? \u00b6","title":"Always works?"},{"location":"kb/algo/divideConquer/alwaysWork/#always-works","text":"","title":"Always works?"},{"location":"kb/algo/divideConquer/cons/","text":"Cons \u00b6","title":"Cons"},{"location":"kb/algo/divideConquer/cons/#cons","text":"","title":"Cons"},{"location":"kb/algo/divideConquer/pros/","text":"Pros \u00b6","title":"Pros"},{"location":"kb/algo/divideConquer/pros/#pros","text":"","title":"Pros"},{"location":"kb/algo/divideConquer/strategy/","text":"Strategy \u00b6","title":"Strategy"},{"location":"kb/algo/divideConquer/strategy/#strategy","text":"","title":"Strategy"},{"location":"kb/algo/divideConquer/theorem/","text":"Theorem \u00b6","title":"Theorem"},{"location":"kb/algo/divideConquer/theorem/#theorem","text":"","title":"Theorem"},{"location":"kb/algo/dynamic/approach/","text":"Approach \u00b6","title":"Approach"},{"location":"kb/algo/dynamic/approach/#approach","text":"","title":"Approach"},{"location":"kb/algo/dynamic/greedyVsDivConqVsDp/","text":"vs. Greedy vs. Divide & Conquer \u00b6","title":"vs. Greedy vs. Divide & Conquer"},{"location":"kb/algo/dynamic/greedyVsDivConqVsDp/#vs-greedy-vs-divide-conquer","text":"","title":"vs. Greedy vs. Divide &amp; Conquer"},{"location":"kb/algo/dynamic/implement/","text":"Implement \u00b6","title":"Implement"},{"location":"kb/algo/dynamic/implement/#implement","text":"","title":"Implement"},{"location":"kb/algo/dynamic/longestCommonSubsequence/","text":"Longest Common Subsequence \u00b6","title":"Longest Common Subsequence"},{"location":"kb/algo/dynamic/longestCommonSubsequence/#longest-common-subsequence","text":"","title":"Longest Common Subsequence"},{"location":"kb/algo/dynamic/property/","text":"Property \u00b6","title":"Property"},{"location":"kb/algo/dynamic/property/#property","text":"","title":"Property"},{"location":"kb/algo/greedy/alwaysWork/","text":"Always works? \u00b6","title":"Always works?"},{"location":"kb/algo/greedy/alwaysWork/#always-works","text":"","title":"Always works?"},{"location":"kb/algo/greedy/cons/","text":"Cons \u00b6","title":"Cons"},{"location":"kb/algo/greedy/cons/#cons","text":"","title":"Cons"},{"location":"kb/algo/greedy/implement/","text":"Implement \u00b6","title":"Implement"},{"location":"kb/algo/greedy/implement/#implement","text":"","title":"Implement"},{"location":"kb/algo/greedy/pros/","text":"Pros \u00b6","title":"Pros"},{"location":"kb/algo/greedy/pros/#pros","text":"","title":"Pros"},{"location":"kb/algo/greedy/strategy/","text":"Strategy \u00b6","title":"Strategy"},{"location":"kb/algo/greedy/strategy/#strategy","text":"","title":"Strategy"},{"location":"kb/algo/hash/bloomFilter/","text":"Bloom Filter \u00b6","title":"Bloom Filter"},{"location":"kb/algo/hash/bloomFilter/#bloom-filter","text":"","title":"Bloom Filter"},{"location":"kb/algo/hash/code/","text":"Code \u00b6","title":"Code"},{"location":"kb/algo/hash/code/#code","text":"","title":"Code"},{"location":"kb/algo/hash/collisionOpenAddressing/","text":"Collision: Open Addressing \u00b6 Solve collision with open addressing.","title":"Collision: Open Addressing"},{"location":"kb/algo/hash/collisionOpenAddressing/#collision-open-addressing","text":"Solve collision with open addressing.","title":"Collision: Open Addressing"},{"location":"kb/algo/hash/collisionSeparateChaining/","text":"Collision: Separate Chaining \u00b6 Solve collision with separate chaining.","title":"Collision: Separate Chaining"},{"location":"kb/algo/hash/collisionSeparateChaining/#collision-separate-chaining","text":"Solve collision with separate chaining.","title":"Collision: Separate Chaining"},{"location":"kb/algo/hash/component/","text":"Component \u00b6","title":"Component"},{"location":"kb/algo/hash/component/#component","text":"","title":"Component"},{"location":"kb/algo/hash/cons/","text":"When not Use \u00b6","title":"When not Use"},{"location":"kb/algo/hash/cons/#when-not-use","text":"","title":"When not Use"},{"location":"kb/algo/hash/dataStructMap/","text":"Map with Hash \u00b6","title":"Map with Hash"},{"location":"kb/algo/hash/dataStructMap/#map-with-hash","text":"","title":"Map with Hash"},{"location":"kb/algo/hash/dataStructSet/","text":"Set with Hash \u00b6","title":"Set with Hash"},{"location":"kb/algo/hash/dataStructSet/#set-with-hash","text":"","title":"Set with Hash"},{"location":"kb/algo/hash/function/","text":"","title":"Function"},{"location":"kb/algo/hash/howO%281%29/","text":"Achieving O(1) \u00b6","title":"Achieving O(1)"},{"location":"kb/algo/hash/howO%281%29/#achieving-o1","text":"","title":"Achieving O(1)"},{"location":"kb/algo/hash/loadFactor/","text":"Load Factor \u00b6","title":"Load Factor"},{"location":"kb/algo/hash/loadFactor/#load-factor","text":"","title":"Load Factor"},{"location":"kb/algo/hash/rehash/","text":"Rehash \u00b6","title":"Rehash"},{"location":"kb/algo/hash/rehash/#rehash","text":"","title":"Rehash"},{"location":"kb/algo/hash/table/","text":"Table \u00b6 ADT \u00b6","title":"Table"},{"location":"kb/algo/hash/table/#table","text":"","title":"Table"},{"location":"kb/algo/hash/table/#adt","text":"","title":"ADT"},{"location":"kb/algo/hash/technique/","text":"Technique \u00b6","title":"Technique"},{"location":"kb/algo/hash/technique/#technique","text":"","title":"Technique"},{"location":"kb/algo/hash/vsDirectAddress/","text":"vs. Direct Address \u00b6","title":"vs. Direct Address"},{"location":"kb/algo/hash/vsDirectAddress/#vs-direct-address","text":"","title":"vs. Direct Address"},{"location":"kb/algo/recursion/format/","text":"","title":"Format"},{"location":"kb/algo/recursion/memory/","text":"","title":"Memory"},{"location":"kb/algo/recursion/recursionIteration/","text":"","title":"recursionIteration"},{"location":"kb/algo/recursion/what/","text":"","title":"What"},{"location":"kb/algo/recursion/why/","text":"","title":"Why"},{"location":"kb/algo/recursion/case/directorySize/","text":"Directory Size \u00b6","title":"Directory Size"},{"location":"kb/algo/recursion/case/directorySize/#directory-size","text":"","title":"Directory Size"},{"location":"kb/algo/recursion/case/sumOfFirstN/","text":"1 + 2 + \u2026 + n \u00b6","title":"1 + 2 + ... + n"},{"location":"kb/algo/recursion/case/sumOfFirstN/#1-2-n","text":"","title":"1 + 2 + ... + n"},{"location":"kb/algo/recursion/case/towerOfHanoi/","text":"Tower of Hanoi \u00b6","title":"Tower of Hanoi"},{"location":"kb/algo/recursion/case/towerOfHanoi/#tower-of-hanoi","text":"","title":"Tower of Hanoi"},{"location":"kb/algo/recursion/case/twoToTheN/","text":"2^n \u00b6","title":"2^n"},{"location":"kb/algo/recursion/case/twoToTheN/#2n","text":"","title":"2^n"},{"location":"kb/algo/recursion/case/xToTheN/","text":"x^n \u00b6","title":"x^n"},{"location":"kb/algo/recursion/case/xToTheN/#xn","text":"","title":"x^n"},{"location":"kb/algo/search/binary/","text":"Binary \u00b6 Implement \u00b6 Implement Recursive \u00b6 Complexity \u00b6 Time \u00b6 Space \u00b6 Drawback \u00b6","title":"Binary"},{"location":"kb/algo/search/binary/#binary","text":"","title":"Binary"},{"location":"kb/algo/search/binary/#implement","text":"","title":"Implement"},{"location":"kb/algo/search/binary/#implement-recursive","text":"","title":"Implement Recursive"},{"location":"kb/algo/search/binary/#complexity","text":"","title":"Complexity"},{"location":"kb/algo/search/binary/#time","text":"","title":"Time"},{"location":"kb/algo/search/binary/#space","text":"","title":"Space"},{"location":"kb/algo/search/binary/#drawback","text":"","title":"Drawback"},{"location":"kb/algo/search/hash/","text":"Hash \u00b6","title":"Hash"},{"location":"kb/algo/search/hash/#hash","text":"","title":"Hash"},{"location":"kb/algo/search/interpolation/","text":"Interpolation \u00b6 Implement \u00b6 Complexity \u00b6 Time \u00b6 Space \u00b6","title":"Interpolation"},{"location":"kb/algo/search/interpolation/#interpolation","text":"","title":"Interpolation"},{"location":"kb/algo/search/interpolation/#implement","text":"","title":"Implement"},{"location":"kb/algo/search/interpolation/#complexity","text":"","title":"Complexity"},{"location":"kb/algo/search/interpolation/#time","text":"","title":"Time"},{"location":"kb/algo/search/interpolation/#space","text":"","title":"Space"},{"location":"kb/algo/search/linearOrderedSorted/","text":"Linear: Ordered/Sorted \u00b6 Implement \u00b6 Drawback \u00b6 Sear \u00b6","title":"Linear: Ordered/Sorted"},{"location":"kb/algo/search/linearOrderedSorted/#linear-orderedsorted","text":"","title":"Linear: Ordered/Sorted"},{"location":"kb/algo/search/linearOrderedSorted/#implement","text":"","title":"Implement"},{"location":"kb/algo/search/linearOrderedSorted/#drawback","text":"","title":"Drawback"},{"location":"kb/algo/search/linearOrderedSorted/#sear","text":"","title":"Sear"},{"location":"kb/algo/search/linearSequential/","text":"Linear: Sequential \u00b6","title":"Linear: Sequential"},{"location":"kb/algo/search/linearSequential/#linear-sequential","text":"","title":"Linear: Sequential"},{"location":"kb/algo/search/linearUnordered/","text":"Linear: Unordered \u00b6","title":"Linear: Unordered"},{"location":"kb/algo/search/linearUnordered/#linear-unordered","text":"","title":"Linear: Unordered"},{"location":"kb/algo/search/string/","text":"String \u00b6","title":"String"},{"location":"kb/algo/search/string/#string","text":"","title":"String"},{"location":"kb/algo/search/symbolTable/","text":"Symbol Table \u00b6","title":"Symbol Table"},{"location":"kb/algo/search/symbolTable/#symbol-table","text":"","title":"Symbol Table"},{"location":"kb/algo/select/kSmallest/","text":"k-Smallest Element \u00b6 k-Smallest Element in Sorted Order","title":"k-Smallest Element"},{"location":"kb/algo/select/kSmallest/#k-smallest-element","text":"k-Smallest Element in Sorted Order","title":"k-Smallest Element"},{"location":"kb/algo/select/linear/","text":"Linear \u00b6 Also called median of medians.","title":"Linear"},{"location":"kb/algo/select/linear/#linear","text":"Also called median of medians.","title":"Linear"},{"location":"kb/algo/select/partition/","text":"Partition \u00b6","title":"Partition"},{"location":"kb/algo/select/partition/#partition","text":"","title":"Partition"},{"location":"kb/algo/select/sort/","text":"Sort \u00b6","title":"Sort"},{"location":"kb/algo/select/sort/#sort","text":"","title":"Sort"},{"location":"kb/algo/sort/bubble/","text":"Bubble \u00b6","title":"Bubble"},{"location":"kb/algo/sort/bubble/#bubble","text":"","title":"Bubble"},{"location":"kb/algo/sort/bucketBin/","text":"Bucket/Bin \u00b6","title":"Bucket/Bin"},{"location":"kb/algo/sort/bucketBin/#bucketbin","text":"","title":"Bucket/Bin"},{"location":"kb/algo/sort/classification/","text":"Classification \u00b6","title":"Classification"},{"location":"kb/algo/sort/classification/#classification","text":"","title":"Classification"},{"location":"kb/algo/sort/comparison/","text":"Comparison \u00b6","title":"Comparison"},{"location":"kb/algo/sort/comparison/#comparison","text":"","title":"Comparison"},{"location":"kb/algo/sort/counting/","text":"Counting \u00b6","title":"Counting"},{"location":"kb/algo/sort/counting/#counting","text":"","title":"Counting"},{"location":"kb/algo/sort/external/","text":"External \u00b6","title":"External"},{"location":"kb/algo/sort/external/#external","text":"","title":"External"},{"location":"kb/algo/sort/heap/","text":"Heap \u00b6","title":"Heap"},{"location":"kb/algo/sort/heap/#heap","text":"","title":"Heap"},{"location":"kb/algo/sort/insertion/","text":"Insertion \u00b6","title":"Insertion"},{"location":"kb/algo/sort/insertion/#insertion","text":"","title":"Insertion"},{"location":"kb/algo/sort/linear/","text":"Linear \u00b6","title":"Linear"},{"location":"kb/algo/sort/linear/#linear","text":"","title":"Linear"},{"location":"kb/algo/sort/merge/","text":"Merge \u00b6","title":"Merge"},{"location":"kb/algo/sort/merge/#merge","text":"","title":"Merge"},{"location":"kb/algo/sort/quick/","text":"Quick \u00b6","title":"Quick"},{"location":"kb/algo/sort/quick/#quick","text":"","title":"Quick"},{"location":"kb/algo/sort/radix/","text":"Radix \u00b6","title":"Radix"},{"location":"kb/algo/sort/radix/#radix","text":"","title":"Radix"},{"location":"kb/algo/sort/selection/","text":"Selection \u00b6","title":"Selection"},{"location":"kb/algo/sort/selection/#selection","text":"","title":"Selection"},{"location":"kb/algo/sort/selectionRecursive/","text":"Selection: Recursive \u00b6","title":"Selection: Recursive"},{"location":"kb/algo/sort/selectionRecursive/#selection-recursive","text":"","title":"Selection: Recursive"},{"location":"kb/algo/sort/shell/","text":"Shell \u00b6","title":"Shell"},{"location":"kb/algo/sort/shell/#shell","text":"","title":"Shell"},{"location":"kb/algo/sort/topological/","text":"Topological \u00b6","title":"Topological"},{"location":"kb/algo/sort/topological/#topological","text":"","title":"Topological"},{"location":"kb/algo/sort/tree/","text":"Tree \u00b6","title":"Tree"},{"location":"kb/algo/sort/tree/#tree","text":"","title":"Tree"},{"location":"kb/algo/string/boyerMoore/","text":"Boyer-Moore \u00b6","title":"Boyer-Moore"},{"location":"kb/algo/string/boyerMoore/#boyer-moore","text":"","title":"Boyer-Moore"},{"location":"kb/algo/string/bruteForce/","text":"Brute Force \u00b6","title":"Brute Force"},{"location":"kb/algo/string/bruteForce/#brute-force","text":"","title":"Brute Force"},{"location":"kb/algo/string/kmp/","text":"KMP \u00b6","title":"KMP"},{"location":"kb/algo/string/kmp/#kmp","text":"","title":"KMP"},{"location":"kb/algo/string/matching/","text":"Matching \u00b6","title":"Matching"},{"location":"kb/algo/string/matching/#matching","text":"","title":"Matching"},{"location":"kb/algo/string/matchingAutomata/","text":"Matching: Finite Automata \u00b6","title":"Matching: Finite Automata"},{"location":"kb/algo/string/matchingAutomata/#matching-finite-automata","text":"","title":"Matching: Finite Automata"},{"location":"kb/algo/string/matchingRabinKarp/","text":"Matching: Rabin-Karp \u00b6","title":"Matching: Rabin-Karp"},{"location":"kb/algo/string/matchingRabinKarp/#matching-rabin-karp","text":"","title":"Matching: Rabin-Karp"},{"location":"kb/algo/symbol/table/","text":"Table \u00b6","title":"Table"},{"location":"kb/algo/symbol/table/#table","text":"","title":"Table"},{"location":"kb/algo/symbol/tableComparison/","text":"Table: Comparison \u00b6","title":"Table: Comparison"},{"location":"kb/algo/symbol/tableComparison/#table-comparison","text":"","title":"Table: Comparison"},{"location":"kb/algo/symbol/tableImplementation/","text":"Table: Implementation \u00b6","title":"Table: Implementation"},{"location":"kb/algo/symbol/tableImplementation/#table-implementation","text":"","title":"Table: Implementation"},{"location":"kb/design/case/airBnB/","text":"Air BnB \u00b6","title":"Air BnB"},{"location":"kb/design/case/airBnB/#air-bnb","text":"","title":"Air BnB"},{"location":"kb/design/case/algoExpert/","text":"Algo Expert \u00b6","title":"Algo Expert"},{"location":"kb/design/case/algoExpert/#algo-expert","text":"","title":"Algo Expert"},{"location":"kb/design/case/codeDeploymentSystem/","text":"Code Deployment System \u00b6","title":"Code Deployment System"},{"location":"kb/design/case/codeDeploymentSystem/#code-deployment-system","text":"","title":"Code Deployment System"},{"location":"kb/design/case/fbNewsFeed/","text":"FB News Feed \u00b6","title":"FB News Feed"},{"location":"kb/design/case/fbNewsFeed/#fb-news-feed","text":"","title":"FB News Feed"},{"location":"kb/design/case/googleDrive/","text":"Google Drive \u00b6","title":"Google Drive"},{"location":"kb/design/case/googleDrive/#google-drive","text":"","title":"Google Drive"},{"location":"kb/design/case/netflix/","text":"Netflix \u00b6","title":"Netflix"},{"location":"kb/design/case/netflix/#netflix","text":"","title":"Netflix"},{"location":"kb/design/case/redditAPI/","text":"Reddit API \u00b6","title":"Reddit API"},{"location":"kb/design/case/redditAPI/#reddit-api","text":"","title":"Reddit API"},{"location":"kb/design/case/slack/","text":"Slack \u00b6","title":"Slack"},{"location":"kb/design/case/slack/#slack","text":"","title":"Slack"},{"location":"kb/design/case/stockBroker/","text":"Stock Broker \u00b6","title":"Stock Broker"},{"location":"kb/design/case/stockBroker/#stock-broker","text":"","title":"Stock Broker"},{"location":"kb/design/case/uberAPI/","text":"Uber API \u00b6","title":"Uber API"},{"location":"kb/design/case/uberAPI/#uber-api","text":"","title":"Uber API"},{"location":"kb/design/designPatternCloud/cacheAside/","text":"Cache-Aside \u00b6","title":"Cache-Aside"},{"location":"kb/design/designPatternCloud/cacheAside/#cache-aside","text":"","title":"Cache-Aside"},{"location":"kb/design/designPatternCloud/circuitBreaker/","text":"Circuit Breaker \u00b6","title":"Circuit Breaker"},{"location":"kb/design/designPatternCloud/circuitBreaker/#circuit-breaker","text":"","title":"Circuit Breaker"},{"location":"kb/design/designPatternCloud/commandQuery/","text":"Command & Query Responsability Segregation \u00b6","title":"Command & Query Responsability Segregation"},{"location":"kb/design/designPatternCloud/commandQuery/#command-query-responsability-segregation","text":"","title":"Command &amp; Query Responsability Segregation"},{"location":"kb/design/designPatternCloud/compensatingTransaction/","text":"Compesating Transaction \u00b6","title":"Compesating Transaction"},{"location":"kb/design/designPatternCloud/compensatingTransaction/#compesating-transaction","text":"","title":"Compesating Transaction"},{"location":"kb/design/designPatternCloud/competingConsumer/","text":"Competing Consumer \u00b6","title":"Competing Consumer"},{"location":"kb/design/designPatternCloud/competingConsumer/#competing-consumer","text":"","title":"Competing Consumer"},{"location":"kb/design/designPatternCloud/computeResourceConsolidation/","text":"Compute Resource Consolidation \u00b6","title":"Compute Resource Consolidation"},{"location":"kb/design/designPatternCloud/computeResourceConsolidation/#compute-resource-consolidation","text":"","title":"Compute Resource Consolidation"},{"location":"kb/design/designPatternCloud/endpointMonitoring/","text":"Endpoint Monitoring \u00b6 Health \u00b6","title":"Endpoint Monitoring"},{"location":"kb/design/designPatternCloud/endpointMonitoring/#endpoint-monitoring","text":"","title":"Endpoint Monitoring"},{"location":"kb/design/designPatternCloud/endpointMonitoring/#health","text":"","title":"Health"},{"location":"kb/design/designPatternCloud/eventSourcing/","text":"Event Sourcing \u00b6","title":"Event Sourcing"},{"location":"kb/design/designPatternCloud/eventSourcing/#event-sourcing","text":"","title":"Event Sourcing"},{"location":"kb/design/designPatternCloud/externalConfigurationStore/","text":"External Configuration Store \u00b6","title":"External Configuration Store"},{"location":"kb/design/designPatternCloud/externalConfigurationStore/#external-configuration-store","text":"","title":"External Configuration Store"},{"location":"kb/design/designPatternCloud/federatedIdentity/","text":"Federated Identity \u00b6","title":"Federated Identity"},{"location":"kb/design/designPatternCloud/federatedIdentity/#federated-identity","text":"","title":"Federated Identity"},{"location":"kb/design/designPatternCloud/gatekeeper/","text":"Gatekeeper \u00b6","title":"Gatekeeper"},{"location":"kb/design/designPatternCloud/gatekeeper/#gatekeeper","text":"","title":"Gatekeeper"},{"location":"kb/design/designPatternCloud/indexTable/","text":"Index Table \u00b6","title":"Index Table"},{"location":"kb/design/designPatternCloud/indexTable/#index-table","text":"","title":"Index Table"},{"location":"kb/design/designPatternCloud/leaderElection/","text":"Leader Election \u00b6","title":"Leader Election"},{"location":"kb/design/designPatternCloud/leaderElection/#leader-election","text":"","title":"Leader Election"},{"location":"kb/design/designPatternCloud/materializedView/","text":"Materialized View \u00b6","title":"Materialized View"},{"location":"kb/design/designPatternCloud/materializedView/#materialized-view","text":"","title":"Materialized View"},{"location":"kb/design/designPatternCloud/pipeFilter/","text":"Pipe Filter \u00b6","title":"Pipe Filter"},{"location":"kb/design/designPatternCloud/pipeFilter/#pipe-filter","text":"","title":"Pipe Filter"},{"location":"kb/design/designPatternCloud/priorityQueue/","text":"Priority Queue \u00b6","title":"Priority Queue"},{"location":"kb/design/designPatternCloud/priorityQueue/#priority-queue","text":"","title":"Priority Queue"},{"location":"kb/design/designPatternCloud/publisher/","text":"Publisher \u00b6","title":"Publisher"},{"location":"kb/design/designPatternCloud/publisher/#publisher","text":"","title":"Publisher"},{"location":"kb/design/designPatternCloud/queueBasedLoadLeveling/","text":"Queue-Based Load Leveling \u00b6","title":"Queue-Based Load Leveling"},{"location":"kb/design/designPatternCloud/queueBasedLoadLeveling/#queue-based-load-leveling","text":"","title":"Queue-Based Load Leveling"},{"location":"kb/design/designPatternCloud/retry/","text":"Retry \u00b6","title":"Retry"},{"location":"kb/design/designPatternCloud/retry/#retry","text":"","title":"Retry"},{"location":"kb/design/designPatternCloud/runtimeReconfiguration/","text":"Runtime Reconfiguration \u00b6","title":"Runtime Reconfiguration"},{"location":"kb/design/designPatternCloud/runtimeReconfiguration/#runtime-reconfiguration","text":"","title":"Runtime Reconfiguration"},{"location":"kb/design/designPatternCloud/schedulerAgentSupervisor/","text":"Scheduler Agent Supervisor \u00b6","title":"Scheduler Agent Supervisor"},{"location":"kb/design/designPatternCloud/schedulerAgentSupervisor/#scheduler-agent-supervisor","text":"","title":"Scheduler Agent Supervisor"},{"location":"kb/design/designPatternCloud/sharding/","text":"Sharding \u00b6","title":"Sharding"},{"location":"kb/design/designPatternCloud/sharding/#sharding","text":"","title":"Sharding"},{"location":"kb/design/designPatternCloud/staticContentHosting/","text":"Static Content Hosting \u00b6","title":"Static Content Hosting"},{"location":"kb/design/designPatternCloud/staticContentHosting/#static-content-hosting","text":"","title":"Static Content Hosting"},{"location":"kb/design/designPatternCloud/subscriber/","text":"Subscriber \u00b6","title":"Subscriber"},{"location":"kb/design/designPatternCloud/subscriber/#subscriber","text":"","title":"Subscriber"},{"location":"kb/design/designPatternCloud/throttling/","text":"Throttling \u00b6","title":"Throttling"},{"location":"kb/design/designPatternCloud/throttling/#throttling","text":"","title":"Throttling"},{"location":"kb/design/designPatternCloud/valetKey/","text":"Valet Key \u00b6","title":"Valet Key"},{"location":"kb/design/designPatternCloud/valetKey/#valet-key","text":"","title":"Valet Key"},{"location":"kb/design/distributedSystem/asyncMessaging/","text":"Asynchronous Messaging \u00b6","title":"Asynchronous Messaging"},{"location":"kb/design/distributedSystem/asyncMessaging/#asynchronous-messaging","text":"","title":"Asynchronous Messaging"},{"location":"kb/design/distributedSystem/autoscaling/","text":"Autoscaling \u00b6","title":"Autoscaling"},{"location":"kb/design/distributedSystem/autoscaling/#autoscaling","text":"","title":"Autoscaling"},{"location":"kb/design/distributedSystem/caching/","text":"Caching \u00b6","title":"Caching"},{"location":"kb/design/distributedSystem/caching/#caching","text":"","title":"Caching"},{"location":"kb/design/distributedSystem/computePartitioning/","text":"Compute Partitioning \u00b6","title":"Compute Partitioning"},{"location":"kb/design/distributedSystem/computePartitioning/#compute-partitioning","text":"","title":"Compute Partitioning"},{"location":"kb/design/distributedSystem/dataConsistency/","text":"Data: Consistency \u00b6","title":"Data: Consistency"},{"location":"kb/design/distributedSystem/dataConsistency/#data-consistency","text":"","title":"Data: Consistency"},{"location":"kb/design/distributedSystem/dataPartitioning/","text":"Data: Partitioning \u00b6","title":"Data: Partitioning"},{"location":"kb/design/distributedSystem/dataPartitioning/#data-partitioning","text":"","title":"Data: Partitioning"},{"location":"kb/design/distributedSystem/dataReplication/","text":"Data: Replication \u00b6","title":"Data: Replication"},{"location":"kb/design/distributedSystem/dataReplication/#data-replication","text":"","title":"Data: Replication"},{"location":"kb/design/distributedSystem/instrumentation/","text":"Instrumentation \u00b6","title":"Instrumentation"},{"location":"kb/design/distributedSystem/instrumentation/#instrumentation","text":"","title":"Instrumentation"},{"location":"kb/design/distributedSystem/multiDatacenterDeploy/","text":"Multiple Data Center Deployment \u00b6","title":"Multiple Data Center Deployment"},{"location":"kb/design/distributedSystem/multiDatacenterDeploy/#multiple-data-center-deployment","text":"","title":"Multiple Data Center Deployment"},{"location":"kb/design/distributedSystem/serviceMeter/","text":"Service Metering \u00b6","title":"Service Metering"},{"location":"kb/design/distributedSystem/serviceMeter/#service-metering","text":"","title":"Service Metering"},{"location":"kb/design/distributedSystem/telemetry/","text":"Telemetry \u00b6","title":"Telemetry"},{"location":"kb/design/distributedSystem/telemetry/#telemetry","text":"","title":"Telemetry"},{"location":"kb/design/intro/apiDesign/","text":"API Design \u00b6","title":"API Design"},{"location":"kb/design/intro/apiDesign/#api-design","text":"","title":"API Design"},{"location":"kb/design/intro/availability/","text":"Availability \u00b6","title":"Availability"},{"location":"kb/design/intro/availability/#availability","text":"","title":"Availability"},{"location":"kb/design/intro/caching/","text":"Caching \u00b6","title":"Caching"},{"location":"kb/design/intro/caching/#caching","text":"","title":"Caching"},{"location":"kb/design/intro/clientServer/","text":"Client-Server \u00b6","title":"Client-Server"},{"location":"kb/design/intro/clientServer/#client-server","text":"","title":"Client-Server"},{"location":"kb/design/intro/config/","text":"Configuration \u00b6","title":"Configuration"},{"location":"kb/design/intro/config/#configuration","text":"","title":"Configuration"},{"location":"kb/design/intro/databaseRelational/","text":"Database: Relational \u00b6","title":"Database: Relational"},{"location":"kb/design/intro/databaseRelational/#database-relational","text":"","title":"Database: Relational"},{"location":"kb/design/intro/fundamentals/","text":"Fundamentals \u00b6","title":"Fundamentals"},{"location":"kb/design/intro/fundamentals/#fundamentals","text":"","title":"Fundamentals"},{"location":"kb/design/intro/hashing/","text":"Hashing \u00b6","title":"Hashing"},{"location":"kb/design/intro/hashing/#hashing","text":"","title":"Hashing"},{"location":"kb/design/intro/https/","text":"HTTPS \u00b6","title":"HTTPS"},{"location":"kb/design/intro/https/#https","text":"","title":"HTTPS"},{"location":"kb/design/intro/latencyThroughput/","text":"Latency and Throughput \u00b6","title":"Latency and Throughput"},{"location":"kb/design/intro/latencyThroughput/#latency-and-throughput","text":"","title":"Latency and Throughput"},{"location":"kb/design/intro/loadBalancer/","text":"Load Balancer \u00b6","title":"Load Balancer"},{"location":"kb/design/intro/loadBalancer/#load-balancer","text":"","title":"Load Balancer"},{"location":"kb/design/intro/logMonitor/","text":"Logging & Monitoring \u00b6","title":"Logging & Monitoring"},{"location":"kb/design/intro/logMonitor/#logging-monitoring","text":"","title":"Logging &amp; Monitoring"},{"location":"kb/design/intro/mapReduce/","text":"MapReduce \u00b6","title":"MapReduce"},{"location":"kb/design/intro/mapReduce/#mapreduce","text":"","title":"MapReduce"},{"location":"kb/design/intro/networkProtocol/","text":"Network Protocols \u00b6","title":"Network Protocols"},{"location":"kb/design/intro/networkProtocol/#network-protocols","text":"","title":"Network Protocols"},{"location":"kb/design/intro/p2p/","text":"P2P Network \u00b6","title":"P2P Network"},{"location":"kb/design/intro/p2p/#p2p-network","text":"","title":"P2P Network"},{"location":"kb/design/intro/polling/","text":"Polling \u00b6","title":"Polling"},{"location":"kb/design/intro/polling/#polling","text":"","title":"Polling"},{"location":"kb/design/intro/proxy/","text":"Proxy \u00b6","title":"Proxy"},{"location":"kb/design/intro/proxy/#proxy","text":"","title":"Proxy"},{"location":"kb/design/intro/rateLimit/","text":"Rate Limiting \u00b6","title":"Rate Limiting"},{"location":"kb/design/intro/rateLimit/#rate-limiting","text":"","title":"Rate Limiting"},{"location":"kb/design/intro/replication/","text":"Replication \u00b6","title":"Replication"},{"location":"kb/design/intro/replication/#replication","text":"","title":"Replication"},{"location":"kb/design/intro/storage/","text":"Storage \u00b6","title":"Storage"},{"location":"kb/design/intro/storage/#storage","text":"","title":"Storage"},{"location":"kb/design/intro/storeKeyValue/","text":"Store: Key-Value \u00b6","title":"Store: Key-Value"},{"location":"kb/design/intro/storeKeyValue/#store-key-value","text":"","title":"Store: Key-Value"},{"location":"kb/design/intro/storeParadigm/","text":"Store: Paradigm \u00b6","title":"Store: Paradigm"},{"location":"kb/design/intro/storeParadigm/#store-paradigm","text":"","title":"Store: Paradigm"},{"location":"kb/design/intro/stream/","text":"Stream \u00b6","title":"Stream"},{"location":"kb/design/intro/stream/#stream","text":"","title":"Stream"},{"location":"kb/ds/","text":"\ud83c\udf09 Data Structure \u00b6","title":"\ud83c\udf09 Data Structure"},{"location":"kb/ds/#data-structure","text":"","title":"\ud83c\udf09 Data Structure"},{"location":"kb/ds/file/classification/","text":"","title":"Classification"},{"location":"kb/ds/file/operation/","text":"","title":"Operation"},{"location":"kb/ds/file/organization/","text":"Organization \u00b6","title":"Organization"},{"location":"kb/ds/file/organization/#organization","text":"","title":"Organization"},{"location":"kb/ds/file/organization/inverted/","text":"","title":"Inverted"},{"location":"kb/ds/file/organization/relative/","text":"","title":"Relative"},{"location":"kb/ds/file/organization/sequence/","text":"","title":"Sequence"},{"location":"kb/ds/file/organization/sequenceIndex/","text":"Sequence Index \u00b6","title":"Sequence Index"},{"location":"kb/ds/file/organization/sequenceIndex/#sequence-index","text":"","title":"Sequence Index"},{"location":"kb/ds/graph/app/connectedCircles/","text":"Connected Circles \u00b6","title":"Connected Circles"},{"location":"kb/ds/graph/app/connectedCircles/#connected-circles","text":"","title":"Connected Circles"},{"location":"kb/ds/graph/app/nineTails/","text":"Nine Tails \u00b6","title":"Nine Tails"},{"location":"kb/ds/graph/app/nineTails/#nine-tails","text":"","title":"Nine Tails"},{"location":"kb/ds/graph/modelling/","text":"Modelling \u00b6","title":"Modelling"},{"location":"kb/ds/graph/modelling/#modelling","text":"","title":"Modelling"},{"location":"kb/ds/graph/representation/adjacencyList/","text":"Adjacency: List \u00b6","title":"Adjacency: List"},{"location":"kb/ds/graph/representation/adjacencyList/#adjacency-list","text":"","title":"Adjacency: List"},{"location":"kb/ds/graph/representation/adjacencyMatrix/","text":"Adjacency: Matrix \u00b6","title":"Adjacency: Matrix"},{"location":"kb/ds/graph/representation/adjacencyMatrix/#adjacency-matrix","text":"","title":"Adjacency: Matrix"},{"location":"kb/ds/graph/sort/topological/","text":"Topological \u00b6","title":"Topological"},{"location":"kb/ds/graph/sort/topological/#topological","text":"","title":"Topological"},{"location":"kb/ds/graph/traversal/bfs/","text":"Breadth-First Traversal (BFS) \u00b6","title":"Breadth-First Traversal (BFS)"},{"location":"kb/ds/graph/traversal/bfs/#breadth-first-traversal-bfs","text":"","title":"Breadth-First Traversal (BFS)"},{"location":"kb/ds/graph/traversal/dfs/","text":"Depth-First Traversal (DFS) \u00b6","title":"Depth-First Traversal (DFS)"},{"location":"kb/ds/graph/traversal/dfs/#depth-first-traversal-dfs","text":"","title":"Depth-First Traversal (DFS)"},{"location":"kb/ds/graph/visualization/","text":"Visualization \u00b6","title":"Visualization"},{"location":"kb/ds/graph/visualization/#visualization","text":"","title":"Visualization"},{"location":"kb/ds/graph/weighted/modelling/","text":"Modelling \u00b6","title":"Modelling"},{"location":"kb/ds/graph/weighted/modelling/#modelling","text":"","title":"Modelling"},{"location":"kb/ds/graph/weighted/representation/","text":"Representation \u00b6","title":"Representation"},{"location":"kb/ds/graph/weighted/representation/#representation","text":"","title":"Representation"},{"location":"kb/ds/graph/weighted/shortestPath/","text":"Shortest Path \u00b6","title":"Shortest Path"},{"location":"kb/ds/graph/weighted/shortestPath/#shortest-path","text":"","title":"Shortest Path"},{"location":"kb/ds/graph/weighted/app/weightedNineTails/","text":"Weighted Nine Tails \u00b6","title":"Weighted Nine Tails"},{"location":"kb/ds/graph/weighted/app/weightedNineTails/#weighted-nine-tails","text":"","title":"Weighted Nine Tails"},{"location":"kb/ds/graph/weighted/minimalSpanningTree/kruskal/","text":"Kruskal \u00b6","title":"Kruskal"},{"location":"kb/ds/graph/weighted/minimalSpanningTree/kruskal/#kruskal","text":"","title":"Kruskal"},{"location":"kb/ds/graph/weighted/minimalSpanningTree/prim/","text":"Prim \u00b6","title":"Prim"},{"location":"kb/ds/graph/weighted/minimalSpanningTree/prim/#prim","text":"","title":"Prim"},{"location":"kb/ds/heap/binary/","text":"Binary \u00b6","title":"Binary"},{"location":"kb/ds/heap/binary/#binary","text":"","title":"Binary"},{"location":"kb/ds/list/arrayVsLinked/","text":"Array vs. Linked \u00b6","title":"Array vs. Linked"},{"location":"kb/ds/list/arrayVsLinked/#array-vs-linked","text":"","title":"Array vs. Linked"},{"location":"kb/ds/list/skip/","text":"Skip \u00b6","title":"Skip"},{"location":"kb/ds/list/skip/#skip","text":"","title":"Skip"},{"location":"kb/ds/list/array/dynamic/","text":"Dynamic \u00b6","title":"Dynamic"},{"location":"kb/ds/list/array/dynamic/#dynamic","text":"","title":"Dynamic"},{"location":"kb/ds/list/array/static/","text":"Static \u00b6","title":"Static"},{"location":"kb/ds/list/array/static/#static","text":"","title":"Static"},{"location":"kb/ds/list/linked/adt/","text":"ADT \u00b6","title":"ADT"},{"location":"kb/ds/list/linked/adt/#adt","text":"","title":"ADT"},{"location":"kb/ds/list/linked/circular/","text":"Circular \u00b6","title":"Circular"},{"location":"kb/ds/list/linked/circular/#circular","text":"","title":"Circular"},{"location":"kb/ds/list/linked/doubly/","text":"Doubly \u00b6","title":"Doubly"},{"location":"kb/ds/list/linked/doubly/#doubly","text":"","title":"Doubly"},{"location":"kb/ds/list/linked/doublyEfficient/","text":"Doubly: Efficient \u00b6","title":"Doubly: Efficient"},{"location":"kb/ds/list/linked/doublyEfficient/#doubly-efficient","text":"","title":"Doubly: Efficient"},{"location":"kb/ds/list/linked/header/","text":"Header \u00b6","title":"Header"},{"location":"kb/ds/list/linked/header/#header","text":"","title":"Header"},{"location":"kb/ds/list/linked/polynomial/","text":"Polynomial \u00b6","title":"Polynomial"},{"location":"kb/ds/list/linked/polynomial/#polynomial","text":"","title":"Polynomial"},{"location":"kb/ds/list/linked/singly/","text":"Singly \u00b6","title":"Singly"},{"location":"kb/ds/list/linked/singly/#singly","text":"","title":"Singly"},{"location":"kb/ds/list/linked/unrolled/","text":"Unrolled \u00b6","title":"Unrolled"},{"location":"kb/ds/list/linked/unrolled/#unrolled","text":"","title":"Unrolled"},{"location":"kb/ds/map/adt/","text":"ADT \u00b6","title":"ADT"},{"location":"kb/ds/map/adt/#adt","text":"","title":"ADT"},{"location":"kb/ds/queue/adt/","text":"ADT \u00b6","title":"ADT"},{"location":"kb/ds/queue/adt/#adt","text":"","title":"ADT"},{"location":"kb/ds/queue/circular/","text":"Circular \u00b6","title":"Circular"},{"location":"kb/ds/queue/circular/#circular","text":"","title":"Circular"},{"location":"kb/ds/queue/doubleEnded/","text":"Double-Ended \u00b6","title":"Double-Ended"},{"location":"kb/ds/queue/doubleEnded/#double-ended","text":"","title":"Double-Ended"},{"location":"kb/ds/queue/implementByArray/","text":"implement: by Array \u00b6","title":"implement: by Array"},{"location":"kb/ds/queue/implementByArray/#implement-by-array","text":"","title":"implement: by Array"},{"location":"kb/ds/queue/implementByListLinked/","text":"Implement: by Linked List \u00b6 Operation: Insert \u00b6 Operation: Delete \u00b6","title":"Implement: by Linked List"},{"location":"kb/ds/queue/implementByListLinked/#implement-by-linked-list","text":"","title":"Implement: by Linked List"},{"location":"kb/ds/queue/implementByListLinked/#operation-insert","text":"","title":"Operation: Insert"},{"location":"kb/ds/queue/implementByListLinked/#operation-delete","text":"","title":"Operation: Delete"},{"location":"kb/ds/queue/operationDelete/","text":"operation: Delete \u00b6","title":"operation: Delete"},{"location":"kb/ds/queue/operationDelete/#operation-delete","text":"","title":"operation: Delete"},{"location":"kb/ds/queue/operationInsert/","text":"operation: Insert \u00b6","title":"operation: Insert"},{"location":"kb/ds/queue/operationInsert/#operation-insert","text":"","title":"operation: Insert"},{"location":"kb/ds/queue/priority/adt/","text":"","title":"Adt"},{"location":"kb/ds/queue/priority/implementByListLinked/","text":"Implement: by Linked List \u00b6 Operation: Insert \u00b6 Operation: Delete \u00b6","title":"Implement: by Linked List"},{"location":"kb/ds/queue/priority/implementByListLinked/#implement-by-linked-list","text":"","title":"Implement: by Linked List"},{"location":"kb/ds/queue/priority/implementByListLinked/#operation-insert","text":"","title":"Operation: Insert"},{"location":"kb/ds/queue/priority/implementByListLinked/#operation-delete","text":"","title":"Operation: Delete"},{"location":"kb/ds/set/disjoint/adt/","text":"ADT \u00b6","title":"ADT"},{"location":"kb/ds/set/disjoint/adt/#adt","text":"","title":"ADT"},{"location":"kb/ds/set/disjoint/app/","text":"Application \u00b6","title":"Application"},{"location":"kb/ds/set/disjoint/app/#application","text":"","title":"Application"},{"location":"kb/ds/set/disjoint/cons/","text":"Cons \u00b6","title":"Cons"},{"location":"kb/ds/set/disjoint/cons/#cons","text":"","title":"Cons"},{"location":"kb/ds/set/disjoint/fastUnionQuickFind/","text":"Fast Union / Quick Find \u00b6","title":"Fast Union / Quick Find"},{"location":"kb/ds/set/disjoint/fastUnionQuickFind/#fast-union-quick-find","text":"","title":"Fast Union / Quick Find"},{"location":"kb/ds/set/disjoint/fastUnionSlowFind/","text":"Fast Union / Slow Find \u00b6","title":"Fast Union / Slow Find"},{"location":"kb/ds/set/disjoint/fastUnionSlowFind/#fast-union-slow-find","text":"","title":"Fast Union / Slow Find"},{"location":"kb/ds/set/disjoint/pathCompression/","text":"Path Compression \u00b6","title":"Path Compression"},{"location":"kb/ds/set/disjoint/pathCompression/#path-compression","text":"","title":"Path Compression"},{"location":"kb/ds/set/disjoint/pros/","text":"Pros \u00b6","title":"Pros"},{"location":"kb/ds/set/disjoint/pros/#pros","text":"","title":"Pros"},{"location":"kb/ds/stack/adt/","text":"ADT \u00b6","title":"ADT"},{"location":"kb/ds/stack/adt/#adt","text":"","title":"ADT"},{"location":"kb/ds/stack/implementAsArray/","text":"implement: by Array \u00b6","title":"implement: by Array"},{"location":"kb/ds/stack/implementAsArray/#implement-by-array","text":"","title":"implement: by Array"},{"location":"kb/ds/stack/implementAsListLinked/","text":"implement: by Linked List \u00b6","title":"implement: by Linked List"},{"location":"kb/ds/stack/implementAsListLinked/#implement-by-linked-list","text":"","title":"implement: by Linked List"},{"location":"kb/ds/stack/operation/","text":"Operation \u00b6","title":"Operation"},{"location":"kb/ds/stack/operation/#operation","text":"","title":"Operation"},{"location":"kb/ds/stack/overflow/","text":"Overflow \u00b6","title":"Overflow"},{"location":"kb/ds/stack/overflow/#overflow","text":"","title":"Overflow"},{"location":"kb/ds/stack/underflow/","text":"Underflow \u00b6","title":"Underflow"},{"location":"kb/ds/stack/underflow/#underflow","text":"","title":"Underflow"},{"location":"kb/ds/stack/app/infixPostfix/","text":"Infix and Postfix \u00b6","title":"Infix and Postfix"},{"location":"kb/ds/stack/app/infixPostfix/#infix-and-postfix","text":"","title":"Infix and Postfix"},{"location":"kb/ds/stack/app/polish/","text":"Polish Notation \u00b6","title":"Polish Notation"},{"location":"kb/ds/stack/app/polish/#polish-notation","text":"","title":"Polish Notation"},{"location":"kb/ds/stack/app/postfixEvaluation/","text":"Evaluation: Postfix \u00b6","title":"Evaluation: Postfix"},{"location":"kb/ds/stack/app/postfixEvaluation/#evaluation-postfix","text":"","title":"Evaluation: Postfix"},{"location":"kb/ds/stack/app/prefixEvaluation/","text":"Evaluation: Prefix \u00b6","title":"Evaluation: Prefix"},{"location":"kb/ds/stack/app/prefixEvaluation/#evaluation-prefix","text":"","title":"Evaluation: Prefix"},{"location":"kb/ds/string/hashTable/","text":"Hash Table \u00b6","title":"Hash Table"},{"location":"kb/ds/string/hashTable/#hash-table","text":"","title":"Hash Table"},{"location":"kb/ds/string/treeBinarySearch/","text":"Tree: Binary Search \u00b6","title":"Tree: Binary Search"},{"location":"kb/ds/string/treeBinarySearch/#tree-binary-search","text":"","title":"Tree: Binary Search"},{"location":"kb/ds/string/treeSuffix/","text":"Tree: Suffix \u00b6","title":"Tree: Suffix"},{"location":"kb/ds/string/treeSuffix/#tree-suffix","text":"","title":"Tree: Suffix"},{"location":"kb/ds/string/treeTernarySearch/","text":"Tree: Ternary Search \u00b6","title":"Tree: Ternary Search"},{"location":"kb/ds/string/treeTernarySearch/#tree-ternary-search","text":"","title":"Tree: Ternary Search"},{"location":"kb/ds/string/tries/","text":"Tries \u00b6","title":"Tries"},{"location":"kb/ds/string/tries/#tries","text":"","title":"Tries"},{"location":"kb/ds/tree/generic/","text":"Generic \u00b6","title":"Generic"},{"location":"kb/ds/tree/generic/#generic","text":"","title":"Generic"},{"location":"kb/ds/tree/nAry/","text":"n-Ary \u00b6","title":"n-Ary"},{"location":"kb/ds/tree/nAry/#n-ary","text":"","title":"n-Ary"},{"location":"kb/ds/tree/variations/","text":"Variations \u00b6","title":"Variations"},{"location":"kb/ds/tree/variations/#variations","text":"","title":"Variations"},{"location":"kb/ds/tree/avl/operation/","text":"Operation \u00b6","title":"Operation"},{"location":"kb/ds/tree/avl/operation/#operation","text":"","title":"Operation"},{"location":"kb/ds/tree/binary/memory/","text":"Memory \u00b6","title":"Memory"},{"location":"kb/ds/tree/binary/memory/#memory","text":"","title":"Memory"},{"location":"kb/ds/tree/binary/traversalThreadedQueueless/","text":"Traversal: Threaded: Queueless \u00b6","title":"Traversal: Threaded: Queueless"},{"location":"kb/ds/tree/binary/traversalThreadedQueueless/#traversal-threaded-queueless","text":"","title":"Traversal: Threaded: Queueless"},{"location":"kb/ds/tree/binary/traversalThreadedStackless/","text":"Traversal: Threaded: Stackless \u00b6","title":"Traversal: Threaded: Stackless"},{"location":"kb/ds/tree/binary/traversalThreadedStackless/#traversal-threaded-stackless","text":"","title":"Traversal: Threaded: Stackless"},{"location":"kb/ds/tree/binary/types/","text":"Types \u00b6","title":"Types"},{"location":"kb/ds/tree/binary/types/#types","text":"","title":"Types"},{"location":"kb/ds/tree/binarySearch/createWithTraversal/","text":"Create by Traversal \u00b6","title":"Create by Traversal"},{"location":"kb/ds/tree/binarySearch/createWithTraversal/#create-by-traversal","text":"","title":"Create by Traversal"},{"location":"kb/ds/tree/binarySearch/operation/","text":"Operations \u00b6","title":"Operations"},{"location":"kb/ds/tree/binarySearch/operation/#operations","text":"","title":"Operations"},{"location":"kb/ds/tree/binarySearch/traversal/","text":"Traversal \u00b6","title":"Traversal"},{"location":"kb/ds/tree/binarySearch/traversal/#traversal","text":"","title":"Traversal"},{"location":"kb/ds/tree/expression/","text":"","title":"Index"},{"location":"kb/ds/tree/multiWay/b/","text":"B \u00b6","title":"B"},{"location":"kb/ds/tree/multiWay/b/#b","text":"","title":"B"},{"location":"kb/ds/tree/multiWay/bPlus/","text":"B+ \u00b6","title":"B+"},{"location":"kb/ds/tree/multiWay/bPlus/#b","text":"","title":"B+"},{"location":"kb/ds/tree/redBlack/operation/","text":"Operation \u00b6 Node: Insert \u00b6 Node: Delete \u00b6","title":"Operation"},{"location":"kb/ds/tree/redBlack/operation/#operation","text":"","title":"Operation"},{"location":"kb/ds/tree/redBlack/operation/#node-insert","text":"","title":"Node: Insert"},{"location":"kb/ds/tree/redBlack/operation/#node-delete","text":"","title":"Node: Delete"},{"location":"kb/ds/tree/xor/","text":"XOR \u00b6","title":"XOR"},{"location":"kb/ds/tree/xor/#xor","text":"","title":"XOR"},{"location":"kb/js/","text":"\ud83d\udc77 Javascript \u00b6","title":"\ud83d\udc77 Javascript"},{"location":"kb/js/#javascript","text":"","title":"\ud83d\udc77 Javascript"},{"location":"kb/js/functional/","text":"Functional Programming \u00b6 Bob->Alice : hello const splitName = (name) => name.split('_').join(' '); const returnNameCapitalized = (name) => name.toUpperCase(); console.log(returnNameCapitalized(splitName('leonardo_maldonado')));","title":"Functional Programming"},{"location":"kb/js/functional/#functional-programming","text":"Bob->Alice : hello const splitName = (name) => name.split('_').join(' '); const returnNameCapitalized = (name) => name.toUpperCase(); console.log(returnNameCapitalized(splitName('leonardo_maldonado')));","title":"Functional Programming"},{"location":"kb/js/this/","text":"this \u00b6","title":"this"},{"location":"kb/js/this/#this","text":"","title":"this"},{"location":"kb/pattern/behavioral/chainOfResponsability/","text":"Chain of Responsability \u00b6","title":"Chain of Responsability"},{"location":"kb/pattern/behavioral/chainOfResponsability/#chain-of-responsability","text":"","title":"Chain of Responsability"},{"location":"kb/pattern/behavioral/command/","text":"Command \u00b6","title":"Command"},{"location":"kb/pattern/behavioral/command/#command","text":"","title":"Command"},{"location":"kb/pattern/behavioral/iterator/","text":"Iterator \u00b6","title":"Iterator"},{"location":"kb/pattern/behavioral/iterator/#iterator","text":"","title":"Iterator"},{"location":"kb/pattern/behavioral/memento/","text":"Memento \u00b6","title":"Memento"},{"location":"kb/pattern/behavioral/memento/#memento","text":"","title":"Memento"},{"location":"kb/pattern/behavioral/observer/","text":"Observer \u00b6","title":"Observer"},{"location":"kb/pattern/behavioral/observer/#observer","text":"","title":"Observer"},{"location":"kb/pattern/behavioral/state/","text":"State \u00b6","title":"State"},{"location":"kb/pattern/behavioral/state/#state","text":"","title":"State"},{"location":"kb/pattern/behavioral/strategy/","text":"Strategy \u00b6","title":"Strategy"},{"location":"kb/pattern/behavioral/strategy/#strategy","text":"","title":"Strategy"},{"location":"kb/pattern/behavioral/template/","text":"Template \u00b6","title":"Template"},{"location":"kb/pattern/behavioral/template/#template","text":"","title":"Template"},{"location":"kb/pattern/creational/builder/","text":"Builder \u00b6","title":"Builder"},{"location":"kb/pattern/creational/builder/#builder","text":"","title":"Builder"},{"location":"kb/pattern/creational/factory/","text":"Factory \u00b6","title":"Factory"},{"location":"kb/pattern/creational/factory/#factory","text":"","title":"Factory"},{"location":"kb/pattern/creational/factoryAbstract/","text":"Factory: Abstract \u00b6","title":"Factory: Abstract"},{"location":"kb/pattern/creational/factoryAbstract/#factory-abstract","text":"","title":"Factory: Abstract"},{"location":"kb/pattern/creational/monostate/","text":"Monostate \u00b6","title":"Monostate"},{"location":"kb/pattern/creational/monostate/#monostate","text":"","title":"Monostate"},{"location":"kb/pattern/creational/prototype/","text":"Prototype \u00b6","title":"Prototype"},{"location":"kb/pattern/creational/prototype/#prototype","text":"","title":"Prototype"},{"location":"kb/pattern/creational/singleton/","text":"Singleton \u00b6","title":"Singleton"},{"location":"kb/pattern/creational/singleton/#singleton","text":"","title":"Singleton"},{"location":"kb/pattern/other/depInjection/","text":"Dependency Injection \u00b6","title":"Dependency Injection"},{"location":"kb/pattern/other/depInjection/#dependency-injection","text":"","title":"Dependency Injection"},{"location":"kb/pattern/structural/adapter/","text":"Adapter \u00b6","title":"Adapter"},{"location":"kb/pattern/structural/adapter/#adapter","text":"","title":"Adapter"},{"location":"kb/pattern/structural/bridge/","text":"Bridge \u00b6","title":"Bridge"},{"location":"kb/pattern/structural/bridge/#bridge","text":"","title":"Bridge"},{"location":"kb/pattern/structural/composite/","text":"Composite \u00b6","title":"Composite"},{"location":"kb/pattern/structural/composite/#composite","text":"","title":"Composite"},{"location":"kb/pattern/structural/facade/","text":"Fa\u00e7ade \u00b6","title":"Fa\u00e7ade"},{"location":"kb/pattern/structural/facade/#facade","text":"","title":"Fa\u00e7ade"},{"location":"kb/pattern/structural/flyweight/","text":"Flyweight \u00b6","title":"Flyweight"},{"location":"kb/pattern/structural/flyweight/#flyweight","text":"","title":"Flyweight"},{"location":"kb/pattern/structural/mediator/","text":"Mediator \u00b6","title":"Mediator"},{"location":"kb/pattern/structural/mediator/#mediator","text":"","title":"Mediator"},{"location":"kb/pattern/structural/proxy/","text":"Proxy \u00b6","title":"Proxy"},{"location":"kb/pattern/structural/proxy/#proxy","text":"","title":"Proxy"},{"location":"note/","text":"Course Notes \u00b6","title":"Course Notes"},{"location":"note/#course-notes","text":"","title":"Course Notes"},{"location":"note/computerScience/","text":"Computer Science \u00b6 Notes contain mistakes and are constantly updated.","title":"Computer Science"},{"location":"note/computerScience/#computer-science","text":"Notes contain mistakes and are constantly updated.","title":"Computer Science"},{"location":"note/mechanicalEngineering/","text":"Mechanical Engineering \u00b6 Notes are introductory, contain mistakes and are constantly updated. LTV Systems \u00b6 Rotor Dynamics \u00b6 LMIs \u00b6 Optimal Control \u00b6 Mechanical Vibration \u00b6 Reliability Engineering \u00b6","title":"Mechanical Engineering"},{"location":"note/mechanicalEngineering/#mechanical-engineering","text":"Notes are introductory, contain mistakes and are constantly updated.","title":"Mechanical Engineering"},{"location":"note/mechanicalEngineering/#ltv-systems","text":"","title":"LTV Systems"},{"location":"note/mechanicalEngineering/#rotor-dynamics","text":"","title":"Rotor Dynamics"},{"location":"note/mechanicalEngineering/#lmis","text":"","title":"LMIs"},{"location":"note/mechanicalEngineering/#optimal-control","text":"","title":"Optimal Control"},{"location":"note/mechanicalEngineering/#mechanical-vibration","text":"","title":"Mechanical Vibration"},{"location":"note/mechanicalEngineering/#reliability-engineering","text":"","title":"Reliability Engineering"},{"location":"note/mechanicalTechnology/","text":"Mechanical Technology \u00b6 Notes contain mistakes and are constantly updated. CNC Programming \u00b6 Metrology \u00b6 Production Management Doctrines \u00b6","title":"Mechanical Technology"},{"location":"note/mechanicalTechnology/#mechanical-technology","text":"Notes contain mistakes and are constantly updated.","title":"Mechanical Technology"},{"location":"note/mechanicalTechnology/#cnc-programming","text":"","title":"CNC Programming"},{"location":"note/mechanicalTechnology/#metrology","text":"","title":"Metrology"},{"location":"note/mechanicalTechnology/#production-management-doctrines","text":"","title":"Production Management Doctrines"},{"location":"people/","text":"Awesome People \u00b6","title":"Awesome People"},{"location":"people/#awesome-people","text":"","title":"Awesome People"},{"location":"people/controlAnalysis/","text":"Analysis \u2228 Control \u00b6 Vincent Blondel (control over networks, computational complexity of control design) Google Scholar user=VbXMQF4AAAAJ Masayoshi Tomizuka (control of mechanical systems) Google Scholar user=UG17DJgAAAAJ Joszef Bokor (control of automotive systems) Google Scholar user=8m8taGEAAAAJ Wilson Rugh (signals and systems pioneer) Scopus authorId=7006965657 , homepage Oleg Gendelman (nonlinear system analysis) Google Scholar user=SUsDtWMAAAAJ Per-Olof Gutman (applied control theory) Google Scholar user=XuJ6XAsAAAAJ Mark Balas (control of flexible structures) Google Scholar user=TUxf4IoAAAAJ Tal Shima (swarm guidance) Google Scholar user=pp_nzaUAAAAJ Elon Rimon (robot navigation) Google Scholar user=YZPp814AAAAJ Pini Gurfil (distribituted networked systems) Google Scholar user=tNf4wr8AAAAJ Vered Rom-Kedar (structure analysis of dynamic systems) Google Scholar user=cLgnNzEAAAAJ","title":"Analysis \u2228 Control"},{"location":"people/controlAnalysis/#analysis-control","text":"Vincent Blondel (control over networks, computational complexity of control design) Google Scholar user=VbXMQF4AAAAJ Masayoshi Tomizuka (control of mechanical systems) Google Scholar user=UG17DJgAAAAJ Joszef Bokor (control of automotive systems) Google Scholar user=8m8taGEAAAAJ Wilson Rugh (signals and systems pioneer) Scopus authorId=7006965657 , homepage Oleg Gendelman (nonlinear system analysis) Google Scholar user=SUsDtWMAAAAJ Per-Olof Gutman (applied control theory) Google Scholar user=XuJ6XAsAAAAJ Mark Balas (control of flexible structures) Google Scholar user=TUxf4IoAAAAJ Tal Shima (swarm guidance) Google Scholar user=pp_nzaUAAAAJ Elon Rimon (robot navigation) Google Scholar user=YZPp814AAAAJ Pini Gurfil (distribituted networked systems) Google Scholar user=tNf4wr8AAAAJ Vered Rom-Kedar (structure analysis of dynamic systems) Google Scholar user=cLgnNzEAAAAJ","title":"Analysis \u2228 Control"},{"location":"people/controlGame/","text":"Game \u2227 Control \u00b6 David Fridovich-Keil (optimal control, dynamic games) Google Scholar user=gqyTnpQAAAAJ Jaime F. Fisac (robotic control, dynamic games) Google Scholar user=HvjirogAAAAJ Giuseppe Notarstefano (distributed control, games) Google Scholar user=CIpzCCEAAAAJ Eyal Winter (game theory, voting theory, mechanism) Google Scholar user=Jru_k6EAAAAJ Ahuva Mu\u2019alem (game and scheduling theory) Google Scholar user=oAklK0gAAAAJ Noam Nisan (mechanism design, electronic commerce) Google Scholar user=zXQZPnMAAAAJ Alvin E. Roth (mechanism design pioneer) Google Scholar user=C3HHY7oAAAAJ Lloyd S. Shapley (pioneer of mechanism design in computer science, matching problems) Google Scholar user=dbF9HlQAAAAJ","title":"Game \u2227 Control"},{"location":"people/controlGame/#game-control","text":"David Fridovich-Keil (optimal control, dynamic games) Google Scholar user=gqyTnpQAAAAJ Jaime F. Fisac (robotic control, dynamic games) Google Scholar user=HvjirogAAAAJ Giuseppe Notarstefano (distributed control, games) Google Scholar user=CIpzCCEAAAAJ Eyal Winter (game theory, voting theory, mechanism) Google Scholar user=Jru_k6EAAAAJ Ahuva Mu\u2019alem (game and scheduling theory) Google Scholar user=oAklK0gAAAAJ Noam Nisan (mechanism design, electronic commerce) Google Scholar user=zXQZPnMAAAAJ Alvin E. Roth (mechanism design pioneer) Google Scholar user=C3HHY7oAAAAJ Lloyd S. Shapley (pioneer of mechanism design in computer science, matching problems) Google Scholar user=dbF9HlQAAAAJ","title":"Game \u2227 Control"},{"location":"people/controlLearning/","text":"Learning \u2227 Control \u00b6 Dimitri Bertsekas (open-loop feedback control, awesome books, lectures, everything) Google Scholar user=VUmcVOAAAAAJ John Tsitsiklis (control, deep learning) Google Scholar user=bWTPrLEAAAAJ Sertac Karaman (control, autonomous systems) Google Scholar user=Vu-Zb7EAAAAJ Sergey Levine (learning, robotics, policies) Google Scholar user=Vu-Zb7EAAAAJ Pieter Abbeel (learning, robotics, policies, check insane helicopter ) Google Scholar user=vtwH6GkAAAAJ","title":"Learning \u2227 Control"},{"location":"people/controlLearning/#learning-control","text":"Dimitri Bertsekas (open-loop feedback control, awesome books, lectures, everything) Google Scholar user=VUmcVOAAAAAJ John Tsitsiklis (control, deep learning) Google Scholar user=bWTPrLEAAAAJ Sertac Karaman (control, autonomous systems) Google Scholar user=Vu-Zb7EAAAAJ Sergey Levine (learning, robotics, policies) Google Scholar user=Vu-Zb7EAAAAJ Pieter Abbeel (learning, robotics, policies, check insane helicopter ) Google Scholar user=vtwH6GkAAAAJ","title":"Learning \u2227 Control"},{"location":"people/formal/","text":"Formal Methods \u00b6 Doron Peled (temporal logic, concurrency) Google Scholar user=XF61SSwAAAAJ Ofer Strichman (translation, model checking, formal methods) Google Scholar user=h0R3z64AAAAJ Leonardo de Moura (theorem proof systems) Google Scholar user=CwazDKgAAAAJ Shimon Even (graphs, geometry, networks) Scopus authorId=7005714396","title":"Formal Methods"},{"location":"people/formal/#formal-methods","text":"Doron Peled (temporal logic, concurrency) Google Scholar user=XF61SSwAAAAJ Ofer Strichman (translation, model checking, formal methods) Google Scholar user=h0R3z64AAAAJ Leonardo de Moura (theorem proof systems) Google Scholar user=CwazDKgAAAAJ Shimon Even (graphs, geometry, networks) Scopus authorId=7005714396","title":"Formal Methods"},{"location":"people/game/","text":"Game \u00b6 Yuliy Sannikov (continous-time games, finance applications) Google Scholar user=iId1_GcAAAAJ Jeffrey Rosenschein (cooperative games) Google Scholar user=YO7cKNMAAAAJ Ariel Rubinstein (decision problems, bounded rationality models) Google Scholar user=sCccieYAAAAJ Ankur A. Kulkarni (interesection of games, control and information, check this ) Google Scholar user=QDK7vIMAAAAJ Sergiu Hart (games & dynamic systems) Google Scholar user=lvtuMYkAAAAJ Inbal Talgam-Cohen (mechanism design, auction theory) Google Scholar user=R1YK5BsAAAAJ S\u00e9bastien Lahaie (optimization, auction theory) Google Scholar user=a8MrE5EAAAAJ Geoffroy de Clippel (egalitarianism and mechanism design) Scopus authorId=18036496400 Shmuel Zamir (games with incomplete information) Google Scholar user=2QAV474AAAAJ","title":"Game"},{"location":"people/game/#game","text":"Yuliy Sannikov (continous-time games, finance applications) Google Scholar user=iId1_GcAAAAJ Jeffrey Rosenschein (cooperative games) Google Scholar user=YO7cKNMAAAAJ Ariel Rubinstein (decision problems, bounded rationality models) Google Scholar user=sCccieYAAAAJ Ankur A. Kulkarni (interesection of games, control and information, check this ) Google Scholar user=QDK7vIMAAAAJ Sergiu Hart (games & dynamic systems) Google Scholar user=lvtuMYkAAAAJ Inbal Talgam-Cohen (mechanism design, auction theory) Google Scholar user=R1YK5BsAAAAJ S\u00e9bastien Lahaie (optimization, auction theory) Google Scholar user=a8MrE5EAAAAJ Geoffroy de Clippel (egalitarianism and mechanism design) Scopus authorId=18036496400 Shmuel Zamir (games with incomplete information) Google Scholar user=2QAV474AAAAJ","title":"Game"},{"location":"people/googleScholarLabels/","text":"Google Scholar Labels \u00b6 label:network_information_theory label:learning_control label:learning_and_control label:causal_perturbation label:causal_perturbation_theory","title":"Google Scholar Labels"},{"location":"people/googleScholarLabels/#google-scholar-labels","text":"label:network_information_theory label:learning_control label:learning_and_control label:causal_perturbation label:causal_perturbation_theory","title":"Google Scholar Labels"},{"location":"people/information/","text":"Information \u00b6 Yaneer Bar-Yam (multiscale information theory) Google Scholar user=GhhgXQIAAAAJ Igal Sason (intersection of information and coding theory) Google Scholar user=SPBnIOEAAAAJ Ofer Zeitouni (filtering, communications) Google Scholar user=2c3HfFAAAAAJ Israel Cohen (robust information processing with deep learning) Google Scholar user=ZkQc3WMAAAAJ Tuvi Etzion (encoding) Google Scholar user=dnM-TsAAAAAJ Ron Meir (intersection of information, learning and control) Google Scholar user=r3NAa9oAAAAJ Guy Bresler (pure information theory) Google Scholar user=2aMqJTgAAAAJ Ran Raz (proof theory, communication complexity) Google Scholar user=vmHFZM0AAAAJ","title":"Information"},{"location":"people/information/#information","text":"Yaneer Bar-Yam (multiscale information theory) Google Scholar user=GhhgXQIAAAAJ Igal Sason (intersection of information and coding theory) Google Scholar user=SPBnIOEAAAAJ Ofer Zeitouni (filtering, communications) Google Scholar user=2c3HfFAAAAAJ Israel Cohen (robust information processing with deep learning) Google Scholar user=ZkQc3WMAAAAJ Tuvi Etzion (encoding) Google Scholar user=dnM-TsAAAAAJ Ron Meir (intersection of information, learning and control) Google Scholar user=r3NAa9oAAAAJ Guy Bresler (pure information theory) Google Scholar user=2aMqJTgAAAAJ Ran Raz (proof theory, communication complexity) Google Scholar user=vmHFZM0AAAAJ","title":"Information"},{"location":"people/learning/","text":"Learning \u00b6 Marvin Minsky (artificial intelligence, society of mind) Google Scholar user=g_7VKegAAAAJ Michael Luck (safe and trusted AI) Google Scholar user=mKVcy8sAAAAJ Seth Lloyd (all ideas interesting and information/learning related) Google Scholar user=mKVcy8sAAAAJ Ohad Shamir (learning theory) Google Scholar user=all0DHsAAAAJ Shai Shalev-Shwartz (online learning and convex optimization) Google Scholar user=uYVc9koAAAAJ Csaba Szepesvari (bandit framework, sequential decision) Google Scholar user=zvC19mQAAAAJ Edward Fredkin (digital physics, digital philosophy, pancomputationalism) Scopus authorId=6602365222 Shie Mannor (digital physics, digital philosophy, pancomputationalism) Google Scholar user=q1HlbIUAAAAJ Ricardo Silva (statistical machine learning) Google Scholar user=I-ANa0QAAAAJ Shimon Ullman (computer-human vision) Google Scholar user=XOfA8ckAAAAJ Charu Aggarwal (scalable machine learning) Google Scholar user=x_wsduUAAAAJ Koby Crammer (big data) Google Scholar user=NQgRwKAAAAAJ","title":"Learning"},{"location":"people/learning/#learning","text":"Marvin Minsky (artificial intelligence, society of mind) Google Scholar user=g_7VKegAAAAJ Michael Luck (safe and trusted AI) Google Scholar user=mKVcy8sAAAAJ Seth Lloyd (all ideas interesting and information/learning related) Google Scholar user=mKVcy8sAAAAJ Ohad Shamir (learning theory) Google Scholar user=all0DHsAAAAJ Shai Shalev-Shwartz (online learning and convex optimization) Google Scholar user=uYVc9koAAAAJ Csaba Szepesvari (bandit framework, sequential decision) Google Scholar user=zvC19mQAAAAJ Edward Fredkin (digital physics, digital philosophy, pancomputationalism) Scopus authorId=6602365222 Shie Mannor (digital physics, digital philosophy, pancomputationalism) Google Scholar user=q1HlbIUAAAAJ Ricardo Silva (statistical machine learning) Google Scholar user=I-ANa0QAAAAJ Shimon Ullman (computer-human vision) Google Scholar user=XOfA8ckAAAAJ Charu Aggarwal (scalable machine learning) Google Scholar user=x_wsduUAAAAJ Koby Crammer (big data) Google Scholar user=NQgRwKAAAAAJ","title":"Learning"},{"location":"people/optimization/","text":"Optimization \u00b6 Shoham Sabach (nonlinear optimization) Google Scholar user=42D12TkAAAAJ Angelia Nedich (optimization over networks) Google Scholar user=86PxxsoAAAAJ Dan Garber (algorithmic optimization) Google Scholar user=kUe1sZEAAAAJ Michael Zibulevsky (ML and optimization, nice classes on youtube) Google Scholar user=yKP7IwIAAAAJ Shmirit Stern (data-driven, large-scale optimization) Google Scholar user=Aq9GoRIAAAAJ Moscow State University Department of Mechanics and Mathematics Department of Extreme Problems* Dimitris Bertsimas (optimization with business applications) Google Scholar user=prKmkzMAAAAJ","title":"Optimization"},{"location":"people/optimization/#optimization","text":"Shoham Sabach (nonlinear optimization) Google Scholar user=42D12TkAAAAJ Angelia Nedich (optimization over networks) Google Scholar user=86PxxsoAAAAJ Dan Garber (algorithmic optimization) Google Scholar user=kUe1sZEAAAAJ Michael Zibulevsky (ML and optimization, nice classes on youtube) Google Scholar user=yKP7IwIAAAAJ Shmirit Stern (data-driven, large-scale optimization) Google Scholar user=Aq9GoRIAAAAJ Moscow State University Department of Mechanics and Mathematics Department of Extreme Problems* Dimitris Bertsimas (optimization with business applications) Google Scholar user=prKmkzMAAAAJ","title":"Optimization"},{"location":"people/pde/","text":"Applied PDEs \u00b6 Edriss Titi (turbulence) Google Scholar user=VrQC0_gAAAAJ Renato Cotta (generalized integral transforms) Google Scholar user=fdTa1UYAAAAJ Cezar Bonato (quantum mechanics pioneer at UFPB ) Scopus authorId=16411118100 Bas\u00edlio Baseia (quantum mechanics pioneer at UFPB ) Scopus authorId=7004772633","title":"Applied PDEs"},{"location":"people/pde/#applied-pdes","text":"Edriss Titi (turbulence) Google Scholar user=VrQC0_gAAAAJ Renato Cotta (generalized integral transforms) Google Scholar user=fdTa1UYAAAAJ Cezar Bonato (quantum mechanics pioneer at UFPB ) Scopus authorId=16411118100 Bas\u00edlio Baseia (quantum mechanics pioneer at UFPB ) Scopus authorId=7004772633","title":"Applied PDEs"},{"location":"people/thermo/","text":"Thermodynamics \u00b6 Herbert Bernard Callen (engineering thermodynamics with adequate math and physics foundation) Scopus authorId=22987302800 Joseph K. Kestin (engineering thermodynamics with adequate math and physics foundation) Scopus authorId=22987302800","title":"Thermodynamics"},{"location":"people/thermo/#thermodynamics","text":"Herbert Bernard Callen (engineering thermodynamics with adequate math and physics foundation) Scopus authorId=22987302800 Joseph K. Kestin (engineering thermodynamics with adequate math and physics foundation) Scopus authorId=22987302800","title":"Thermodynamics"},{"location":"post/","text":"Posts \u00b6","title":"Posts"},{"location":"post/#posts","text":"","title":"Posts"},{"location":"post/2022/","text":"2022 \u00b6","title":"2022"},{"location":"post/2022/#2022","text":"","title":"2022"},{"location":"post/2022/000-memo/","text":"Table memo! \u00b6 h3 { margin: auto; text-align: center; padding: 10px; color: #F8F8F8; } .table { background-color: #F8F8F8; margin: auto; width: 350px; border-collapse: separate; display: block; overflow-x: scroll; } thead, tbody { display: inline-block; } thead { position: sticky; top: 1px; z-index: 2; } tbody { height: 400px; } th { background-color: #32cd32; } td, th { min-width: 150px; max-width: 250px; word-wrap: break-word; } .fixed { position: sticky; width: 5em; left: 0; top: auto; z-index: 2; background-color: #CD7F32; } .fixedcorner { position: sticky; width: 5em; left: 0; top: auto; z-index: 999; background-color: #145214; } td:not(.fixed) { z-index: 0; } Tipo de Opera\u00e7\u00e3o Step # Where Code or Command Code or Command Exibir Excluir #0001 command line rails new crypto_wallet super super admin colaborador Categorias super super super super super Plantas super super super super super Produtos super admin super admin super admin super admin colaborador super admin Unidades super admin super admin colaborador super admin super admin colaborador super admin Clientes Mangabeira super admin colaborador super admin colaborador super admin colaborador super admin Personaliza\u00e7\u00e3o super admin colaborador super admin colaborador cliente super admin colaborador cliente super 9 super admin super admin super admin super admin colaborador cliente super 10 super admin super admin super admin super admin colaborador cliente super Snippet S0001: \u00b6 { \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"age\" : 25 } Snippet S0002: \u00b6 { \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"age\" : 25 } Snippet S0003: \u00b6 def index puts \"hello world\" end","title":"Table memo!"},{"location":"post/2022/000-memo/#table-memo","text":"h3 { margin: auto; text-align: center; padding: 10px; color: #F8F8F8; } .table { background-color: #F8F8F8; margin: auto; width: 350px; border-collapse: separate; display: block; overflow-x: scroll; } thead, tbody { display: inline-block; } thead { position: sticky; top: 1px; z-index: 2; } tbody { height: 400px; } th { background-color: #32cd32; } td, th { min-width: 150px; max-width: 250px; word-wrap: break-word; } .fixed { position: sticky; width: 5em; left: 0; top: auto; z-index: 2; background-color: #CD7F32; } .fixedcorner { position: sticky; width: 5em; left: 0; top: auto; z-index: 999; background-color: #145214; } td:not(.fixed) { z-index: 0; } Tipo de Opera\u00e7\u00e3o Step # Where Code or Command Code or Command Exibir Excluir #0001 command line rails new crypto_wallet super super admin colaborador Categorias super super super super super Plantas super super super super super Produtos super admin super admin super admin super admin colaborador super admin Unidades super admin super admin colaborador super admin super admin colaborador super admin Clientes Mangabeira super admin colaborador super admin colaborador super admin colaborador super admin Personaliza\u00e7\u00e3o super admin colaborador super admin colaborador cliente super admin colaborador cliente super 9 super admin super admin super admin super admin colaborador cliente super 10 super admin super admin super admin super admin colaborador cliente super","title":"Table memo!"},{"location":"post/2022/000-memo/#snippet-s0001","text":"{ \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"age\" : 25 }","title":"Snippet S0001:"},{"location":"post/2022/000-memo/#snippet-s0002","text":"{ \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"age\" : 25 }","title":"Snippet S0002:"},{"location":"post/2022/000-memo/#snippet-s0003","text":"def index puts \"hello world\" end","title":"Snippet S0003:"},{"location":"post/2022/001-testing-math/","text":"Testing math! \u00b6 Random gibberish to check if \\(\\LaTeX\\) is redenring well enough. When \\(a \\ne 0\\) , there are two solutions to \\((ax^2 + bx + c = 0)\\) and they are \\(x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\) : \\[\\begin{align} \\tag{1.1} V_{sphere} = \\frac{4}{3}\\pi r^3 \\end{align}\\] \\[\\begin{align} \\label{eq:test1} V_{sphere} = \\frac{4}{3}\\pi r^3 \\end{align}\\] In Eq. \\(\\eqref{eq:test1}\\) you can see\u2026while in Eq. \\(\\eqref{eq:test2}\\) \u2026 \\[\\begin{align} V_{cube} = l w h \\label{eq:test2} \\end{align}\\] The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\) , because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\) . \\[\\begin{pmatrix} 3 & -10 & 2 \\\\ -1 & 7 & 4 \\\\ 5 & 0 & 1 \\end{pmatrix} \\begin{pmatrix} x\\\\ y\\\\ z \\end{pmatrix} = \\begin{pmatrix} 3x-10y+2z \\\\ -x+7y+4z \\\\ 5x+z \\end{pmatrix}\\] \\[\\begin{equation} \\int_\\alpha^\\beta f'(x) \\, dx=f(\\beta)-f(\\alpha). \\end{equation}\\] We can use the fundamental theorem of calculus to say that \\(\\int_2^3 x^2 \\, dx=\\frac{3^3}{3}-\\frac{2^3}{3}=\\frac{19}{3}\\) . Also note that \\(\\displaystyle \\int_2^3 x^2 \\, dx=\\frac{3^3}{3}-\\frac{2^3}{3}=\\frac{19}{3}\\) . We can also give this equation its own line \\[\\begin{equation} \\int_2^3 x^2 \\, dx=\\frac{3^3}{3}-\\frac{2^3}{3}=\\frac{19}{3}. \\end{equation}\\] \\[\\begin{align*} \\frac{d}{dx}(x\\sin(x^2)) &= x\\frac{d}{dx}(\\sin(x^2)) + \\sin(x^2)\\frac{d}{dx}(x) \\\\ &= x\\cos(x^2)\\frac{d}{dx}(x^2) + \\sin(x^2)\\\\ &= x\\cos(x^2)2x + \\sin(x^2)\\\\ &= 2x^2\\cos(x^2) + \\sin(x^2) \\end{align*}\\] \\[\\left( \\begin{array}{cccc|c} 3 & -2 & 1 & -1 & 7\\\\ -1 & 0 & -5 & 2 & 2\\\\ 0 & 1 & 2 & 0 & 0\\\\ -2 & 3 & 0 & -5 & -1 \\end{array} \\right)\\] \\(\\rho_2\\leftrightarrow\\rho_3\\) \\(2\\rho_1+\\rho_2\\\\-3\\rho_1+\\rho_3\\) \\(\\subset, \\subseteq, \\supset,\\supseteq\\) \\(\\{, \\}, \\in, \\notin\\) , cup, cap, varnothing$ \\(\\le,\\ge,\\ne,\\approx\\) \\(\\forall,\\exists,\\therefore\\) \\(\\cdot, \\dots, \\cdots, \\vdots, \\ddots\\) \\(\\alpha, \\beta, \\gamma, \\rho, \\dots\\) \\(\\mathbb{R}, \\mathbb{Q}, \\mathbb{N}\\) \\(\\mathscr{A}, \\mathscr{B}, \\dots\\) \\(\\mathcal{A}, \\mathcal{B}, \\dots\\) \\(f\\colon A\\to B\\) \\(\\bigcup_{n=1}^\\infty, \\bigcap_{\\alpha\\in A}\\) \\(\\rightarrow,\\Rightarrow,\\longrightarrow\\) \\(\\leftrightarrow,\\Leftrightarrow\\) \\[\\begin{equation} x+y=z \\end{equation}\\] \\[\\begin{equation*} x+y=z \\end{equation*}\\] \\[\\begin{align} x+y&=z \\\\ m+n&>y \\end{align}\\] \\[\\begin{equation} (x+3)(x+2)=x^2+5x+6\\notag\\\\ \\geq x^2 \\end{equation}\\] \\[\\begin{gather} (x+3)(x+2)=x^2+5x+6\\notag\\\\ \\geq x^2 \\end{gather}\\] \\[\\begin{align} (x+3)(x+2)&=x^2+5x+6\\notag\\\\ &\\geq x^2 \\end{align}\\] \\(\\frac{x}{y}\\) \\(\\dfrac{x}{y}\\) \\(\\alpha \\beta \\gamma\\) \\(\\int_a^b \\iint \\oint\\) \\(\\sum_{n=1}^\\infty\\) \\[\\begin{equation} \\left\\lvert \\sum_{n=1}^\\infty n \\right\\rvert = \\dfrac{1}{12} \\end{equation}\\]","title":"Testing math!"},{"location":"post/2022/001-testing-math/#testing-math","text":"Random gibberish to check if \\(\\LaTeX\\) is redenring well enough. When \\(a \\ne 0\\) , there are two solutions to \\((ax^2 + bx + c = 0)\\) and they are \\(x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\) : \\[\\begin{align} \\tag{1.1} V_{sphere} = \\frac{4}{3}\\pi r^3 \\end{align}\\] \\[\\begin{align} \\label{eq:test1} V_{sphere} = \\frac{4}{3}\\pi r^3 \\end{align}\\] In Eq. \\(\\eqref{eq:test1}\\) you can see\u2026while in Eq. \\(\\eqref{eq:test2}\\) \u2026 \\[\\begin{align} V_{cube} = l w h \\label{eq:test2} \\end{align}\\] The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\) , because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\) . \\[\\begin{pmatrix} 3 & -10 & 2 \\\\ -1 & 7 & 4 \\\\ 5 & 0 & 1 \\end{pmatrix} \\begin{pmatrix} x\\\\ y\\\\ z \\end{pmatrix} = \\begin{pmatrix} 3x-10y+2z \\\\ -x+7y+4z \\\\ 5x+z \\end{pmatrix}\\] \\[\\begin{equation} \\int_\\alpha^\\beta f'(x) \\, dx=f(\\beta)-f(\\alpha). \\end{equation}\\] We can use the fundamental theorem of calculus to say that \\(\\int_2^3 x^2 \\, dx=\\frac{3^3}{3}-\\frac{2^3}{3}=\\frac{19}{3}\\) . Also note that \\(\\displaystyle \\int_2^3 x^2 \\, dx=\\frac{3^3}{3}-\\frac{2^3}{3}=\\frac{19}{3}\\) . We can also give this equation its own line \\[\\begin{equation} \\int_2^3 x^2 \\, dx=\\frac{3^3}{3}-\\frac{2^3}{3}=\\frac{19}{3}. \\end{equation}\\] \\[\\begin{align*} \\frac{d}{dx}(x\\sin(x^2)) &= x\\frac{d}{dx}(\\sin(x^2)) + \\sin(x^2)\\frac{d}{dx}(x) \\\\ &= x\\cos(x^2)\\frac{d}{dx}(x^2) + \\sin(x^2)\\\\ &= x\\cos(x^2)2x + \\sin(x^2)\\\\ &= 2x^2\\cos(x^2) + \\sin(x^2) \\end{align*}\\] \\[\\left( \\begin{array}{cccc|c} 3 & -2 & 1 & -1 & 7\\\\ -1 & 0 & -5 & 2 & 2\\\\ 0 & 1 & 2 & 0 & 0\\\\ -2 & 3 & 0 & -5 & -1 \\end{array} \\right)\\] \\(\\rho_2\\leftrightarrow\\rho_3\\) \\(2\\rho_1+\\rho_2\\\\-3\\rho_1+\\rho_3\\) \\(\\subset, \\subseteq, \\supset,\\supseteq\\) \\(\\{, \\}, \\in, \\notin\\) , cup, cap, varnothing$ \\(\\le,\\ge,\\ne,\\approx\\) \\(\\forall,\\exists,\\therefore\\) \\(\\cdot, \\dots, \\cdots, \\vdots, \\ddots\\) \\(\\alpha, \\beta, \\gamma, \\rho, \\dots\\) \\(\\mathbb{R}, \\mathbb{Q}, \\mathbb{N}\\) \\(\\mathscr{A}, \\mathscr{B}, \\dots\\) \\(\\mathcal{A}, \\mathcal{B}, \\dots\\) \\(f\\colon A\\to B\\) \\(\\bigcup_{n=1}^\\infty, \\bigcap_{\\alpha\\in A}\\) \\(\\rightarrow,\\Rightarrow,\\longrightarrow\\) \\(\\leftrightarrow,\\Leftrightarrow\\) \\[\\begin{equation} x+y=z \\end{equation}\\] \\[\\begin{equation*} x+y=z \\end{equation*}\\] \\[\\begin{align} x+y&=z \\\\ m+n&>y \\end{align}\\] \\[\\begin{equation} (x+3)(x+2)=x^2+5x+6\\notag\\\\ \\geq x^2 \\end{equation}\\] \\[\\begin{gather} (x+3)(x+2)=x^2+5x+6\\notag\\\\ \\geq x^2 \\end{gather}\\] \\[\\begin{align} (x+3)(x+2)&=x^2+5x+6\\notag\\\\ &\\geq x^2 \\end{align}\\] \\(\\frac{x}{y}\\) \\(\\dfrac{x}{y}\\) \\(\\alpha \\beta \\gamma\\) \\(\\int_a^b \\iint \\oint\\) \\(\\sum_{n=1}^\\infty\\) \\[\\begin{equation} \\left\\lvert \\sum_{n=1}^\\infty n \\right\\rvert = \\dfrac{1}{12} \\end{equation}\\]","title":"Testing math!"},{"location":"post/2022/002-testing-boxes/","text":"Testing boxes! \u00b6 On the importance of sentence length This sentence has five words. Here are five more words. - Gary Provost (100 Ways to Improve Your Writing, 1985) On the importance of sentence length This sentence has five words. Here are five more words. - Gary Provost (100 Ways to Improve Your Writing, 1985) Very Long Title NOTE This is something I want you to notice. It has a lot of text, and I want that text to wrap within a cell to the right of the NOTE , instead of under it. permalink baselevel Field Description Optional Default manual_entry_indicator no: is not is allow manual entry yes: is manual entry enabled yes no amounts json object containing all transaction amounts Subfield Description Optional Default tip transaction tip amount yes NA total equal to Base Amount + Base amount for Reduced State Tax + City Tax + State Tax + Reduced State Tax + Tip or Cash back no NA cashback cash back amount yes NA state_tax State tax amount yes NA city_tax City tax amount yes NA reduced_tax Reduced state tax amount yes NA base_reduced_tax Reduced state tax base amount yes NA no NA","title":"Testing boxes!"},{"location":"post/2022/002-testing-boxes/#testing-boxes","text":"On the importance of sentence length This sentence has five words. Here are five more words. - Gary Provost (100 Ways to Improve Your Writing, 1985) On the importance of sentence length This sentence has five words. Here are five more words. - Gary Provost (100 Ways to Improve Your Writing, 1985) Very Long Title NOTE This is something I want you to notice. It has a lot of text, and I want that text to wrap within a cell to the right of the NOTE , instead of under it. permalink baselevel Field Description Optional Default manual_entry_indicator no: is not is allow manual entry yes: is manual entry enabled yes no amounts json object containing all transaction amounts Subfield Description Optional Default tip transaction tip amount yes NA total equal to Base Amount + Base amount for Reduced State Tax + City Tax + State Tax + Reduced State Tax + Tip or Cash back no NA cashback cash back amount yes NA state_tax State tax amount yes NA city_tax City tax amount yes NA reduced_tax Reduced state tax amount yes NA base_reduced_tax Reduced state tax base amount yes NA no NA","title":"Testing boxes!"},{"location":"post/2022/003-testing-long-article/","text":"Testing long article! \u00b6 Contents: Matrices [Vector, __add__, reflect_y, rotate, dilate, transform] Matrices: Overloaded [Matrix, __add__, __str__, __mul__, zero, det, inv, __pow__] Bonus: Complex numbers Matrices: The (R)evolution . It\u2019s already in the making (there\u2019s a summary at the end) Preface: Based on my teaching experience, I think that the courses referenced by others are very good courses . That means if your goal is understanding matrices as mathematicians do, than you should by all means get the whole course. But if your goals are more modest, here\u2019s my try at something more tailored to your needs (but still written with the goal to convey many theoretical concepts, kind of contradicting my original advice.) How to use: This post is long. You might consider printing this and going slow, like one part a day. Code is essential. This is a course for programmers. Exercises are essential too. You should take a look at the code companion which contains all this code and much more It\u2019s \u201c2 for the price of 1\u201d special: you can also learn Python 3 here. And complex numbers. I\u2019ll highly value any attempt to read this (do I officially qualify for the longest post ever?), so feel free to comment if you don\u2019t understand something (and also if you do). 1. Matrices \u00b6 Vectors \u00b6 Before matrices come vectors. You sure know how to handle the 2- and 3- dimensional vectors: class Vector: \"\"\"This will be a simple 2-dimensional vector. In case you never encountered Python before, this string is a comment I can put on the definition of the class or any function. It's just one of many cool features of Python, so learn it here! \"\"\" def __init__(self, x, y): self.x = x self.y = y now you can write v = Vector(5, 3) w = Vector(7, -1) but it\u2019s not much fun by itself. Let\u2019s add more useful methods: def __str__(self: 'vector') -> 'readable form of vector': return '({0}, {1})'.format(self.x, self.y) def __add__(self:'vector', v: 'another vector') -> 'their sum': return Vector(self.x + v.x, self.y + v.y) def __mul__(self:'vector', number: 'a real number') -> 'vector': '''Multiplies the vector by a number''' return Vector(self.x * number, self.y * number) That makes things more interesting as we can now write: print(v + w * 2) and get the answer (19, 1) nicely printed as a vector (if the examples look unfamiliar, think how this code would look in C++). Tranformations \u00b6 Now it\u2019s all cool to be able to write 1274 * w but you need more vector operations for the graphics. Here are some of them: you can flip the vector around (0,0) point, you can reflect it around x or y axis, you can rotate it clockwise or counterclockwise (it\u2019s a good idea to draw a picture here). Let\u2019s do some simple operations: ... def flip(self:'vector') -> 'vector flipped around 0': return Vector(-self.x, -self.y) def reflect_x(self:'vector') -> 'vector reflected around x axis': return Vector(self.x, -self.y) print(v.flip(), v.reflect_x()) Question: is it possible to express flip(...) using the operations I had below? What about reflect_x ? Now you may wonder why I omitted reflect_y . Well, it\u2019s because I want you to stop for a moment and write your own version of it. Ok, here\u2019s mine: def reflect_y(self:'vector') -> 'vector reflected around y axis': return self.flip().reflect_x() See, if you look how this function computes, it\u2019s actually quite trivial. But suddenly an amazing thing happened: I was able to write a transformation using only the existing transformations flip and reflect_x . For all I care, reflect_y could be defined in a derived class without access to x and y and it would still work! Mathematicians would call these functions operators . They would say that reflect_y is an operator obtained by composition of operators flip and reflect_x which is denoted by reflect_y = flip ? reflect_x (you should see the small circle, a Unicode symbol 25CB ). Note: I will quite freely use the = symbol from now to denote that two operations produce the same result, like in the paragraph above. This is a \u201cmathematical = \u201d, which cannot be expressed as a program . So if I do print(v.reflect_y()) I get the result (-5, 3) . Go and picture it! Question: Consider a composition reflect_y ? reflect_y . How would you name it? Rotations \u00b6 Those operations were nice and useful, but you are probably wondering why am so slow to introduce rotations. Ok, here I go: def rotate(self:'vector', angle:'rotation angle') -> 'vector': ?????? At this point, if you know how to rotate vectors, you should go on and fill in the question marks. Otherwise please bear with me for one more simple case: counterclockwise rotation by 90 degrees. This one is not hard to draw on a piece of paper: def rotate_90(self:'vector') -> 'rotated vector': new_x = - self.y new_y = self.x return Vector(new_x, new_y) Trying x_axis = Vector(1, 0) y_axis = Vector(0, 1) print(x_axis.rotate_90(), y_axis.rotate_90()) now gives (0, 1) (-1, 0) . Run it yourself! Question: Prove that flip = rotate_90 ? rotate_90 . Anyway, I won\u2019t hide the secret ingredient for longer: import math # we'll need math from now on ... class Vector: ... def rotate(self:'vector', angle:'rotation angle') -> 'rotated vector': cos = math.cos(angle) sin = math.sin(angle) new_x = cos * self.x - sin * self.y new_y = sin * self.x + cos * self.y return Vector(new_x, new_y) Now let\u2019s try something along the lines: print(x_axis.rotate(90), y_axis.rotate(90)) If you expect the same result as before, (0, 1) (-1, 0) , you\u2019re bound to be disappointed. That code prints: (-0.448073616129, 0.893996663601) (-0.893996663601, -0.448073616129) and boy, is it ugly! Notation: I will say that we applied operation rotate(90) to x in the example above. The knowledge we gained is that rotate(90) != rotate_90 . Question: What happened here? How to express rotate_90 in terms of rotate ? How to express flip in terms of rotate ? Dilations \u00b6 Those rotations are certainly useful, but they are not everything you need to do even the 2D graphics. Consider the following transformations: def dilate(self:'vector', axe_x:'x dilation', axe_y:'y dilation'): '''Dilates a vector along the x and y axes''' new_x = axe_x * self.x new_y = axe_y * self.y return Vector(new_x, new_y) This dilate thing dilates the x and y axes in a possibly different way. Exercise: Fill in the question marks in dilate(?, ?) = flip , dilate(?, ?) = reflect_x . I will use this dilate function to demonstrate a thing mathematicians call commutativity : that is, for every value of parameters a , b , c , d you can be sure that dilate(a, b) ? dilate(c, d) = dilate(c, d) ? dilate(a, b) Exercise: Prove it. Also, is it true that for all possible values of parameters those below would hold? rotate(a) ? rotate(b) = rotate(b) ? rotate(a) dilate(a, b) ? rotate(c) = rotate(c) ? dilate(a, b) rotate(a) ? __mul__(b) = __mul__(b) ? rotate(a) Matrices \u00b6 Let\u2019s summarize all the stuff we had around here, our operators on vector x flip , reflect_x , * , rotate(angle) , dilate(x, y) from which one could make some really crazy stuff like flip ? rotate(angle) ? dilate(x, y) ? rotate(angle_2) ? reflect_y + reflect_x = ??? As you create more and more complicated expressions, one would hope for some kind of order that would suddenly reduce all possible expressions to a useful form. Fear not! Magically, every expression of the form above can be simplified to def ???(self:'vector', parameters): '''A magical representation of a crazy function''' new_x = ? * self.x + ? * self.y new_y = ? * self.x + ? * self.y return Vector(new_x, new_y) with some numbers and/or parameters instead of ? s. Example: Work out what the values of \u2018?\u2019 are for __mul__(2) ? rotate(pi/4) Another example: Same question for dilate(x, y) ? rotate(pi/4) This allows us to write a universal function def transform(self:'vector', m:'matrix') -> 'new vector': new_x = m[0] * self.x + m[1] * self.y new_y = m[2] * self.x + m[3] * self.y return Vector(new_x, new_y) which would take any 4-tuple of numbers, called matrix , and apply it to vector x . Here\u2019s an example: rotation_90_matrix = (0, -1, 1, 0) print(v, v.rotate_90(), v.transform(rotation_90_matrix)) which prints (5, 3) (-3, 5) (-3, 5) . Note that if you apply transform with any matrix to origin, you still get origin: origin = Vector(0, 0) print(origin.transform(rotation_90_matrix)) Exercise: what are the tuples m that describe flip , dilate(x, y) , rotate(angle) ? As we part with the Vector class, here\u2019s an exercise for those who want to test both their vector math knowledge and Pythonic skills: The final battle: Add to the Vector class all vector operations that you can come up with (how many of standard operators can you overload for vectors? Check out my answer). 2. Matrices: Overloaded \u00b6 As we found out in the previous section, a matrix can be thought of a shorthand that allows us to encode a vector operation in a simple way. For example, rotation_90_matrix encodes the rotation by 90 degrees. Matrix objects \u00b6 Now as we shift our attention from vectors to matrices, we should by all means have a class for matrix as well. Moreover, in that function Vector.transform(...) above the role of the matrix was somewhat misrepresented. It\u2019s more usual for m to be fixed while vector changes, so from now on our transformations will be methods of matrix class: class Matrix: def __init__(self:'new matrix', m:'matrix data'): '''Create a new matrix. So far a matrix for us is just a 4-tuple, but the action will get hotter once The (R)evolution happens! ''' self.m = m def __call__(self:'matrix', v:'vector'): new_x = self.m[0] * v.x + self.m[1] * v.y new_y = self.m[2] * v.x + self.m[3] * v.y return Vector(new_x, new_y) If you don\u2019t know Python, __call__ overloads the meaning of (...) for matrices so I can use the standard notation for a matrix acting on a vector. Also, the matrices are usually written using a single uppercase letter: J = Matrix(rotation_90_matrix) print(w, 'rotated is', J(w)) Exercise: repeat this example with matrices from the previous exercise. Addition \u00b6 Now, let\u2019s find out what else we can do with matrices. Remember that matrix m is really just a way to encode an operaton on vectors. Note that for two functions m1(x) and m2(x) I can create a new function (using lambda notation ) m = lambda x: m1(x) + m2(x) . It turns out if m1 and m2 were enconded by matrices, you can also encode this m using matrices ! Exercise: Think through any difficulties you might have with this statement. You just have to add its data, like (0, 1, -1, 0) + (0, 1, -1, 0) = (0, 2, -2, 0) . Here\u2019s how to add two tuples in Python, with some very useful and highly Pythonic techniques: def __add__(self:'matrix', snd:'another matrix'): \"\"\"This will add two matrix arguments. snd is a standard notation for second argument. (i for i in array) is Python's powerful list comprehension. zip(a, b) is used to iterate over two sequences together \"\"\" new_m = tuple(i + j for i, j in zip(self.m, snd.m)) return Matrix(new_m) Now we can write expressions like J + J or even J + J + J , but to see the results we have to figure out how to print a Matrix. A possible way would be to print a 4-tuple of numbers, but let\u2019s take a hint from the Matrix.__call__ function that the numbers should be organized into a 2x2 block: def as_block(self:'matrix') -> '2-line string': \"\"\"Prints the matrix as a 2x2 block. This function is a simple one without any advanced formatting. Writing a better one is an exercise. \"\"\" return ('| {0} {1} |\\n' .format(self.m[0], self.m[1]) + '| {0} {1} |\\n' .format(self.m[2], self.m[3]) ) If you look at this function in action you\u2019ll notice there is some room for improvement: print((J + J + J).as_block()) Exercise: write a nicer function Matrix.__str__ that will round the numbers and print them in the fields of fixed length. Now you should be able to write the matrix for rotation: def R(a: 'angle') -> 'matrix of rotation by a': cos = math.cos(a) sin = math.sin(a) m = ( ????? ) return Matrix(m) Exercise: Examine the code for Vector.rotate(self, angle) and fill in the question marks. Test with from math import pi print(R(pi/4) + R(-pi/4)) Multiplication \u00b6 The most important thing we can do with one-parameter functions is compose them: f = lambda v: f1(f2(v)) . How to mirror that with matrices? This requires us to examine how Matrix(m1) ( Matrix(m2) (v)) works. If you expand it, you\u2019ll notice that m(v).x = m1[0] * (m2[0]*v.x + m2[1]*v.y) + m1[1] * (m2[2]*v.x + m2[3]*v.y) and similarly for m(v).y , which, if you open the parentheses, looks suspiciously similar to Matrix.__call__ using a new tuple m , such that m[0] = m1[0] * m2[0] + m1[2] * m2[2] . So let\u2019s take this as a hint for a new definiton: def compose(self:'matrix', snd:'another matrix'): \"\"\"Returns a matrix that corresponds to composition of operators\"\"\" new_m = (self.m[0] * snd.m[0] + self.m[1] * snd.m[2], self.m[0] * snd.m[1] + self.m[1] * snd.m[3], ???, ???) return Matrix(new_m) Exercise: Fill in the question marks here. Test it with print(R(1).compose(R(2))) print(R(3)) Math exercise: Prove that R(a).compose(R(b)) is always the same as R(a + b) . Now let me tell the truth: this compose function is actually how mathematicians decided to multiply matrices. This makes sense as a notation: A * B is a matrix that decribes operator A ? B , and as we\u2019ll see next there are deeper reasons to call this \u2018multiplication\u2019 as well. To start using multiplication in Python all we have to do is to order it so in a Matrix class: class Matrix: ... __mul__ = compose Exercise: Compute (R(pi/2) + R(pi)) * (R(-pi/2) + R(pi)) . Try to find the answer yourself first on a piece of paper. Rules for + and * \u00b6 Let\u2019s make some good name for the matrix that corresponds to the dilate(a, b) operator. Now there\u2019s nothing wrong with D(a, b) , but I\u2019ll use a chance to introduce a standard notation: def diag(a: 'number', b: 'number') -> 'diagonal 2x2 matrix': m = (a, 0, 0, b) return Matrix(m) Try print(diag(2, 12345)) to see why it\u2019s called a diagonal matrix. As the composition of operations was found before to be not always commutative, * operator won\u2019t be always commutative for matrices either. Exercise: go back and refresh the commutativity thing if necessary. Then give examples of matrices A , B , made from R and diag , such that A * B is not equal to B * A . This is somewhat strange, since multiplication for numbers is always commutative, and raises the question whether compose really deserves to be called __mul__ . Here\u2019s quite a lot of rules that + and * do satisfy: A + B = B + A A * (B + C) = A * B + A * C (A + B) * C = A * C + B * C (A * B) * C = A * (B * C) There is an operation called A - B and (A - B) + B = A Exercise: Prove these statements. How to define A - B in terms of + , * and diag ? What does A - A equal to? Add the method __sub__ to the class Matrix . What happens if you compute R(2) - R(1)*R(1) ? What should it be equal to? The (A * B) * C = A * (B * C) equality is called associativity and is especially nice since it means that we don\u2019t have to worry about putting parentheses in an expression of the form A * B * C : print(R(1) * (diag(2,3) * R(2))) print((R(1) * diag(2,3)) * R(2)) Let\u2019s find analogues to regular numbers 0 and 1 and subtraction: zero = diag(0, 0) one = diag(1, 1) With the following easily verifiable additions: A + zero = A A * zero = zero A * one = one * A = A the rules become complete, in the sense that there is a short name for them: ring axioms . Mathematicians thus would say that matrices form a ring , and they indeed always use symbols + and * when talking about rings, and so shall we. Using the rules it\u2019s possible to easily compute the expression from the previous section: (R(pi/2) + R(pi)) * (R(-pi/2) + R(pi)) = R(pi/2) * R(-pi/2) + ... = one + ... Exercise: Finish this. Prove that (R(a) + R(b)) * (R(a) - R(b)) = R(2a) - R(2b) . Affine Transformations \u00b6 Time to return to how we defined matrices: they are a shortcut to some operations you can do with vectors, so it\u2019s something you can actually draw. You might want to take a pen or look at the materials that others suggested to see examples of different plane transformations. Among the transformations we\u2019ll be looking for the affine ones, those who look \u2018the same\u2019 everywhere (no bending). For example, a rotation around some point (x, y) qualifies. Now this one cannot be expressed as lambda v: A(v) , but in can be written in the form lambda v: A(v) + b for some matrix A and vector b . Exercise: find the A and b such that a rotation by pi/2 around the point (1, 0) has the form above. Are they unique? Note that for every vector there is an affine transformation which is a shift by the vector. An affine transformation may stretch or dilate shapes, but it should do in the same way everywhere. Now I hope you believe that the area of any figure changes by a constant number under the transformation. For a transformation given by matrix A this coeffiecient is called the determinant of A and can be computed applying the formula for an area to two vectors A(x_axis) and A(y_axis) : def det(self: 'matrix') -> 'determinant of a matrix': return self.m[0]*self.m[3] - self.m[1] * self.m[2] As a sanity check, diag(a, b).det() is equal to a * b . Exercise: Check this. What happens when one of arguments is 0? When it\u2019s negative? As you can see, the determinant of rotation matrix is always the same: from random import random r = R(random()) print (r, 'det =', r.det()) One interesting thing about det is that it is multiplicative (it kind of follows from the definition if you meditate long enough): A = Matrix((1, 2, -3, 0)) B = Matrix((4, 1, 1, 2)) print(A.det(), '*', B.det(), 'should be', (A * B).det()) Inverse \u00b6 A useful thing you can do with matrices is write a system of two linear equations A.m[0]*v.x + A.m[1]*v.y = b.x A.m[2]*v.x + A.m[3]*v.y = b.y in a simpler way: A(v) = b . Let\u2019s solve the system as they teach in (some) high schools: multiply first equation by A.m[3] , second by -A.m 1 and add (if in doubt, do this on a piece of paper) to solve for v.x . If you really tried it, you should have got A.det() * v.x = (A.m[3]) * b.x + (-A.m[1]) * b.y , which suggests that you can always get v by multiplying b by some other matrix. This matrix is called inverse of A : def inv(self: 'matrix') -> 'inverse matrix': '''This function returns an inverse matrix when it exists, or raises ZeroDivisionError when it doesn't. ''' new_m = ( self.m[3] / self.det(), -self.m[1] / self.det(), ????? ) return Matrix(new_m) As you see, this method fails loudly when determinant of matrix is zero. If you really want you can catch this expection with: try: print(zero.inv()) except ZeroDivisionError as e: ... Exercise: Finish the method. Prove that inverse matrix doesn\u2019t exist when self.det() == 0 . Write the method to divide matrices and test it. Use the inverse matrix to solve an equation A(v) = x_axis ( A was defined above). Powers \u00b6 The main property of inverse matrix is that A * A.inv() always equals to one Exercise: check that yourself. Explain why that should be so from the definition of inverse matrix. That\u2019s why mathematicians denote A.inv() by A -1 . How about we write a nice function to use A ** n notation for A n ? Note that the naive for i in range(n): answer *= self cycle is O(|n|) which is certainly too slow, because this can be done with a complexity of log |n| : def __pow__(self: 'matrix', n:'integer') -> 'n-th power': '''This function returns n-th power of the matrix. It does it more efficiently than a simple for cycle. A while loop goes over all bits of n, multiplying answer by self ** (2 ** k) whenever it encounters a set bit. ... Exercise: Fill in the details in this function. Test it with X, Y = A ** 5, A ** -5 print (X, Y, X * Y, sep = '\\n') This function only works for integer values of n , even though for some matrices we can also define a fractional power, such as square root (in other words, a matrix B such that B * B = A ). Exercise: Find a square root of diag(-1, -1) . Is this the only possible answer? Find an example of matrix that doesn\u2019t have a square root. Bonus: Complex numbers \u00b6 Here I\u2019m going to introduce you to the subject in exactly one section! Since it\u2019s a complex subject, I\u2019m likely to fail, so please forgive me in advance. First, similarly to how we have matrices zero and one , we can make a matrix out of any real number by doing diag(number, number) . Matrices of that form can be added, subtracted, multiplied, inverted and the results would mimic what happens with the numbers themselves. So for all practical purposes, one can say that, e.g., diag(5, 5) is 5. However, Python doesn\u2019t know yet how to handle expressions of the form A + 1 or 5 * B where A and B are matrices. If you\u2019re interested, you should by all means go and do the following exercise or look at my implementation (which uses a cool Python feature called decorator ); otherwise, just know that it\u2019s been implemented. Exercise for gurus: Change the operators in a Matrix class so that in all standard operations where one of operands is a matrix and another a number, the number is automatically converted to the diag matrix. Also add comparison for equality. Here\u2019s an example test: print( 3 * A - B / 2 + 5 ) Now here\u2019s the first interesting complex number : the matrix J , introduced in the beginning and equal to Matrix((0, 1, -1, 0)) , has a funny property that J * J == -1 (try it!). That means J is certainly not a normal number, but, as I just said, matrices and numbers easily mix together. For example, (1 + J) * (2 + J) == 2 + 2 * J + 1 * J + J * J = 1 + 3 * J using the rules listed some time before. What happens if we test this in Python? (1 + J) * (2 + J) == 1 + 3*J That should happily say True . Another example: (3 + 4*J) / (1 - 2*J) == -1 + 2*J As you might have guessed, the mathematicians don\u2019t call those \u2018crazy numbers\u2019, but they do something similar - they call expressions of the form a + b*J complex numbers . Because those are still instances of our Matrix class, we can do quite a lot of operations with those: addition, subtraction, multiplication, division, power - it\u2019s all already implemented! Aren\u2019t matrices amazing? I have overlooked the question of how to print the result of operation like E = (1 + 2*J) * (1 + 3*J) so that it looks like an expression with J rather than a 2x2 matrix. If you examine it carefully, you\u2019ll see that you need to print the left column of that matrix in the format ... + ...J (just one more nice thing: it\u2019s exactly E(x_axis) !) Those who know the difference between str() and repr() should see it\u2019s natural to name a function that would produce expression of such form as repr() . Exercise: Write the function Matrix.__repr__ that would do exactly that and try some tests with it, like (1 + J) ** 3 , first computing the result on paper and then trying it with Python. Math question: What is the determinant of a + b*J ? If you know what the absolute value of complex number is: how they are connected? What is the absolute value of a ? of a*J ? 4. Matrices: The (R)evolution \u00b6 In the final part of this trilogy we will see that everything is a matrix. We\u2019ll start with general M x N matrices, and find out how vectors can be thought of as 1 x N matrices and why numbers are the same as diagonal matrices. As a side note we\u2019ll explore the complex numbers as 2 x 2 matrices. Finally, we will learn to write affine and projective transformations using matrices. So the classes planned are [MNMatrix, NVector, Affine, Projective] . I guess if you was able to bear with me until here, you could be interested in this sequel, so I\u2019d like to hear if I should continue with this (and where, since I\u2019m pretty much sure I\u2019m beyond what considered reasonable length of a single document).","title":"Testing long article!"},{"location":"post/2022/003-testing-long-article/#testing-long-article","text":"Contents: Matrices [Vector, __add__, reflect_y, rotate, dilate, transform] Matrices: Overloaded [Matrix, __add__, __str__, __mul__, zero, det, inv, __pow__] Bonus: Complex numbers Matrices: The (R)evolution . It\u2019s already in the making (there\u2019s a summary at the end) Preface: Based on my teaching experience, I think that the courses referenced by others are very good courses . That means if your goal is understanding matrices as mathematicians do, than you should by all means get the whole course. But if your goals are more modest, here\u2019s my try at something more tailored to your needs (but still written with the goal to convey many theoretical concepts, kind of contradicting my original advice.) How to use: This post is long. You might consider printing this and going slow, like one part a day. Code is essential. This is a course for programmers. Exercises are essential too. You should take a look at the code companion which contains all this code and much more It\u2019s \u201c2 for the price of 1\u201d special: you can also learn Python 3 here. And complex numbers. I\u2019ll highly value any attempt to read this (do I officially qualify for the longest post ever?), so feel free to comment if you don\u2019t understand something (and also if you do).","title":"Testing long article!"},{"location":"post/2022/003-testing-long-article/#1-matrices","text":"","title":"1. Matrices"},{"location":"post/2022/003-testing-long-article/#vectors","text":"Before matrices come vectors. You sure know how to handle the 2- and 3- dimensional vectors: class Vector: \"\"\"This will be a simple 2-dimensional vector. In case you never encountered Python before, this string is a comment I can put on the definition of the class or any function. It's just one of many cool features of Python, so learn it here! \"\"\" def __init__(self, x, y): self.x = x self.y = y now you can write v = Vector(5, 3) w = Vector(7, -1) but it\u2019s not much fun by itself. Let\u2019s add more useful methods: def __str__(self: 'vector') -> 'readable form of vector': return '({0}, {1})'.format(self.x, self.y) def __add__(self:'vector', v: 'another vector') -> 'their sum': return Vector(self.x + v.x, self.y + v.y) def __mul__(self:'vector', number: 'a real number') -> 'vector': '''Multiplies the vector by a number''' return Vector(self.x * number, self.y * number) That makes things more interesting as we can now write: print(v + w * 2) and get the answer (19, 1) nicely printed as a vector (if the examples look unfamiliar, think how this code would look in C++).","title":"Vectors"},{"location":"post/2022/003-testing-long-article/#tranformations","text":"Now it\u2019s all cool to be able to write 1274 * w but you need more vector operations for the graphics. Here are some of them: you can flip the vector around (0,0) point, you can reflect it around x or y axis, you can rotate it clockwise or counterclockwise (it\u2019s a good idea to draw a picture here). Let\u2019s do some simple operations: ... def flip(self:'vector') -> 'vector flipped around 0': return Vector(-self.x, -self.y) def reflect_x(self:'vector') -> 'vector reflected around x axis': return Vector(self.x, -self.y) print(v.flip(), v.reflect_x()) Question: is it possible to express flip(...) using the operations I had below? What about reflect_x ? Now you may wonder why I omitted reflect_y . Well, it\u2019s because I want you to stop for a moment and write your own version of it. Ok, here\u2019s mine: def reflect_y(self:'vector') -> 'vector reflected around y axis': return self.flip().reflect_x() See, if you look how this function computes, it\u2019s actually quite trivial. But suddenly an amazing thing happened: I was able to write a transformation using only the existing transformations flip and reflect_x . For all I care, reflect_y could be defined in a derived class without access to x and y and it would still work! Mathematicians would call these functions operators . They would say that reflect_y is an operator obtained by composition of operators flip and reflect_x which is denoted by reflect_y = flip ? reflect_x (you should see the small circle, a Unicode symbol 25CB ). Note: I will quite freely use the = symbol from now to denote that two operations produce the same result, like in the paragraph above. This is a \u201cmathematical = \u201d, which cannot be expressed as a program . So if I do print(v.reflect_y()) I get the result (-5, 3) . Go and picture it! Question: Consider a composition reflect_y ? reflect_y . How would you name it?","title":"Tranformations"},{"location":"post/2022/003-testing-long-article/#rotations","text":"Those operations were nice and useful, but you are probably wondering why am so slow to introduce rotations. Ok, here I go: def rotate(self:'vector', angle:'rotation angle') -> 'vector': ?????? At this point, if you know how to rotate vectors, you should go on and fill in the question marks. Otherwise please bear with me for one more simple case: counterclockwise rotation by 90 degrees. This one is not hard to draw on a piece of paper: def rotate_90(self:'vector') -> 'rotated vector': new_x = - self.y new_y = self.x return Vector(new_x, new_y) Trying x_axis = Vector(1, 0) y_axis = Vector(0, 1) print(x_axis.rotate_90(), y_axis.rotate_90()) now gives (0, 1) (-1, 0) . Run it yourself! Question: Prove that flip = rotate_90 ? rotate_90 . Anyway, I won\u2019t hide the secret ingredient for longer: import math # we'll need math from now on ... class Vector: ... def rotate(self:'vector', angle:'rotation angle') -> 'rotated vector': cos = math.cos(angle) sin = math.sin(angle) new_x = cos * self.x - sin * self.y new_y = sin * self.x + cos * self.y return Vector(new_x, new_y) Now let\u2019s try something along the lines: print(x_axis.rotate(90), y_axis.rotate(90)) If you expect the same result as before, (0, 1) (-1, 0) , you\u2019re bound to be disappointed. That code prints: (-0.448073616129, 0.893996663601) (-0.893996663601, -0.448073616129) and boy, is it ugly! Notation: I will say that we applied operation rotate(90) to x in the example above. The knowledge we gained is that rotate(90) != rotate_90 . Question: What happened here? How to express rotate_90 in terms of rotate ? How to express flip in terms of rotate ?","title":"Rotations"},{"location":"post/2022/003-testing-long-article/#dilations","text":"Those rotations are certainly useful, but they are not everything you need to do even the 2D graphics. Consider the following transformations: def dilate(self:'vector', axe_x:'x dilation', axe_y:'y dilation'): '''Dilates a vector along the x and y axes''' new_x = axe_x * self.x new_y = axe_y * self.y return Vector(new_x, new_y) This dilate thing dilates the x and y axes in a possibly different way. Exercise: Fill in the question marks in dilate(?, ?) = flip , dilate(?, ?) = reflect_x . I will use this dilate function to demonstrate a thing mathematicians call commutativity : that is, for every value of parameters a , b , c , d you can be sure that dilate(a, b) ? dilate(c, d) = dilate(c, d) ? dilate(a, b) Exercise: Prove it. Also, is it true that for all possible values of parameters those below would hold? rotate(a) ? rotate(b) = rotate(b) ? rotate(a) dilate(a, b) ? rotate(c) = rotate(c) ? dilate(a, b) rotate(a) ? __mul__(b) = __mul__(b) ? rotate(a)","title":"Dilations"},{"location":"post/2022/003-testing-long-article/#matrices","text":"Let\u2019s summarize all the stuff we had around here, our operators on vector x flip , reflect_x , * , rotate(angle) , dilate(x, y) from which one could make some really crazy stuff like flip ? rotate(angle) ? dilate(x, y) ? rotate(angle_2) ? reflect_y + reflect_x = ??? As you create more and more complicated expressions, one would hope for some kind of order that would suddenly reduce all possible expressions to a useful form. Fear not! Magically, every expression of the form above can be simplified to def ???(self:'vector', parameters): '''A magical representation of a crazy function''' new_x = ? * self.x + ? * self.y new_y = ? * self.x + ? * self.y return Vector(new_x, new_y) with some numbers and/or parameters instead of ? s. Example: Work out what the values of \u2018?\u2019 are for __mul__(2) ? rotate(pi/4) Another example: Same question for dilate(x, y) ? rotate(pi/4) This allows us to write a universal function def transform(self:'vector', m:'matrix') -> 'new vector': new_x = m[0] * self.x + m[1] * self.y new_y = m[2] * self.x + m[3] * self.y return Vector(new_x, new_y) which would take any 4-tuple of numbers, called matrix , and apply it to vector x . Here\u2019s an example: rotation_90_matrix = (0, -1, 1, 0) print(v, v.rotate_90(), v.transform(rotation_90_matrix)) which prints (5, 3) (-3, 5) (-3, 5) . Note that if you apply transform with any matrix to origin, you still get origin: origin = Vector(0, 0) print(origin.transform(rotation_90_matrix)) Exercise: what are the tuples m that describe flip , dilate(x, y) , rotate(angle) ? As we part with the Vector class, here\u2019s an exercise for those who want to test both their vector math knowledge and Pythonic skills: The final battle: Add to the Vector class all vector operations that you can come up with (how many of standard operators can you overload for vectors? Check out my answer).","title":"Matrices"},{"location":"post/2022/003-testing-long-article/#2-matrices-overloaded","text":"As we found out in the previous section, a matrix can be thought of a shorthand that allows us to encode a vector operation in a simple way. For example, rotation_90_matrix encodes the rotation by 90 degrees.","title":"2. Matrices: Overloaded"},{"location":"post/2022/003-testing-long-article/#matrix-objects","text":"Now as we shift our attention from vectors to matrices, we should by all means have a class for matrix as well. Moreover, in that function Vector.transform(...) above the role of the matrix was somewhat misrepresented. It\u2019s more usual for m to be fixed while vector changes, so from now on our transformations will be methods of matrix class: class Matrix: def __init__(self:'new matrix', m:'matrix data'): '''Create a new matrix. So far a matrix for us is just a 4-tuple, but the action will get hotter once The (R)evolution happens! ''' self.m = m def __call__(self:'matrix', v:'vector'): new_x = self.m[0] * v.x + self.m[1] * v.y new_y = self.m[2] * v.x + self.m[3] * v.y return Vector(new_x, new_y) If you don\u2019t know Python, __call__ overloads the meaning of (...) for matrices so I can use the standard notation for a matrix acting on a vector. Also, the matrices are usually written using a single uppercase letter: J = Matrix(rotation_90_matrix) print(w, 'rotated is', J(w)) Exercise: repeat this example with matrices from the previous exercise.","title":"Matrix objects"},{"location":"post/2022/003-testing-long-article/#addition","text":"Now, let\u2019s find out what else we can do with matrices. Remember that matrix m is really just a way to encode an operaton on vectors. Note that for two functions m1(x) and m2(x) I can create a new function (using lambda notation ) m = lambda x: m1(x) + m2(x) . It turns out if m1 and m2 were enconded by matrices, you can also encode this m using matrices ! Exercise: Think through any difficulties you might have with this statement. You just have to add its data, like (0, 1, -1, 0) + (0, 1, -1, 0) = (0, 2, -2, 0) . Here\u2019s how to add two tuples in Python, with some very useful and highly Pythonic techniques: def __add__(self:'matrix', snd:'another matrix'): \"\"\"This will add two matrix arguments. snd is a standard notation for second argument. (i for i in array) is Python's powerful list comprehension. zip(a, b) is used to iterate over two sequences together \"\"\" new_m = tuple(i + j for i, j in zip(self.m, snd.m)) return Matrix(new_m) Now we can write expressions like J + J or even J + J + J , but to see the results we have to figure out how to print a Matrix. A possible way would be to print a 4-tuple of numbers, but let\u2019s take a hint from the Matrix.__call__ function that the numbers should be organized into a 2x2 block: def as_block(self:'matrix') -> '2-line string': \"\"\"Prints the matrix as a 2x2 block. This function is a simple one without any advanced formatting. Writing a better one is an exercise. \"\"\" return ('| {0} {1} |\\n' .format(self.m[0], self.m[1]) + '| {0} {1} |\\n' .format(self.m[2], self.m[3]) ) If you look at this function in action you\u2019ll notice there is some room for improvement: print((J + J + J).as_block()) Exercise: write a nicer function Matrix.__str__ that will round the numbers and print them in the fields of fixed length. Now you should be able to write the matrix for rotation: def R(a: 'angle') -> 'matrix of rotation by a': cos = math.cos(a) sin = math.sin(a) m = ( ????? ) return Matrix(m) Exercise: Examine the code for Vector.rotate(self, angle) and fill in the question marks. Test with from math import pi print(R(pi/4) + R(-pi/4))","title":"Addition"},{"location":"post/2022/003-testing-long-article/#multiplication","text":"The most important thing we can do with one-parameter functions is compose them: f = lambda v: f1(f2(v)) . How to mirror that with matrices? This requires us to examine how Matrix(m1) ( Matrix(m2) (v)) works. If you expand it, you\u2019ll notice that m(v).x = m1[0] * (m2[0]*v.x + m2[1]*v.y) + m1[1] * (m2[2]*v.x + m2[3]*v.y) and similarly for m(v).y , which, if you open the parentheses, looks suspiciously similar to Matrix.__call__ using a new tuple m , such that m[0] = m1[0] * m2[0] + m1[2] * m2[2] . So let\u2019s take this as a hint for a new definiton: def compose(self:'matrix', snd:'another matrix'): \"\"\"Returns a matrix that corresponds to composition of operators\"\"\" new_m = (self.m[0] * snd.m[0] + self.m[1] * snd.m[2], self.m[0] * snd.m[1] + self.m[1] * snd.m[3], ???, ???) return Matrix(new_m) Exercise: Fill in the question marks here. Test it with print(R(1).compose(R(2))) print(R(3)) Math exercise: Prove that R(a).compose(R(b)) is always the same as R(a + b) . Now let me tell the truth: this compose function is actually how mathematicians decided to multiply matrices. This makes sense as a notation: A * B is a matrix that decribes operator A ? B , and as we\u2019ll see next there are deeper reasons to call this \u2018multiplication\u2019 as well. To start using multiplication in Python all we have to do is to order it so in a Matrix class: class Matrix: ... __mul__ = compose Exercise: Compute (R(pi/2) + R(pi)) * (R(-pi/2) + R(pi)) . Try to find the answer yourself first on a piece of paper.","title":"Multiplication"},{"location":"post/2022/003-testing-long-article/#rules-for-and","text":"Let\u2019s make some good name for the matrix that corresponds to the dilate(a, b) operator. Now there\u2019s nothing wrong with D(a, b) , but I\u2019ll use a chance to introduce a standard notation: def diag(a: 'number', b: 'number') -> 'diagonal 2x2 matrix': m = (a, 0, 0, b) return Matrix(m) Try print(diag(2, 12345)) to see why it\u2019s called a diagonal matrix. As the composition of operations was found before to be not always commutative, * operator won\u2019t be always commutative for matrices either. Exercise: go back and refresh the commutativity thing if necessary. Then give examples of matrices A , B , made from R and diag , such that A * B is not equal to B * A . This is somewhat strange, since multiplication for numbers is always commutative, and raises the question whether compose really deserves to be called __mul__ . Here\u2019s quite a lot of rules that + and * do satisfy: A + B = B + A A * (B + C) = A * B + A * C (A + B) * C = A * C + B * C (A * B) * C = A * (B * C) There is an operation called A - B and (A - B) + B = A Exercise: Prove these statements. How to define A - B in terms of + , * and diag ? What does A - A equal to? Add the method __sub__ to the class Matrix . What happens if you compute R(2) - R(1)*R(1) ? What should it be equal to? The (A * B) * C = A * (B * C) equality is called associativity and is especially nice since it means that we don\u2019t have to worry about putting parentheses in an expression of the form A * B * C : print(R(1) * (diag(2,3) * R(2))) print((R(1) * diag(2,3)) * R(2)) Let\u2019s find analogues to regular numbers 0 and 1 and subtraction: zero = diag(0, 0) one = diag(1, 1) With the following easily verifiable additions: A + zero = A A * zero = zero A * one = one * A = A the rules become complete, in the sense that there is a short name for them: ring axioms . Mathematicians thus would say that matrices form a ring , and they indeed always use symbols + and * when talking about rings, and so shall we. Using the rules it\u2019s possible to easily compute the expression from the previous section: (R(pi/2) + R(pi)) * (R(-pi/2) + R(pi)) = R(pi/2) * R(-pi/2) + ... = one + ... Exercise: Finish this. Prove that (R(a) + R(b)) * (R(a) - R(b)) = R(2a) - R(2b) .","title":"Rules for + and *"},{"location":"post/2022/003-testing-long-article/#affine-transformations","text":"Time to return to how we defined matrices: they are a shortcut to some operations you can do with vectors, so it\u2019s something you can actually draw. You might want to take a pen or look at the materials that others suggested to see examples of different plane transformations. Among the transformations we\u2019ll be looking for the affine ones, those who look \u2018the same\u2019 everywhere (no bending). For example, a rotation around some point (x, y) qualifies. Now this one cannot be expressed as lambda v: A(v) , but in can be written in the form lambda v: A(v) + b for some matrix A and vector b . Exercise: find the A and b such that a rotation by pi/2 around the point (1, 0) has the form above. Are they unique? Note that for every vector there is an affine transformation which is a shift by the vector. An affine transformation may stretch or dilate shapes, but it should do in the same way everywhere. Now I hope you believe that the area of any figure changes by a constant number under the transformation. For a transformation given by matrix A this coeffiecient is called the determinant of A and can be computed applying the formula for an area to two vectors A(x_axis) and A(y_axis) : def det(self: 'matrix') -> 'determinant of a matrix': return self.m[0]*self.m[3] - self.m[1] * self.m[2] As a sanity check, diag(a, b).det() is equal to a * b . Exercise: Check this. What happens when one of arguments is 0? When it\u2019s negative? As you can see, the determinant of rotation matrix is always the same: from random import random r = R(random()) print (r, 'det =', r.det()) One interesting thing about det is that it is multiplicative (it kind of follows from the definition if you meditate long enough): A = Matrix((1, 2, -3, 0)) B = Matrix((4, 1, 1, 2)) print(A.det(), '*', B.det(), 'should be', (A * B).det())","title":"Affine Transformations"},{"location":"post/2022/003-testing-long-article/#inverse","text":"A useful thing you can do with matrices is write a system of two linear equations A.m[0]*v.x + A.m[1]*v.y = b.x A.m[2]*v.x + A.m[3]*v.y = b.y in a simpler way: A(v) = b . Let\u2019s solve the system as they teach in (some) high schools: multiply first equation by A.m[3] , second by -A.m 1 and add (if in doubt, do this on a piece of paper) to solve for v.x . If you really tried it, you should have got A.det() * v.x = (A.m[3]) * b.x + (-A.m[1]) * b.y , which suggests that you can always get v by multiplying b by some other matrix. This matrix is called inverse of A : def inv(self: 'matrix') -> 'inverse matrix': '''This function returns an inverse matrix when it exists, or raises ZeroDivisionError when it doesn't. ''' new_m = ( self.m[3] / self.det(), -self.m[1] / self.det(), ????? ) return Matrix(new_m) As you see, this method fails loudly when determinant of matrix is zero. If you really want you can catch this expection with: try: print(zero.inv()) except ZeroDivisionError as e: ... Exercise: Finish the method. Prove that inverse matrix doesn\u2019t exist when self.det() == 0 . Write the method to divide matrices and test it. Use the inverse matrix to solve an equation A(v) = x_axis ( A was defined above).","title":"Inverse"},{"location":"post/2022/003-testing-long-article/#powers","text":"The main property of inverse matrix is that A * A.inv() always equals to one Exercise: check that yourself. Explain why that should be so from the definition of inverse matrix. That\u2019s why mathematicians denote A.inv() by A -1 . How about we write a nice function to use A ** n notation for A n ? Note that the naive for i in range(n): answer *= self cycle is O(|n|) which is certainly too slow, because this can be done with a complexity of log |n| : def __pow__(self: 'matrix', n:'integer') -> 'n-th power': '''This function returns n-th power of the matrix. It does it more efficiently than a simple for cycle. A while loop goes over all bits of n, multiplying answer by self ** (2 ** k) whenever it encounters a set bit. ... Exercise: Fill in the details in this function. Test it with X, Y = A ** 5, A ** -5 print (X, Y, X * Y, sep = '\\n') This function only works for integer values of n , even though for some matrices we can also define a fractional power, such as square root (in other words, a matrix B such that B * B = A ). Exercise: Find a square root of diag(-1, -1) . Is this the only possible answer? Find an example of matrix that doesn\u2019t have a square root.","title":"Powers"},{"location":"post/2022/003-testing-long-article/#bonus-complex-numbers","text":"Here I\u2019m going to introduce you to the subject in exactly one section! Since it\u2019s a complex subject, I\u2019m likely to fail, so please forgive me in advance. First, similarly to how we have matrices zero and one , we can make a matrix out of any real number by doing diag(number, number) . Matrices of that form can be added, subtracted, multiplied, inverted and the results would mimic what happens with the numbers themselves. So for all practical purposes, one can say that, e.g., diag(5, 5) is 5. However, Python doesn\u2019t know yet how to handle expressions of the form A + 1 or 5 * B where A and B are matrices. If you\u2019re interested, you should by all means go and do the following exercise or look at my implementation (which uses a cool Python feature called decorator ); otherwise, just know that it\u2019s been implemented. Exercise for gurus: Change the operators in a Matrix class so that in all standard operations where one of operands is a matrix and another a number, the number is automatically converted to the diag matrix. Also add comparison for equality. Here\u2019s an example test: print( 3 * A - B / 2 + 5 ) Now here\u2019s the first interesting complex number : the matrix J , introduced in the beginning and equal to Matrix((0, 1, -1, 0)) , has a funny property that J * J == -1 (try it!). That means J is certainly not a normal number, but, as I just said, matrices and numbers easily mix together. For example, (1 + J) * (2 + J) == 2 + 2 * J + 1 * J + J * J = 1 + 3 * J using the rules listed some time before. What happens if we test this in Python? (1 + J) * (2 + J) == 1 + 3*J That should happily say True . Another example: (3 + 4*J) / (1 - 2*J) == -1 + 2*J As you might have guessed, the mathematicians don\u2019t call those \u2018crazy numbers\u2019, but they do something similar - they call expressions of the form a + b*J complex numbers . Because those are still instances of our Matrix class, we can do quite a lot of operations with those: addition, subtraction, multiplication, division, power - it\u2019s all already implemented! Aren\u2019t matrices amazing? I have overlooked the question of how to print the result of operation like E = (1 + 2*J) * (1 + 3*J) so that it looks like an expression with J rather than a 2x2 matrix. If you examine it carefully, you\u2019ll see that you need to print the left column of that matrix in the format ... + ...J (just one more nice thing: it\u2019s exactly E(x_axis) !) Those who know the difference between str() and repr() should see it\u2019s natural to name a function that would produce expression of such form as repr() . Exercise: Write the function Matrix.__repr__ that would do exactly that and try some tests with it, like (1 + J) ** 3 , first computing the result on paper and then trying it with Python. Math question: What is the determinant of a + b*J ? If you know what the absolute value of complex number is: how they are connected? What is the absolute value of a ? of a*J ?","title":"Bonus: Complex numbers"},{"location":"post/2022/003-testing-long-article/#4-matrices-the-revolution","text":"In the final part of this trilogy we will see that everything is a matrix. We\u2019ll start with general M x N matrices, and find out how vectors can be thought of as 1 x N matrices and why numbers are the same as diagonal matrices. As a side note we\u2019ll explore the complex numbers as 2 x 2 matrices. Finally, we will learn to write affine and projective transformations using matrices. So the classes planned are [MNMatrix, NVector, Affine, Projective] . I guess if you was able to bear with me until here, you could be interested in this sequel, so I\u2019d like to hear if I should continue with this (and where, since I\u2019m pretty much sure I\u2019m beyond what considered reasonable length of a single document).","title":"4. Matrices: The (R)evolution"},{"location":"post/2022/004-testing-diagrams/","text":"Testing diagrams! \u00b6 Check source code for any of the diagrams. Some diagrams may be properly viewed in light mode only. Dark mode out-of-the-box compatibility is still an issue. Diagrams by MkDocs \u00b6 Sequence diagram \u00b6 sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! State diagram \u00b6 stateDiagram-v2 state fork_state <<fork>> [*] --> fork_state fork_state --> State2 fork_state --> State3 state join_state <<join>> State2 --> join_state State3 --> join_state join_state --> State4 State4 --> [*] Class diagram \u00b6 classDiagram Person <|-- Student Person <|-- Professor Person : +String name Person : +String phoneNumber Person : +String emailAddress Person: +purchaseParkingPass() Address \"1\" <-- \"0..1\" Person:lives at class Student{ +int studentNumber +int averageMark +isEligibleToEnrol() +getSeminarsTaken() } class Professor{ +int salary } class Address{ +String street +String city +String state +int postalCode +String country -validate() +outputAsLabel() } Entity-relationship diagram \u00b6 erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses Diagrams by Mermaid \u00b6 Here is one mermaid diagram: graph TD A[Client] --> B[Load Balancer] B --> C[Server1] B --> D[Server2] And here is another: graph TD A[Client] -->|tcp_123| B B(Load Balancer) B -->|tcp_456| C[Server1] B -->|tcp_456| D[Server2] Here is a graph with subgraphs \u00b6 flowchart LR subgraph TOP direction TB subgraph B1 direction RL i1 -->f1 end subgraph B2 direction BT i2 -->f2 end end A --> TOP --> B B1 --> B2 Another graph with subgraphs \u00b6 flowchart TB c1-->a2 subgraph one a1-->a2 end subgraph two b1-->b2 end subgraph three c1-->c2 end one --> two three --> two two --> c2 An algorithm \u00b6 flowchart TD A[Start] --> B{Is it?} B -- Yes --> C[OK] C --> D[Rethink] D --> B B -- No ----> E[End] A customized algorithm \u00b6 flowchart LR A[Hard edge] -->|Link text| B(Round edge) B --> C{Decision} C -->|One| D[Result one] C -->|Two| E[Result two] Fontawesome support works? \u00b6 flowchart TD B[\"fab:fa-twitter for peace\"] B-->C[fa:fa-ban forbidden] B-->D(fa:fa-spinner); B-->E(A fa:fa-camera-retro perhaps?) Long requirement diagram \u00b6 requirementDiagram requirement test_req { id: 1 text: the test text. risk: high verifymethod: test } functionalRequirement test_req2 { id: 1.1 text: the second test text. risk: low verifymethod: inspection } performanceRequirement test_req3 { id: 1.2 text: the third test text. risk: medium verifymethod: demonstration } interfaceRequirement test_req4 { id: 1.2.1 text: the fourth test text. risk: medium verifymethod: analysis } physicalRequirement test_req5 { id: 1.2.2 text: the fifth test text. risk: medium verifymethod: analysis } designConstraint test_req6 { id: 1.2.3 text: the sixth test text. risk: medium verifymethod: analysis } element test_entity { type: simulation } element test_entity2 { type: word doc docRef: reqs/test_entity } element test_entity3 { type: \"test suite\" docRef: github.com/all_the_tests } test_entity - satisfies -> test_req2 test_req - traces -> test_req2 test_req - contains -> test_req3 test_req3 - contains -> test_req4 test_req4 - derives -> test_req5 test_req5 - refines -> test_req6 test_entity3 - verifies -> test_req5 test_req < - copies - test_entity2 Pie chart \u00b6 pie showData title Key elements in Product X \"Calcium\" : 42.96 \"Potassium\" : 50.05 \"Magnesium\" : 10.01 \"Iron\" : 5 C4 diagram \u00b6 C4Dynamic title Dynamic diagram for Internet Banking System - API Application ContainerDb(c4, \"Database\", \"Relational Database Schema\", \"Stores user registration information, hashed authentication credentials, access logs, etc.\") Container(c1, \"Single-Page Application\", \"JavaScript and Angular\", \"Provides all of the Internet banking functionality to customers via their web browser.\") Container_Boundary(b, \"API Application\") { Component(c3, \"Security Component\", \"Spring Bean\", \"Provides functionality Related to signing in, changing passwords, etc.\") Component(c2, \"Sign In Controller\", \"Spring MVC Rest Controller\", \"Allows users to sign in to the Internet Banking System.\") } Rel(c1, c2, \"Submits credentials to\", \"JSON/HTTPS\") Rel(c2, c3, \"Calls isAuthenticated() on\") Rel(c3, c4, \"select * from users where username = ?\", \"JDBC\") UpdateRelStyle(c1, c2, $textColor=\"red\", $offsetY=\"-40\") UpdateRelStyle(c2, c3, $textColor=\"red\", $offsetX=\"-40\", $offsetY=\"60\") UpdateRelStyle(c3, c4, $textColor=\"red\", $offsetY=\"-40\", $offsetX=\"10\") Git graph \u00b6 gitGraph commit id: \"1\" commit id: \"2\" branch nice_feature checkout nice_feature commit id: \"3\" checkout main commit id: \"4\" checkout nice_feature branch very_nice_feature checkout very_nice_feature commit id: \"5\" checkout main commit id: \"6\" checkout nice_feature commit id: \"7\" checkout main merge nice_feature id: \"customID\" tag: \"customTag\" type: REVERSE checkout very_nice_feature commit id: \"8\" checkout main commit id: \"9\" Gantt diagram \u00b6 gantt apple :a, 2017-07-20, 1w banana :crit, b, 2017-07-23, 1d cherry :active, c, after b a, 1d User journey diagram \u00b6 journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 5: Me Custom theme \u00b6 %%{init: {'theme': 'base', 'themeVariables': { 'primaryColor': '#ffcccc', 'edgeLabelBackground':'#ffffee', 'tertiaryColor': '#fff0f0'}}}%% graph TD A[Christmas] -->|Get money| B(Go shopping) B --> C{Let me think} B --> G[/Another/] C ==>|One| D[Laptop] C -->|Two| E[iPhone] C -->|Three| F[fa:fa-car Car] subgraph section C D E F G end","title":"Testing diagrams!"},{"location":"post/2022/004-testing-diagrams/#testing-diagrams","text":"Check source code for any of the diagrams. Some diagrams may be properly viewed in light mode only. Dark mode out-of-the-box compatibility is still an issue.","title":"Testing diagrams!"},{"location":"post/2022/004-testing-diagrams/#diagrams-by-mkdocs","text":"","title":"Diagrams by MkDocs"},{"location":"post/2022/004-testing-diagrams/#sequence-diagram","text":"sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good!","title":"Sequence diagram"},{"location":"post/2022/004-testing-diagrams/#state-diagram","text":"stateDiagram-v2 state fork_state <<fork>> [*] --> fork_state fork_state --> State2 fork_state --> State3 state join_state <<join>> State2 --> join_state State3 --> join_state join_state --> State4 State4 --> [*]","title":"State diagram"},{"location":"post/2022/004-testing-diagrams/#class-diagram","text":"classDiagram Person <|-- Student Person <|-- Professor Person : +String name Person : +String phoneNumber Person : +String emailAddress Person: +purchaseParkingPass() Address \"1\" <-- \"0..1\" Person:lives at class Student{ +int studentNumber +int averageMark +isEligibleToEnrol() +getSeminarsTaken() } class Professor{ +int salary } class Address{ +String street +String city +String state +int postalCode +String country -validate() +outputAsLabel() }","title":"Class diagram"},{"location":"post/2022/004-testing-diagrams/#entity-relationship-diagram","text":"erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses","title":"Entity-relationship diagram"},{"location":"post/2022/004-testing-diagrams/#diagrams-by-mermaid","text":"Here is one mermaid diagram: graph TD A[Client] --> B[Load Balancer] B --> C[Server1] B --> D[Server2] And here is another: graph TD A[Client] -->|tcp_123| B B(Load Balancer) B -->|tcp_456| C[Server1] B -->|tcp_456| D[Server2]","title":"Diagrams by Mermaid"},{"location":"post/2022/004-testing-diagrams/#here-is-a-graph-with-subgraphs","text":"flowchart LR subgraph TOP direction TB subgraph B1 direction RL i1 -->f1 end subgraph B2 direction BT i2 -->f2 end end A --> TOP --> B B1 --> B2","title":"Here is a graph with subgraphs"},{"location":"post/2022/004-testing-diagrams/#another-graph-with-subgraphs","text":"flowchart TB c1-->a2 subgraph one a1-->a2 end subgraph two b1-->b2 end subgraph three c1-->c2 end one --> two three --> two two --> c2","title":"Another graph with subgraphs"},{"location":"post/2022/004-testing-diagrams/#an-algorithm","text":"flowchart TD A[Start] --> B{Is it?} B -- Yes --> C[OK] C --> D[Rethink] D --> B B -- No ----> E[End]","title":"An algorithm"},{"location":"post/2022/004-testing-diagrams/#a-customized-algorithm","text":"flowchart LR A[Hard edge] -->|Link text| B(Round edge) B --> C{Decision} C -->|One| D[Result one] C -->|Two| E[Result two]","title":"A customized algorithm"},{"location":"post/2022/004-testing-diagrams/#fontawesome-support-works","text":"flowchart TD B[\"fab:fa-twitter for peace\"] B-->C[fa:fa-ban forbidden] B-->D(fa:fa-spinner); B-->E(A fa:fa-camera-retro perhaps?)","title":"Fontawesome support works?"},{"location":"post/2022/004-testing-diagrams/#long-requirement-diagram","text":"requirementDiagram requirement test_req { id: 1 text: the test text. risk: high verifymethod: test } functionalRequirement test_req2 { id: 1.1 text: the second test text. risk: low verifymethod: inspection } performanceRequirement test_req3 { id: 1.2 text: the third test text. risk: medium verifymethod: demonstration } interfaceRequirement test_req4 { id: 1.2.1 text: the fourth test text. risk: medium verifymethod: analysis } physicalRequirement test_req5 { id: 1.2.2 text: the fifth test text. risk: medium verifymethod: analysis } designConstraint test_req6 { id: 1.2.3 text: the sixth test text. risk: medium verifymethod: analysis } element test_entity { type: simulation } element test_entity2 { type: word doc docRef: reqs/test_entity } element test_entity3 { type: \"test suite\" docRef: github.com/all_the_tests } test_entity - satisfies -> test_req2 test_req - traces -> test_req2 test_req - contains -> test_req3 test_req3 - contains -> test_req4 test_req4 - derives -> test_req5 test_req5 - refines -> test_req6 test_entity3 - verifies -> test_req5 test_req < - copies - test_entity2","title":"Long requirement diagram"},{"location":"post/2022/004-testing-diagrams/#pie-chart","text":"pie showData title Key elements in Product X \"Calcium\" : 42.96 \"Potassium\" : 50.05 \"Magnesium\" : 10.01 \"Iron\" : 5","title":"Pie chart"},{"location":"post/2022/004-testing-diagrams/#c4-diagram","text":"C4Dynamic title Dynamic diagram for Internet Banking System - API Application ContainerDb(c4, \"Database\", \"Relational Database Schema\", \"Stores user registration information, hashed authentication credentials, access logs, etc.\") Container(c1, \"Single-Page Application\", \"JavaScript and Angular\", \"Provides all of the Internet banking functionality to customers via their web browser.\") Container_Boundary(b, \"API Application\") { Component(c3, \"Security Component\", \"Spring Bean\", \"Provides functionality Related to signing in, changing passwords, etc.\") Component(c2, \"Sign In Controller\", \"Spring MVC Rest Controller\", \"Allows users to sign in to the Internet Banking System.\") } Rel(c1, c2, \"Submits credentials to\", \"JSON/HTTPS\") Rel(c2, c3, \"Calls isAuthenticated() on\") Rel(c3, c4, \"select * from users where username = ?\", \"JDBC\") UpdateRelStyle(c1, c2, $textColor=\"red\", $offsetY=\"-40\") UpdateRelStyle(c2, c3, $textColor=\"red\", $offsetX=\"-40\", $offsetY=\"60\") UpdateRelStyle(c3, c4, $textColor=\"red\", $offsetY=\"-40\", $offsetX=\"10\")","title":"C4 diagram"},{"location":"post/2022/004-testing-diagrams/#git-graph","text":"gitGraph commit id: \"1\" commit id: \"2\" branch nice_feature checkout nice_feature commit id: \"3\" checkout main commit id: \"4\" checkout nice_feature branch very_nice_feature checkout very_nice_feature commit id: \"5\" checkout main commit id: \"6\" checkout nice_feature commit id: \"7\" checkout main merge nice_feature id: \"customID\" tag: \"customTag\" type: REVERSE checkout very_nice_feature commit id: \"8\" checkout main commit id: \"9\"","title":"Git graph"},{"location":"post/2022/004-testing-diagrams/#gantt-diagram","text":"gantt apple :a, 2017-07-20, 1w banana :crit, b, 2017-07-23, 1d cherry :active, c, after b a, 1d","title":"Gantt diagram"},{"location":"post/2022/004-testing-diagrams/#user-journey-diagram","text":"journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 5: Me","title":"User journey diagram"},{"location":"post/2022/004-testing-diagrams/#custom-theme","text":"%%{init: {'theme': 'base', 'themeVariables': { 'primaryColor': '#ffcccc', 'edgeLabelBackground':'#ffffee', 'tertiaryColor': '#fff0f0'}}}%% graph TD A[Christmas] -->|Get money| B(Go shopping) B --> C{Let me think} B --> G[/Another/] C ==>|One| D[Laptop] C -->|Two| E[iPhone] C -->|Three| F[fa:fa-car Car] subgraph section C D E F G end","title":"Custom theme"},{"location":"post/2023/000-mat-dec/","text":"Matrix Decomposition \u00b6 Cholesky \u00b6 LU \u00b6 QR \u00b6 Schur \u00b6 Spectral \u00b6 SVD \u00b6 A list of benefits is available at: https://ieeexplore.ieee.org/document/814658 Applications \u00b6 SVD and large scale optimization: https://epubs.siam.org/doi/10.1137/17M1117732 Faster SVD via Polar Decomposition: https://nhigham.com/2015/11/24/faster-svd-via-polar-decomposition/ Nearest symmetric matrix: https://www.ams.org/journals/proc/1955-006-01/S0002-9939-1955-0067841-7/","title":"Matrix Decomposition"},{"location":"post/2023/000-mat-dec/#matrix-decomposition","text":"","title":"Matrix Decomposition"},{"location":"post/2023/000-mat-dec/#cholesky","text":"","title":"Cholesky"},{"location":"post/2023/000-mat-dec/#lu","text":"","title":"LU"},{"location":"post/2023/000-mat-dec/#qr","text":"","title":"QR"},{"location":"post/2023/000-mat-dec/#schur","text":"","title":"Schur"},{"location":"post/2023/000-mat-dec/#spectral","text":"","title":"Spectral"},{"location":"post/2023/000-mat-dec/#svd","text":"A list of benefits is available at: https://ieeexplore.ieee.org/document/814658","title":"SVD"},{"location":"post/2023/000-mat-dec/#applications","text":"SVD and large scale optimization: https://epubs.siam.org/doi/10.1137/17M1117732 Faster SVD via Polar Decomposition: https://nhigham.com/2015/11/24/faster-svd-via-polar-decomposition/ Nearest symmetric matrix: https://www.ams.org/journals/proc/1955-006-01/S0002-9939-1955-0067841-7/","title":"Applications"},{"location":"publication/","text":"Publications \u00b6","title":"Publications"},{"location":"publication/#publications","text":"","title":"Publications"},{"location":"publication/journalConferencePreprint/","text":"Journals & Conferences \u00b6 Google Scholar: user=GPu9jbIAAAAJ ResearchGate: profile/Israel-Assis ORCiD: 0000-0002-8766-1041 Scopus: authorId=57215007400 Web of Science: ResearcherID=AAP-3431-2020 arXiv: i-assis","title":"Journals & Conferences"},{"location":"publication/journalConferencePreprint/#journals-conferences","text":"Google Scholar: user=GPu9jbIAAAAJ ResearchGate: profile/Israel-Assis ORCiD: 0000-0002-8766-1041 Scopus: authorId=57215007400 Web of Science: ResearcherID=AAP-3431-2020 arXiv: i-assis","title":"Journals &amp; Conferences"},{"location":"publication/talks/","text":"Talks \u00b6","title":"Talks"},{"location":"publication/talks/#talks","text":"","title":"Talks"},{"location":"publication/open/c/","text":"\ud835\udc02/\ud835\udc02++ \u00b6","title":"\ud835\udc02/\ud835\udc02++"},{"location":"publication/open/c/#cc","text":"","title":"\ud835\udc02/\ud835\udc02++"},{"location":"publication/open/mathematica/","text":"\ud835\udc16 Mathematica \u00b6","title":"\ud835\udc16 Mathematica"},{"location":"publication/open/mathematica/#w-mathematica","text":"","title":"\ud835\udc16 Mathematica"},{"location":"publication/open/matlab/","text":"\ud835\udc0c Matlab \u00b6","title":"\ud835\udc0c Matlab"},{"location":"publication/open/matlab/#m-matlab","text":"","title":"\ud835\udc0c Matlab"},{"location":"publication/open/node/","text":"\u260a NodeJS \u00b6","title":"\u260a NodeJS"},{"location":"publication/open/node/#nodejs","text":"","title":"\u260a NodeJS"},{"location":"publication/open/python/","text":"\ud83d\udc0d Python \u00b6","title":"\ud83d\udc0d Python"},{"location":"publication/open/python/#python","text":"","title":"\ud83d\udc0d Python"},{"location":"publication/open/ruby/","text":"\u27e1 Ruby on Rails \u00b6","title":"\u27e1 Ruby on Rails"},{"location":"publication/open/ruby/#ruby-on-rails","text":"","title":"\u27e1 Ruby on Rails"},{"location":"publication/open/solidity/","text":"\u223e Solidity \u00b6","title":"\u223e Solidity"},{"location":"publication/open/solidity/#solidity","text":"","title":"\u223e Solidity"}]}