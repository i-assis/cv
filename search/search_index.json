{"config": {"lang": ["en"], "separator": "[\\s\\-\\.]", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "", "title": "Welcome!", "text": "<p>I\u2019m dedicated to dynamic systems and learning theory. Content is organized across the following sections. </p>"}, {"location": "#posts", "title": "Posts", "text": "<p>Snippets of math and computer science.</p>"}, {"location": "#publications", "title": "Publications", "text": "<p>Links to my journal and conference papers. Slides of invited talks. Useful (possibly..) code posted to GitHub/GitLab.</p>"}, {"location": "#cv", "title": "CV", "text": ""}, {"location": "#course-notes", "title": "Course Notes", "text": "<p>Compiled for practical reference.</p>"}, {"location": "#devkb", "title": "DevKB", "text": "<p>Data structures, algorithms, ICPC-style problems and system design. ML, backend and DevOps engineering.</p>"}, {"location": "#awesome-people", "title": "Awesome People", "text": "<p>Some people doing amazing work in dynamic systems and learning theory.</p>"}, {"location": "cv/", "title": "CV", "text": ""}, {"location": "cv/education/", "title": "Education", "text": ""}, {"location": "cv/education/#university", "title": "University", "text": ""}, {"location": "cv/education/#msc-in-mechanical-engineering", "title": "M.Sc. in Mechanical Engineering", "text": "<p>University of Campinas - Campinas, Brazil (2016 - 2018)</p> <p>co-advised by I. Santos from TU Denmark - Lyngby, Denmark (2016 - 2018)</p>"}, {"location": "cv/education/#5-year-bsc-in-mechanical-engineering", "title": "5-year B.Sc. in Mechanical Engineering", "text": "<p>Federal University of Para\u00edba - Jo\u00e3o Pessoa, Brazil (2010 - 2015)</p> <p>Budapest University of Technology - Budapest, Hungary (2013 - 2014)</p>"}, {"location": "cv/educationExtra/", "title": "Education: Extra", "text": ""}, {"location": "cv/experienceDev/", "title": "Dev &amp; Data", "text": "<p>Email  / Website  / LinkedIn  / GitHub / GitLab  / dev.to</p>"}, {"location": "cv/experienceDev/#consultant-metaoriginal", "title": "Consultant @ MetaOriginal", "text": "<p>Startup that produces digital twins of real state assets.</p> <p>(Jul 2022 - Aug 2022)</p> <ul> <li>Mediated between MetaOriginal and companies   such as PureWeb, nVidia Omniverse, etc.</li> <li>Tested/documented a prototype Unreal Engine real-time streaming system.</li> <li>Tech stack: PixelStreaming, Unreal Engine 4.25/4.27/5, GCloud, AWS, Azure</li> </ul>"}, {"location": "cv/experienceDev/#ruby-on-rails-jr-dev-original3d", "title": "Ruby on Rails Jr. Dev @ Original3D", "text": "<p>Startup that produces digital twins of real state assets.</p> <p>(Sep 2021 - Jan 2022)</p> <ul> <li>Wrote all accounting/finance-related front/backend code.  </li> <li>Wrote hundreds of pages of software documentation.</li> <li>Implemented testing suites related to business rules and user experience.</li> <li>Tech stack: Ruby-on-Rails, React, Rails ORM, Cucumber, RSpec, Capybara</li> </ul>"}, {"location": "cv/experienceDev/#threejs-dev-original3d", "title": "ThreeJS Dev @ Original3D", "text": "<p>Startup that produces digital twins of real state assets.</p> <p>(Jul 2021 - Aug 2021)</p> <ul> <li>Coded several ThreeJS MVPs.</li> <li>Managed to import some 3D models into DOM using ThreeJS.</li> <li>Tech stack: NodeJS, ThreeJS, TypeScript </li> </ul>"}, {"location": "cv/experienceDev/#backend-jr-dev-oxfield", "title": "Backend Jr. Dev @ Oxfield", "text": "<p>Consulting firm specialized in corporate IT solutions.</p> <p>(Apr 2021 - Jun 2021)</p> <ul> <li>Devised backend architechture: class diagrams, data models.  </li> <li>Backend implementation. Check this NodeJS/SQL login system.</li> <li>Tech stack: NodeJS, Jest, SQL, ExpressJS, Typescript, Docker</li> </ul>"}, {"location": "cv/experienceEngineering/", "title": "Engineering", "text": ""}, {"location": "cv/experienceEngineering/#freelance-engineer", "title": "Freelance Engineer", "text": "<p>(Jan 2017 - Apr 2022)</p> <ul> <li>Designed a metallic structure to support the roof of a 510m\u00b2 hangar.</li> <li>Licensed by CREA, the Brazilian engineering council.</li> </ul>"}, {"location": "cv/experienceEngineering/#ad-hoc-analyst-fe-structural-foundations", "title": "Ad-hoc Analyst @ FE Structural Foundations", "text": "<p>(Jan 2021 - permanent)</p> <ul> <li>Reviewed maintenance operations of soil-drilling machines. </li> </ul>"}, {"location": "cv/experienceEngineering/#project-director-aerojampa", "title": "Project Director @ AEROJAMPA", "text": "<p>(Feb 2010 - Jul 2016)     - Led a team of ~10 engineering undergrads.</p> <ul> <li> <p>Contributed to aircraft design projects on:</p> <ul> <li>aerodynamics</li> <li>structural design</li> <li>performance</li> <li>flight stability and control</li> <li>multidisciplinary optimization</li> </ul> </li> <li> <p>Built and presented design reports at the   SAE Brasil Aerodesign International Competition,   on the grounds of ITA/Embraer.   As a team, we got 3rd best structural design at the 2012 competition.</p> </li> <li> <p>Funded by private sponsors, PRG-UFPB   and CNPq.</p> </li> </ul>"}, {"location": "cv/experienceEngineering/#intern-recogas", "title": "Intern @ RECOGAS", "text": "<p>RECOGAS, i.e., Brazil North/Northeast Natural Gas Research (RECOGAS), is a many-institution initiative dedicated to thermal energy systems.</p> <p>(Jan 2017 - Apr 2022)</p> <ul> <li>Re-designed a diaphragm pump for usage in refrigeration machinery running a    H2O/NH3-based cogeneration cycle.</li> <li>Solved several problems in fluid flow/heat transfer using   generalized integral transforms.</li> <li>Funded by CNPq.</li> </ul>"}, {"location": "cv/experienceTeachingResearch/", "title": "Teaching &amp; Research", "text": ""}, {"location": "cv/experienceTeachingResearch/#researcher-unicamp-dept-of-integrated-systems", "title": "Researcher @ Unicamp, Dept. of Integrated Systems", "text": "<p>(Aug 2016 - Mar 2023 expected)</p> <ul> <li>Reviewed papers published/refereed at the Lab of System Identification &amp; Control.</li> <li>Wrote a paper and a dissertation on control of periodic systems.</li> </ul>"}, {"location": "cv/experienceTeachingResearch/#mechatronics-teacher-esatec", "title": "Mechatronics Teacher @ ESATEC", "text": "<p>(Jan 2020 - Dec 2020)</p> <ul> <li> <p>In- and extra-class service to ~100 students.</p> </li> <li> <p>Taught:</p> <ul> <li>CNC Programming</li> <li>Metrology</li> <li>Technical Drawing</li> <li>Manufacturing Technology</li> <li>Production Management</li> <li>Hydraulics and Pneumatics</li> </ul> </li> </ul>"}, {"location": "cv/experienceTeachingResearch/#mathphysics-teacher-mackenzie", "title": "Math/Physics Teacher @ MacKenzie", "text": "<p>(Jan 2020 - Jul 2021)</p> <ul> <li>In- and extra-class service to ~50 students.</li> </ul>"}, {"location": "cv/experienceTeachingResearch/#researcher-unicamp-dept-of-computational-mechanics", "title": "Researcher @ Unicamp, Dept. of Computational Mechanics", "text": "<p>(Apr 2019 - Dec 2019)</p> <ul> <li>Wrote, with A. Alc\u00e2ntara,   a research proposal rated ``excelent\u2019\u2019 by FAPESP.</li> <li>Secured ~R$ 130000 in competitive research funding.</li> <li>Published a paper.</li> <li>A spin-off of this work went on to be developed at LAMMS-MIT.</li> </ul>"}, {"location": "cv/experienceTeachingResearch/#teaching-assistant-unicamp-mech-engineering", "title": "Teaching Assistant @ Unicamp Mech. Engineering", "text": "<p>(Aug 2016 - Dez 2016)</p> <ul> <li> <p>ES601: Linear System Analysis with J. Camino:  </p> <ul> <li>Graded assignments and tests of ~70 undergrads.</li> <li>Some lecturing/tutoring.</li> <li>Reviewer/writer of class material.</li> </ul> </li> <li> <p>EM707: Control of Mechanical Systems with A. Serpa.</p> <ul> <li>Invited Feb 2017.</li> </ul> </li> </ul>"}, {"location": "cv/experienceTeachingResearch/#teaching-assistant-ufpb-energy-engineering", "title": "Teaching Assistant @ UFPB Energy Engineering", "text": "<p>(Sep 2014 - Jun 2016)</p> <ul> <li> <p>Subject 1701179: Fluid Mechanics II with G. Moreira.</p> <ul> <li>Some tutoring.</li> <li>Reviewer/writer of class material.</li> </ul> </li> <li> <p>Passed selection with a 10/10 (only case).</p> </li> </ul>"}, {"location": "cv/experienceTeachingResearch/#freelance-teacher", "title": "Freelance Teacher", "text": "<p>(Aug 2016 - permanent)</p> <ul> <li> <p>Taught:</p> <ul> <li>TOEFL Prep, students did great </li> <li>Mechanical Vibrations</li> <li>Linear Analysis / Control / Signal Processing</li> <li>Machine Kinematics / Dynamics</li> <li>Calculus / Physics</li> <li>Thermodynamics / Heat Transfer</li> </ul> </li> <li> <p>Taught from undergrads to college lecturers.</p> </li> </ul>"}, {"location": "cv/experienceTeachingResearch/#researcher-budapest-tech", "title": "Researcher @ Budapest Tech", "text": "<p>(Jan 2014 - Aug 2014)</p> <ul> <li>Coded simulations of highly nonlinear, hysteretical   friction force models with J. T\u00f3th   and R. Csikja.</li> </ul>"}, {"location": "cv/language/", "title": "Languages", "text": "<p>\ud83c\uddfa\ud83c\uddf8 English: Fluent/native.  \ud83c\udde7\ud83c\uddf7 Portuguese: Fluent/native.  \ud83c\uddea\ud83c\uddf8 Spanish: Good reading, simple speech.  \ud83c\uddeb\ud83c\uddf7 French: Technical reading.  \ud83c\uddf7\ud83c\uddfa Russian: Simple reading.  \ud83c\udde9\ud83c\uddea German: On the way.  \ud83c\uddee\ud83c\uddf1 Hebrew: On the way.</p>"}, {"location": "cv/professionalEvents/", "title": "Professional Events", "text": ""}, {"location": "cv/result/", "title": "Results", "text": ""}, {"location": "cv/result/#research-proposal-rated-excellent-the-sao-paulo-research-foundation", "title": "Research Proposal Rated Excellent @ The S\u00e3o Paulo Research Foundation", "text": "<p>(2019)</p> <p>Secured ~R$ 130000 from the most competitive research funding agency in Brazil.</p> <p>The proposal is top-notch, very well-crafted (\u2026) work in multilevel analysis via the boundary element method on bone images for the detection of osteoporosis, is original, relevant and can bring relevant contributions to bioengineering and medicine.  - FAPESP Comission</p>"}, {"location": "cv/result/#msc-full-scholarship-mech-engineeringunicamp", "title": "M.Sc. Full Scholarship @ Mech. Engineering/Unicamp", "text": "<p>(Aug 2016 - July 2018)</p> <p>Got R$ 36000 in funding from CAPES PROEX academic excellence program.</p>"}, {"location": "cv/result/#recommendation-from-the-dean-mech-engineeringbudapest-tech", "title": "Recommendation from the Dean @ Mech. Engineering/Budapest Tech", "text": "<p>(2014)</p>"}, {"location": "cv/result/#bsc-scholarship-capes", "title": "B.Sc. Scholarship @ CAPES", "text": "<p>(2013)</p> <p>Got 22.000,00 \u20ac in funding from CAPES SwB program to study and do research at Mech. Engineering/Budapest Tech.</p>"}, {"location": "cv/result/#top-1-score-worldwide-toefl-ibt", "title": "Top 1% Score Worldwide @ TOEFL iBT", "text": "<p>(2013)</p>"}, {"location": "cv/result/#3rd-best-structural-design-sae-brasil-aerodesign-international-competition", "title": "3rd Best Structural Design @ SAE Brasil Aerodesign International Competition", "text": "<p>(2012)</p> <p>Achieved as member of the Aerojampa team.</p>"}, {"location": "cv/result/#1st-place-intergeo-olympiad-mathphysics-olympiad-finalist-top-gpa", "title": "1st Place InterGEO Olympiad, Math/Physics Olympiad Finalist, Top GPA, \u2026", "text": "<p>(2006, 2007, 2008)</p> <p>Some small results in mid/high-school.</p>"}, {"location": "cv/volunteer/", "title": "Volunteering", "text": ""}, {"location": "cv/volunteer/#teacher-campinas-public-schools", "title": "Teacher @ Campinas Public Schools", "text": "<p>(2019) </p> <p>Invited workshops at EJA, a GED-style program for adults in Campinas, S\u00e3o Paulo, Brazil. </p> <ul> <li>Check a sample lecture on cordel, a kind of poetry from northeastern Brazil. </li> </ul>"}, {"location": "cv/volunteer/#grader-brazilian-robotics-olympiad", "title": "Grader @ Brazilian Robotics Olympiad", "text": "<p>(2016) </p> <p>The event comprises the IEEE Latin America/Brazil Robotics Competition_ and the Latin American/Brazil RoboCup Open. Worked with a team of ~10 arbitrers at the regional rounds. </p>"}, {"location": "kb/", "title": "DevKB", "text": "<p>Software development knowledge base.</p>"}, {"location": "kb/algo/", "title": "\ud83c\udfed Algorithm", "text": ""}, {"location": "kb/algo/bitwise/programming/", "title": "Bitwise Programming", "text": ""}, {"location": "kb/algo/complexity/class/", "title": "Class", "text": ""}, {"location": "kb/algo/complexity/decisionProblem/", "title": "Decision: Problem", "text": ""}, {"location": "kb/algo/complexity/decisionProcedure/", "title": "Decision: Procedure", "text": ""}, {"location": "kb/algo/complexity/reduction/", "title": "Reduction", "text": ""}, {"location": "kb/algo/complexity/timePolynomialExponential/", "title": "Polynomial vs. Exponential", "text": ""}, {"location": "kb/algo/complexity/type/", "title": "Type", "text": ""}, {"location": "kb/algo/design/classification/", "title": "Classification", "text": ""}, {"location": "kb/algo/design/classificationDesignMethod/", "title": "Class: by Design Method", "text": ""}, {"location": "kb/algo/design/classificationImplementation/", "title": "Class: by Implementation", "text": ""}, {"location": "kb/algo/design/classificationOther/", "title": "Classification: Other", "text": ""}, {"location": "kb/algo/divideConquer/alwaysWork/", "title": "Always works?", "text": ""}, {"location": "kb/algo/divideConquer/cons/", "title": "Cons", "text": ""}, {"location": "kb/algo/divideConquer/pros/", "title": "Pros", "text": ""}, {"location": "kb/algo/divideConquer/strategy/", "title": "Strategy", "text": ""}, {"location": "kb/algo/divideConquer/theorem/", "title": "Theorem", "text": ""}, {"location": "kb/algo/dynamic/approach/", "title": "Approach", "text": ""}, {"location": "kb/algo/dynamic/greedyVsDivConqVsDp/", "title": "vs. Greedy vs. Divide &amp; Conquer", "text": ""}, {"location": "kb/algo/dynamic/implement/", "title": "Implement", "text": ""}, {"location": "kb/algo/dynamic/longestCommonSubsequence/", "title": "Longest Common Subsequence", "text": ""}, {"location": "kb/algo/dynamic/property/", "title": "Property", "text": ""}, {"location": "kb/algo/greedy/alwaysWork/", "title": "Always works?", "text": ""}, {"location": "kb/algo/greedy/cons/", "title": "Cons", "text": ""}, {"location": "kb/algo/greedy/implement/", "title": "Implement", "text": ""}, {"location": "kb/algo/greedy/pros/", "title": "Pros", "text": ""}, {"location": "kb/algo/greedy/strategy/", "title": "Strategy", "text": ""}, {"location": "kb/algo/hash/bloomFilter/", "title": "Bloom Filter", "text": ""}, {"location": "kb/algo/hash/code/", "title": "Code", "text": ""}, {"location": "kb/algo/hash/collisionOpenAddressing/", "title": "Collision: Open Addressing", "text": "<p>Solve collision with open addressing.</p>"}, {"location": "kb/algo/hash/collisionSeparateChaining/", "title": "Collision: Separate Chaining", "text": "<p>Solve collision with separate chaining.</p>"}, {"location": "kb/algo/hash/component/", "title": "Component", "text": ""}, {"location": "kb/algo/hash/cons/", "title": "When not Use", "text": ""}, {"location": "kb/algo/hash/dataStructMap/", "title": "Map with Hash", "text": ""}, {"location": "kb/algo/hash/dataStructSet/", "title": "Set with Hash", "text": ""}, {"location": "kb/algo/hash/howO%281%29/", "title": "Achieving O(1)", "text": ""}, {"location": "kb/algo/hash/loadFactor/", "title": "Load Factor", "text": ""}, {"location": "kb/algo/hash/rehash/", "title": "Rehash", "text": ""}, {"location": "kb/algo/hash/table/", "title": "Table", "text": ""}, {"location": "kb/algo/hash/table/#adt", "title": "ADT", "text": ""}, {"location": "kb/algo/hash/technique/", "title": "Technique", "text": ""}, {"location": "kb/algo/hash/vsDirectAddress/", "title": "vs. Direct Address", "text": ""}, {"location": "kb/algo/recursion/case/directorySize/", "title": "Directory Size", "text": ""}, {"location": "kb/algo/recursion/case/sumOfFirstN/", "title": "1 + 2 + \u2026 + n", "text": ""}, {"location": "kb/algo/recursion/case/towerOfHanoi/", "title": "Tower of Hanoi", "text": ""}, {"location": "kb/algo/recursion/case/twoToTheN/", "title": "2^n", "text": ""}, {"location": "kb/algo/recursion/case/xToTheN/", "title": "x^n", "text": ""}, {"location": "kb/algo/search/binary/", "title": "Binary", "text": ""}, {"location": "kb/algo/search/binary/#implement", "title": "Implement", "text": ""}, {"location": "kb/algo/search/binary/#implement-recursive", "title": "Implement Recursive", "text": ""}, {"location": "kb/algo/search/binary/#complexity", "title": "Complexity", "text": ""}, {"location": "kb/algo/search/binary/#time", "title": "Time", "text": ""}, {"location": "kb/algo/search/binary/#space", "title": "Space", "text": ""}, {"location": "kb/algo/search/binary/#drawback", "title": "Drawback", "text": ""}, {"location": "kb/algo/search/hash/", "title": "Hash", "text": ""}, {"location": "kb/algo/search/interpolation/", "title": "Interpolation", "text": ""}, {"location": "kb/algo/search/interpolation/#implement", "title": "Implement", "text": ""}, {"location": "kb/algo/search/interpolation/#complexity", "title": "Complexity", "text": ""}, {"location": "kb/algo/search/interpolation/#time", "title": "Time", "text": ""}, {"location": "kb/algo/search/interpolation/#space", "title": "Space", "text": ""}, {"location": "kb/algo/search/linearOrderedSorted/", "title": "Linear: Ordered/Sorted", "text": ""}, {"location": "kb/algo/search/linearOrderedSorted/#implement", "title": "Implement", "text": ""}, {"location": "kb/algo/search/linearOrderedSorted/#drawback", "title": "Drawback", "text": ""}, {"location": "kb/algo/search/linearOrderedSorted/#sear", "title": "Sear", "text": ""}, {"location": "kb/algo/search/linearSequential/", "title": "Linear: Sequential", "text": ""}, {"location": "kb/algo/search/linearUnordered/", "title": "Linear: Unordered", "text": ""}, {"location": "kb/algo/search/string/", "title": "String", "text": ""}, {"location": "kb/algo/search/symbolTable/", "title": "Symbol Table", "text": ""}, {"location": "kb/algo/select/kSmallest/", "title": "k-Smallest Element", "text": "<p>k-Smallest Element in Sorted Order</p>"}, {"location": "kb/algo/select/linear/", "title": "Linear", "text": "<p>Also called median of medians.</p>"}, {"location": "kb/algo/select/partition/", "title": "Partition", "text": ""}, {"location": "kb/algo/select/sort/", "title": "Sort", "text": ""}, {"location": "kb/algo/sort/bubble/", "title": "Bubble", "text": ""}, {"location": "kb/algo/sort/bucketBin/", "title": "Bucket/Bin", "text": ""}, {"location": "kb/algo/sort/classification/", "title": "Classification", "text": ""}, {"location": "kb/algo/sort/comparison/", "title": "Comparison", "text": ""}, {"location": "kb/algo/sort/counting/", "title": "Counting", "text": ""}, {"location": "kb/algo/sort/external/", "title": "External", "text": ""}, {"location": "kb/algo/sort/heap/", "title": "Heap", "text": ""}, {"location": "kb/algo/sort/insertion/", "title": "Insertion", "text": ""}, {"location": "kb/algo/sort/linear/", "title": "Linear", "text": ""}, {"location": "kb/algo/sort/merge/", "title": "Merge", "text": ""}, {"location": "kb/algo/sort/quick/", "title": "Quick", "text": ""}, {"location": "kb/algo/sort/radix/", "title": "Radix", "text": ""}, {"location": "kb/algo/sort/selection/", "title": "Selection", "text": ""}, {"location": "kb/algo/sort/selectionRecursive/", "title": "Selection: Recursive", "text": ""}, {"location": "kb/algo/sort/shell/", "title": "Shell", "text": ""}, {"location": "kb/algo/sort/topological/", "title": "Topological", "text": ""}, {"location": "kb/algo/sort/tree/", "title": "Tree", "text": ""}, {"location": "kb/algo/string/boyerMoore/", "title": "Boyer-Moore", "text": ""}, {"location": "kb/algo/string/bruteForce/", "title": "Brute Force", "text": ""}, {"location": "kb/algo/string/kmp/", "title": "KMP", "text": ""}, {"location": "kb/algo/string/matching/", "title": "Matching", "text": ""}, {"location": "kb/algo/string/matchingAutomata/", "title": "Matching: Finite Automata", "text": ""}, {"location": "kb/algo/string/matchingRabinKarp/", "title": "Matching: Rabin-Karp", "text": ""}, {"location": "kb/algo/symbol/table/", "title": "Table", "text": ""}, {"location": "kb/algo/symbol/tableComparison/", "title": "Table: Comparison", "text": ""}, {"location": "kb/algo/symbol/tableImplementation/", "title": "Table: Implementation", "text": ""}, {"location": "kb/design/case/airBnB/", "title": "Air BnB", "text": ""}, {"location": "kb/design/case/algoExpert/", "title": "Algo Expert", "text": ""}, {"location": "kb/design/case/codeDeploymentSystem/", "title": "Code Deployment System", "text": ""}, {"location": "kb/design/case/fbNewsFeed/", "title": "FB News Feed", "text": ""}, {"location": "kb/design/case/googleDrive/", "title": "Google Drive", "text": ""}, {"location": "kb/design/case/netflix/", "title": "Netflix", "text": ""}, {"location": "kb/design/case/redditAPI/", "title": "Reddit API", "text": ""}, {"location": "kb/design/case/slack/", "title": "Slack", "text": ""}, {"location": "kb/design/case/stockBroker/", "title": "Stock Broker", "text": ""}, {"location": "kb/design/case/uberAPI/", "title": "Uber API", "text": ""}, {"location": "kb/design/designPatternCloud/cacheAside/", "title": "Cache-Aside", "text": ""}, {"location": "kb/design/designPatternCloud/circuitBreaker/", "title": "Circuit Breaker", "text": ""}, {"location": "kb/design/designPatternCloud/commandQuery/", "title": "Command &amp; Query Responsability Segregation", "text": ""}, {"location": "kb/design/designPatternCloud/compensatingTransaction/", "title": "Compesating Transaction", "text": ""}, {"location": "kb/design/designPatternCloud/competingConsumer/", "title": "Competing Consumer", "text": ""}, {"location": "kb/design/designPatternCloud/computeResourceConsolidation/", "title": "Compute Resource Consolidation", "text": ""}, {"location": "kb/design/designPatternCloud/endpointMonitoring/", "title": "Endpoint Monitoring", "text": ""}, {"location": "kb/design/designPatternCloud/endpointMonitoring/#health", "title": "Health", "text": ""}, {"location": "kb/design/designPatternCloud/eventSourcing/", "title": "Event Sourcing", "text": ""}, {"location": "kb/design/designPatternCloud/externalConfigurationStore/", "title": "External Configuration Store", "text": ""}, {"location": "kb/design/designPatternCloud/federatedIdentity/", "title": "Federated Identity", "text": ""}, {"location": "kb/design/designPatternCloud/gatekeeper/", "title": "Gatekeeper", "text": ""}, {"location": "kb/design/designPatternCloud/indexTable/", "title": "Index Table", "text": ""}, {"location": "kb/design/designPatternCloud/leaderElection/", "title": "Leader Election", "text": ""}, {"location": "kb/design/designPatternCloud/materializedView/", "title": "Materialized View", "text": ""}, {"location": "kb/design/designPatternCloud/pipeFilter/", "title": "Pipe Filter", "text": ""}, {"location": "kb/design/designPatternCloud/priorityQueue/", "title": "Priority Queue", "text": ""}, {"location": "kb/design/designPatternCloud/publisher/", "title": "Publisher", "text": ""}, {"location": "kb/design/designPatternCloud/queueBasedLoadLeveling/", "title": "Queue-Based Load Leveling", "text": ""}, {"location": "kb/design/designPatternCloud/retry/", "title": "Retry", "text": ""}, {"location": "kb/design/designPatternCloud/runtimeReconfiguration/", "title": "Runtime Reconfiguration", "text": ""}, {"location": "kb/design/designPatternCloud/schedulerAgentSupervisor/", "title": "Scheduler Agent Supervisor", "text": ""}, {"location": "kb/design/designPatternCloud/sharding/", "title": "Sharding", "text": ""}, {"location": "kb/design/designPatternCloud/staticContentHosting/", "title": "Static Content Hosting", "text": ""}, {"location": "kb/design/designPatternCloud/subscriber/", "title": "Subscriber", "text": ""}, {"location": "kb/design/designPatternCloud/throttling/", "title": "Throttling", "text": ""}, {"location": "kb/design/designPatternCloud/valetKey/", "title": "Valet Key", "text": ""}, {"location": "kb/design/distributedSystem/asyncMessaging/", "title": "Asynchronous Messaging", "text": ""}, {"location": "kb/design/distributedSystem/autoscaling/", "title": "Autoscaling", "text": ""}, {"location": "kb/design/distributedSystem/caching/", "title": "Caching", "text": ""}, {"location": "kb/design/distributedSystem/computePartitioning/", "title": "Compute Partitioning", "text": ""}, {"location": "kb/design/distributedSystem/dataConsistency/", "title": "Data: Consistency", "text": ""}, {"location": "kb/design/distributedSystem/dataPartitioning/", "title": "Data: Partitioning", "text": ""}, {"location": "kb/design/distributedSystem/dataReplication/", "title": "Data: Replication", "text": ""}, {"location": "kb/design/distributedSystem/instrumentation/", "title": "Instrumentation", "text": ""}, {"location": "kb/design/distributedSystem/multiDatacenterDeploy/", "title": "Multiple Data Center Deployment", "text": ""}, {"location": "kb/design/distributedSystem/serviceMeter/", "title": "Service Metering", "text": ""}, {"location": "kb/design/distributedSystem/telemetry/", "title": "Telemetry", "text": ""}, {"location": "kb/design/intro/apiDesign/", "title": "API Design", "text": ""}, {"location": "kb/design/intro/availability/", "title": "Availability", "text": ""}, {"location": "kb/design/intro/caching/", "title": "Caching", "text": ""}, {"location": "kb/design/intro/clientServer/", "title": "Client-Server", "text": ""}, {"location": "kb/design/intro/config/", "title": "Configuration", "text": ""}, {"location": "kb/design/intro/databaseRelational/", "title": "Database: Relational", "text": ""}, {"location": "kb/design/intro/fundamentals/", "title": "Fundamentals", "text": ""}, {"location": "kb/design/intro/hashing/", "title": "Hashing", "text": ""}, {"location": "kb/design/intro/https/", "title": "HTTPS", "text": ""}, {"location": "kb/design/intro/latencyThroughput/", "title": "Latency and Throughput", "text": ""}, {"location": "kb/design/intro/loadBalancer/", "title": "Load Balancer", "text": ""}, {"location": "kb/design/intro/logMonitor/", "title": "Logging &amp; Monitoring", "text": ""}, {"location": "kb/design/intro/mapReduce/", "title": "MapReduce", "text": ""}, {"location": "kb/design/intro/networkProtocol/", "title": "Network Protocols", "text": ""}, {"location": "kb/design/intro/p2p/", "title": "P2P Network", "text": ""}, {"location": "kb/design/intro/polling/", "title": "Polling", "text": ""}, {"location": "kb/design/intro/proxy/", "title": "Proxy", "text": ""}, {"location": "kb/design/intro/rateLimit/", "title": "Rate Limiting", "text": ""}, {"location": "kb/design/intro/replication/", "title": "Replication", "text": ""}, {"location": "kb/design/intro/storage/", "title": "Storage", "text": ""}, {"location": "kb/design/intro/storeKeyValue/", "title": "Store: Key-Value", "text": ""}, {"location": "kb/design/intro/storeParadigm/", "title": "Store: Paradigm", "text": ""}, {"location": "kb/design/intro/stream/", "title": "Stream", "text": ""}, {"location": "kb/ds/", "title": "\ud83c\udf09 Data Structure", "text": ""}, {"location": "kb/ds/file/organization/", "title": "Organization", "text": ""}, {"location": "kb/ds/file/organization/sequenceIndex/", "title": "Sequence Index", "text": ""}, {"location": "kb/ds/graph/app/connectedCircles/", "title": "Connected Circles", "text": ""}, {"location": "kb/ds/graph/app/nineTails/", "title": "Nine Tails", "text": ""}, {"location": "kb/ds/graph/modelling/", "title": "Modelling", "text": ""}, {"location": "kb/ds/graph/representation/adjacencyList/", "title": "Adjacency: List", "text": ""}, {"location": "kb/ds/graph/representation/adjacencyMatrix/", "title": "Adjacency: Matrix", "text": ""}, {"location": "kb/ds/graph/sort/topological/", "title": "Topological", "text": ""}, {"location": "kb/ds/graph/traversal/bfs/", "title": "Breadth-First Traversal (BFS)", "text": ""}, {"location": "kb/ds/graph/traversal/dfs/", "title": "Depth-First Traversal (DFS)", "text": ""}, {"location": "kb/ds/graph/visualization/", "title": "Visualization", "text": ""}, {"location": "kb/ds/graph/weighted/modelling/", "title": "Modelling", "text": ""}, {"location": "kb/ds/graph/weighted/representation/", "title": "Representation", "text": ""}, {"location": "kb/ds/graph/weighted/shortestPath/", "title": "Shortest Path", "text": ""}, {"location": "kb/ds/graph/weighted/app/weightedNineTails/", "title": "Weighted Nine Tails", "text": ""}, {"location": "kb/ds/graph/weighted/minimalSpanningTree/kruskal/", "title": "Kruskal", "text": ""}, {"location": "kb/ds/graph/weighted/minimalSpanningTree/prim/", "title": "Prim", "text": ""}, {"location": "kb/ds/heap/binary/", "title": "Binary", "text": ""}, {"location": "kb/ds/list/arrayVsLinked/", "title": "Array vs. Linked", "text": ""}, {"location": "kb/ds/list/skip/", "title": "Skip", "text": ""}, {"location": "kb/ds/list/array/dynamic/", "title": "Dynamic", "text": ""}, {"location": "kb/ds/list/array/static/", "title": "Static", "text": ""}, {"location": "kb/ds/list/linked/adt/", "title": "ADT", "text": ""}, {"location": "kb/ds/list/linked/circular/", "title": "Circular", "text": ""}, {"location": "kb/ds/list/linked/doubly/", "title": "Doubly", "text": ""}, {"location": "kb/ds/list/linked/doublyEfficient/", "title": "Doubly: Efficient", "text": ""}, {"location": "kb/ds/list/linked/header/", "title": "Header", "text": ""}, {"location": "kb/ds/list/linked/polynomial/", "title": "Polynomial", "text": ""}, {"location": "kb/ds/list/linked/singly/", "title": "Singly", "text": ""}, {"location": "kb/ds/list/linked/unrolled/", "title": "Unrolled", "text": ""}, {"location": "kb/ds/map/adt/", "title": "ADT", "text": ""}, {"location": "kb/ds/queue/adt/", "title": "ADT", "text": ""}, {"location": "kb/ds/queue/circular/", "title": "Circular", "text": ""}, {"location": "kb/ds/queue/doubleEnded/", "title": "Double-Ended", "text": ""}, {"location": "kb/ds/queue/implementByArray/", "title": "implement: by Array", "text": ""}, {"location": "kb/ds/queue/implementByListLinked/", "title": "Implement: by Linked List", "text": ""}, {"location": "kb/ds/queue/implementByListLinked/#operation-insert", "title": "Operation: Insert", "text": ""}, {"location": "kb/ds/queue/implementByListLinked/#operation-delete", "title": "Operation: Delete", "text": ""}, {"location": "kb/ds/queue/operationDelete/", "title": "operation: Delete", "text": ""}, {"location": "kb/ds/queue/operationInsert/", "title": "operation: Insert", "text": ""}, {"location": "kb/ds/queue/priority/implementByListLinked/", "title": "Implement: by Linked List", "text": ""}, {"location": "kb/ds/queue/priority/implementByListLinked/#operation-insert", "title": "Operation: Insert", "text": ""}, {"location": "kb/ds/queue/priority/implementByListLinked/#operation-delete", "title": "Operation: Delete", "text": ""}, {"location": "kb/ds/set/disjoint/adt/", "title": "ADT", "text": ""}, {"location": "kb/ds/set/disjoint/app/", "title": "Application", "text": ""}, {"location": "kb/ds/set/disjoint/cons/", "title": "Cons", "text": ""}, {"location": "kb/ds/set/disjoint/fastUnionQuickFind/", "title": "Fast Union / Quick Find", "text": ""}, {"location": "kb/ds/set/disjoint/fastUnionSlowFind/", "title": "Fast Union / Slow Find", "text": ""}, {"location": "kb/ds/set/disjoint/pathCompression/", "title": "Path Compression", "text": ""}, {"location": "kb/ds/set/disjoint/pros/", "title": "Pros", "text": ""}, {"location": "kb/ds/stack/adt/", "title": "ADT", "text": ""}, {"location": "kb/ds/stack/implementAsArray/", "title": "implement: by Array", "text": ""}, {"location": "kb/ds/stack/implementAsListLinked/", "title": "implement: by Linked List", "text": ""}, {"location": "kb/ds/stack/operation/", "title": "Operation", "text": ""}, {"location": "kb/ds/stack/overflow/", "title": "Overflow", "text": ""}, {"location": "kb/ds/stack/underflow/", "title": "Underflow", "text": ""}, {"location": "kb/ds/stack/app/infixPostfix/", "title": "Infix and Postfix", "text": ""}, {"location": "kb/ds/stack/app/polish/", "title": "Polish Notation", "text": ""}, {"location": "kb/ds/stack/app/postfixEvaluation/", "title": "Evaluation: Postfix", "text": ""}, {"location": "kb/ds/stack/app/prefixEvaluation/", "title": "Evaluation: Prefix", "text": ""}, {"location": "kb/ds/string/hashTable/", "title": "Hash Table", "text": ""}, {"location": "kb/ds/string/treeBinarySearch/", "title": "Tree: Binary Search", "text": ""}, {"location": "kb/ds/string/treeSuffix/", "title": "Tree: Suffix", "text": ""}, {"location": "kb/ds/string/treeTernarySearch/", "title": "Tree: Ternary Search", "text": ""}, {"location": "kb/ds/string/tries/", "title": "Tries", "text": ""}, {"location": "kb/ds/tree/generic/", "title": "Generic", "text": ""}, {"location": "kb/ds/tree/nAry/", "title": "n-Ary", "text": ""}, {"location": "kb/ds/tree/variations/", "title": "Variations", "text": ""}, {"location": "kb/ds/tree/avl/operation/", "title": "Operation", "text": ""}, {"location": "kb/ds/tree/binary/memory/", "title": "Memory", "text": ""}, {"location": "kb/ds/tree/binary/traversalThreadedQueueless/", "title": "Traversal: Threaded: Queueless", "text": ""}, {"location": "kb/ds/tree/binary/traversalThreadedStackless/", "title": "Traversal: Threaded: Stackless", "text": ""}, {"location": "kb/ds/tree/binary/types/", "title": "Types", "text": ""}, {"location": "kb/ds/tree/binarySearch/createWithTraversal/", "title": "Create by Traversal", "text": ""}, {"location": "kb/ds/tree/binarySearch/operation/", "title": "Operations", "text": ""}, {"location": "kb/ds/tree/binarySearch/traversal/", "title": "Traversal", "text": ""}, {"location": "kb/ds/tree/multiWay/b/", "title": "B", "text": ""}, {"location": "kb/ds/tree/multiWay/bPlus/", "title": "B+", "text": ""}, {"location": "kb/ds/tree/redBlack/operation/", "title": "Operation", "text": ""}, {"location": "kb/ds/tree/redBlack/operation/#node-insert", "title": "Node: Insert", "text": ""}, {"location": "kb/ds/tree/redBlack/operation/#node-delete", "title": "Node: Delete", "text": ""}, {"location": "kb/ds/tree/xor/", "title": "XOR", "text": ""}, {"location": "kb/js/", "title": "\ud83d\udc77 Javascript", "text": ""}, {"location": "kb/js/functional/", "title": "Functional Programming", "text": "<pre><code>Bob-&gt;Alice : hello\n</code></pre> <pre><code>const splitName = (name) =&gt; name.split('_').join(' ');\n\nconst returnNameCapitalized = (name) =&gt; name.toUpperCase();\n\nconsole.log(returnNameCapitalized(splitName('leonardo_maldonado')));\n</code></pre>"}, {"location": "kb/js/this/", "title": "this", "text": ""}, {"location": "kb/pattern/behavioral/chainOfResponsability/", "title": "Chain of Responsability", "text": ""}, {"location": "kb/pattern/behavioral/command/", "title": "Command", "text": ""}, {"location": "kb/pattern/behavioral/iterator/", "title": "Iterator", "text": ""}, {"location": "kb/pattern/behavioral/memento/", "title": "Memento", "text": ""}, {"location": "kb/pattern/behavioral/observer/", "title": "Observer", "text": ""}, {"location": "kb/pattern/behavioral/state/", "title": "State", "text": ""}, {"location": "kb/pattern/behavioral/strategy/", "title": "Strategy", "text": ""}, {"location": "kb/pattern/behavioral/template/", "title": "Template", "text": ""}, {"location": "kb/pattern/creational/builder/", "title": "Builder", "text": ""}, {"location": "kb/pattern/creational/factory/", "title": "Factory", "text": ""}, {"location": "kb/pattern/creational/factoryAbstract/", "title": "Factory: Abstract", "text": ""}, {"location": "kb/pattern/creational/monostate/", "title": "Monostate", "text": ""}, {"location": "kb/pattern/creational/prototype/", "title": "Prototype", "text": ""}, {"location": "kb/pattern/creational/singleton/", "title": "Singleton", "text": ""}, {"location": "kb/pattern/other/depInjection/", "title": "Dependency Injection", "text": ""}, {"location": "kb/pattern/structural/adapter/", "title": "Adapter", "text": ""}, {"location": "kb/pattern/structural/bridge/", "title": "Bridge", "text": ""}, {"location": "kb/pattern/structural/composite/", "title": "Composite", "text": ""}, {"location": "kb/pattern/structural/facade/", "title": "Fa\u00e7ade", "text": ""}, {"location": "kb/pattern/structural/flyweight/", "title": "Flyweight", "text": ""}, {"location": "kb/pattern/structural/mediator/", "title": "Mediator", "text": ""}, {"location": "kb/pattern/structural/proxy/", "title": "Proxy", "text": ""}, {"location": "note/", "title": "Course Notes", "text": ""}, {"location": "note/computerScience/", "title": "Computer Science", "text": "<p>Notes contain mistakes and are constantly updated. </p>"}, {"location": "note/mechanicalEngineering/", "title": "Mechanical Engineering", "text": "<p>Notes are introductory, contain mistakes and are constantly updated. </p>"}, {"location": "note/mechanicalEngineering/#ltv-systems", "title": "LTV Systems", "text": ""}, {"location": "note/mechanicalEngineering/#rotor-dynamics", "title": "Rotor Dynamics", "text": ""}, {"location": "note/mechanicalEngineering/#lmis", "title": "LMIs", "text": ""}, {"location": "note/mechanicalEngineering/#optimal-control", "title": "Optimal Control", "text": ""}, {"location": "note/mechanicalEngineering/#mechanical-vibration", "title": "Mechanical Vibration", "text": ""}, {"location": "note/mechanicalEngineering/#reliability-engineering", "title": "Reliability Engineering", "text": ""}, {"location": "note/mechanicalTechnology/", "title": "Mechanical Technology", "text": "<p>Notes contain mistakes and are constantly updated. </p>"}, {"location": "note/mechanicalTechnology/#cnc-programming", "title": "CNC Programming", "text": ""}, {"location": "note/mechanicalTechnology/#metrology", "title": "Metrology", "text": ""}, {"location": "note/mechanicalTechnology/#production-management-doctrines", "title": "Production Management Doctrines", "text": ""}, {"location": "people/", "title": "Awesome People", "text": ""}, {"location": "people/controlAnalysis/", "title": "Analysis \u2228 Control", "text": "<p>Vincent Blondel (control over networks, computational complexity of control design)</p> <p>Google Scholar user=VbXMQF4AAAAJ</p> <p>Masayoshi Tomizuka (control of mechanical systems)</p> <p>Google Scholar user=UG17DJgAAAAJ</p> <p>Joszef Bokor (control of automotive systems)</p> <p>Google Scholar user=8m8taGEAAAAJ</p> <p>Wilson Rugh (signals and systems pioneer)</p> <p>Scopus authorId=7006965657, homepage</p> <p>Oleg Gendelman (nonlinear system analysis)</p> <p>Google Scholar user=SUsDtWMAAAAJ</p> <p>Per-Olof Gutman (applied control theory)</p> <p>Google Scholar user=XuJ6XAsAAAAJ</p> <p>Mark Balas (control of flexible structures)</p> <p>Google Scholar user=TUxf4IoAAAAJ</p> <p>Tal Shima (swarm guidance)</p> <p>Google Scholar user=pp_nzaUAAAAJ</p> <p>Elon Rimon (robot navigation)</p> <p>Google Scholar user=YZPp814AAAAJ</p> <p>Pini Gurfil (distribituted networked systems)</p> <p>Google Scholar user=tNf4wr8AAAAJ</p> <p>Vered Rom-Kedar (structure analysis of dynamic systems)</p> <p>Google Scholar user=cLgnNzEAAAAJ</p> <p>Celso Bottura (control systems pioneer at UNICAMP)</p> <p>Scopus authorId=7006731667</p>"}, {"location": "people/controlGame/", "title": "Game \u2227 Control", "text": "<p>David Fridovich-Keil (optimal control, dynamic games)</p> <p>Google Scholar user=gqyTnpQAAAAJ</p> <p>Jaime F. Fisac (robotic control, dynamic games)</p> <p>Google Scholar user=HvjirogAAAAJ</p> <p>Giuseppe Notarstefano (distributed control, games)</p> <p>Google Scholar user=CIpzCCEAAAAJ</p> <p>Eyal Winter (game theory, voting theory, mechanism)</p> <p>Google Scholar user=Jru_k6EAAAAJ</p> <p>Ahuva Mu\u2019alem (game and scheduling theory)</p> <p>Google Scholar user=oAklK0gAAAAJ</p> <p>Noam Nisan (mechanism design, electronic commerce)</p> <p>Google Scholar user=zXQZPnMAAAAJ</p> <p>Alvin E. Roth (mechanism design pioneer)</p> <p>Google Scholar user=C3HHY7oAAAAJ</p> <p>Lloyd S. Shapley (pioneer of mechanism design in computer science, matching problems)</p> <p>Google Scholar user=dbF9HlQAAAAJ</p>"}, {"location": "people/controlLearning/", "title": "Learning \u2227 Control", "text": "<p>Dimitri Bertsekas (open-loop feedback control, awesome books, lectures, everything)</p> <p>Google Scholar user=VUmcVOAAAAAJ</p> <p>John Tsitsiklis (control, deep learning)</p> <p>Google Scholar user=bWTPrLEAAAAJ</p> <p>Sertac Karaman (control, autonomous systems)</p> <p>Google Scholar user=Vu-Zb7EAAAAJ</p> <p>Sergey Levine (learning, robotics, policies)</p> <p>Google Scholar user=Vu-Zb7EAAAAJ</p> <p>Pieter Abbeel (learning, robotics, policies, check insane helicopter)</p> <p>Google Scholar user=vtwH6GkAAAAJ</p>"}, {"location": "people/formal/", "title": "Formal Methods", "text": "<p>Doron Peled (temporal logic, concurrency)</p> <p>Google Scholar user=XF61SSwAAAAJ</p> <p>Ofer Strichman (translation, model checking, formal methods)</p> <p>Google Scholar user=h0R3z64AAAAJ</p> <p>Leonardo de Moura (theorem proof systems)</p> <p>Google Scholar user=CwazDKgAAAAJ</p> <p>Shimon Even (graphs, geometry, networks)</p> <p>Scopus authorId=7005714396</p>"}, {"location": "people/game/", "title": "Game", "text": "<p>Yuliy Sannikov (continous-time games, finance applications)</p> <p>Google Scholar user=iId1_GcAAAAJ</p> <p>Jeffrey Rosenschein (cooperative games)</p> <p>Google Scholar user=YO7cKNMAAAAJ</p> <p>Ariel Rubinstein (decision problems, bounded rationality models)</p> <p>Google Scholar user=sCccieYAAAAJ</p> <p>Ankur A. Kulkarni (interesection of games, control and information, check this)</p> <p>Google Scholar user=QDK7vIMAAAAJ</p> <p>Sergiu Hart (games &amp; dynamic systems)</p> <p>Google Scholar user=lvtuMYkAAAAJ</p> <p>Inbal Talgam-Cohen (mechanism design, auction theory)</p> <p>Google Scholar user=R1YK5BsAAAAJ</p> <p>S\u00e9bastien Lahaie (optimization, auction theory)</p> <p>Google Scholar user=a8MrE5EAAAAJ</p> <p>Geoffroy de Clippel (egalitarianism and mechanism design)</p> <p>Scopus authorId=18036496400</p> <p>Shmuel Zamir (games with incomplete information)</p> <p>Google Scholar user=2QAV474AAAAJ</p>"}, {"location": "people/googleScholarLabels/", "title": "Google Scholar Labels", "text": "<ul> <li> <p><code>label:network_information_theory</code></p> </li> <li> <p><code>label:learning_control</code></p> </li> <li> <p><code>label:learning_and_control</code></p> </li> <li> <p><code>label:causal_perturbation</code></p> </li> <li> <p><code>label:causal_perturbation_theory</code></p> </li> </ul>"}, {"location": "people/information/", "title": "Information", "text": "<p>Yaneer Bar-Yam (multiscale information theory)</p> <p>Google Scholar user=GhhgXQIAAAAJ</p> <p>Igal Sason (intersection of information and coding theory)</p> <p>Google Scholar user=SPBnIOEAAAAJ</p> <p>Ofer Zeitouni (filtering, communications)</p> <p>Google Scholar user=2c3HfFAAAAAJ</p> <p>Israel Cohen (robust information processing with deep learning)</p> <p>Google Scholar user=ZkQc3WMAAAAJ</p> <p>Tuvi Etzion (encoding)</p> <p>Google Scholar user=dnM-TsAAAAAJ</p> <p>Ron Meir (intersection of information, learning and control)</p> <p>Google Scholar user=r3NAa9oAAAAJ</p> <p>Guy Bresler (pure information theory)</p> <p>Google Scholar user=2aMqJTgAAAAJ</p> <p>Ran Raz (proof theory, communication complexity)</p> <p>Google Scholar user=vmHFZM0AAAAJ</p>"}, {"location": "people/learning/", "title": "Learning", "text": "<p>Marvin Minsky (artificial intelligence, society of mind)</p> <p>Google Scholar user=g_7VKegAAAAJ</p> <p>Michael Luck (safe and trusted AI)</p> <p>Google Scholar user=mKVcy8sAAAAJ</p> <p>Seth Lloyd (all ideas interesting and information/learning related)</p> <p>Google Scholar user=mKVcy8sAAAAJ</p> <p>Ohad Shamir (learning theory)</p> <p>Google Scholar user=all0DHsAAAAJ</p> <p>Shai Shalev-Shwartz (online learning and convex optimization)</p> <p>Google Scholar user=uYVc9koAAAAJ</p> <p>Csaba Szepesvari (bandit framework, sequential decision)</p> <p>Google Scholar user=zvC19mQAAAAJ</p> <p>Edward Fredkin (digital physics, digital philosophy, pancomputationalism)</p> <p>Scopus authorId=6602365222</p> <p>Shie Mannor (digital physics, digital philosophy, pancomputationalism)</p> <p>Google Scholar user=q1HlbIUAAAAJ</p> <p>Ricardo Silva (statistical machine learning)</p> <p>Google Scholar user=I-ANa0QAAAAJ</p> <p>Shimon Ullman (computer-human vision)</p> <p>Google Scholar user=XOfA8ckAAAAJ</p> <p>Charu Aggarwal (scalable machine learning)</p> <p>Google Scholar user=x_wsduUAAAAJ</p> <p>Koby Crammer (big data)</p> <p>Google Scholar user=NQgRwKAAAAAJ</p>"}, {"location": "people/optimization/", "title": "Optimization", "text": "<p>Shoham Sabach (nonlinear optimization)</p> <p>Google Scholar user=42D12TkAAAAJ</p> <p>Angelia Nedich (optimization over networks)</p> <p>Google Scholar user=86PxxsoAAAAJ</p> <p>Dan Garber (algorithmic optimization)</p> <p>Google Scholar user=kUe1sZEAAAAJ</p> <p>Michael Zibulevsky (ML and optimization, nice classes on youtube)</p> <p>Google Scholar user=yKP7IwIAAAAJ</p> <p>Shmirit Stern (data-driven, large-scale optimization)</p> <p>Google Scholar user=Aq9GoRIAAAAJ</p> <p>Moscow State University Department of Mechanics and Mathematics</p> <p>Department of Extreme Problems*</p> <p>Dimitris Bertsimas (optimization with business applications)</p> <p>Google Scholar user=prKmkzMAAAAJ</p>"}, {"location": "people/pde/", "title": "Applied PDEs", "text": "<p>Edriss Titi (turbulence)</p> <p>Google Scholar user=VrQC0_gAAAAJ</p> <p>Renato Cotta (generalized integral transforms)</p> <p>Google Scholar user=fdTa1UYAAAAJ</p> <p>Cezar Bonato (quantum mechanics pioneer at UFPB)</p> <p>Scopus authorId=16411118100</p> <p>Bas\u00edlio Baseia (quantum mechanics pioneer at UFPB)</p> <p>Scopus authorId=7004772633</p>"}, {"location": "people/thermo/", "title": "Thermodynamics", "text": "<p>Herbert Bernard Callen (engineering thermodynamics with adequate math and physics foundation)</p> <p>Scopus authorId=22987302800</p> <p>Joseph K. Kestin (engineering thermodynamics with adequate math and physics foundation)</p> <p>Scopus authorId=22987302800</p>"}, {"location": "post/", "title": "Posts", "text": ""}, {"location": "post/2022/", "title": "2022", "text": ""}, {"location": "post/2022/000-memo/", "title": "Table memo!", "text": "Tipo de Opera\u00e7\u00e3o Step # Where Code or Command Code or Command Exibir Excluir #0001 command line rails new crypto_wallet super super admin colaborador Categorias super super super super super Plantas super super super super super Produtos super admin super admin super admin super admin colaborador super admin Unidades super admin super admin colaborador super admin super admin colaborador super admin Clientes Mangabeira super admin colaborador super admin colaborador super admin colaborador super admin Personaliza\u00e7\u00e3o super admin colaborador super admin colaborador cliente super admin colaborador cliente super  9  super admin super admin super admin super admin colaborador cliente super  10  super admin super admin super admin super admin colaborador cliente super"}, {"location": "post/2022/000-memo/#snippet-s0001", "title": "Snippet S0001:", "text": "<pre><code>{\n\"firstName\": \"John\",\n\"lastName\": \"Smith\",\n\"age\": 25\n}\n</code></pre>"}, {"location": "post/2022/000-memo/#snippet-s0002", "title": "Snippet S0002:", "text": "<pre><code>{\n\"firstName\": \"John\",\n\"lastName\": \"Smith\",\n\"age\": 25\n}\n</code></pre>"}, {"location": "post/2022/000-memo/#snippet-s0003", "title": "Snippet S0003:", "text": "<pre><code>def index\nputs \"hello world\"\nend\n</code></pre>"}, {"location": "post/2022/001-testing-math/", "title": "Testing math!", "text": "<p>Random gibberish to check if \\(\\LaTeX\\) is redenring well enough.</p> <p>When \\(a \\ne 0\\), there are two solutions to \\((ax^2 + bx + c = 0)\\) and they are  \\(x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\):</p> \\[\\begin{align}   \\tag{1.1}   V_{sphere} = \\frac{4}{3}\\pi r^3 \\end{align}\\] \\[\\begin{align}   \\label{eq:test1}   V_{sphere} = \\frac{4}{3}\\pi r^3  \\end{align}\\] <p>In Eq. \\(\\eqref{eq:test1}\\) you can see\u2026while in Eq. \\(\\eqref{eq:test2}\\)\u2026</p> \\[\\begin{align}   V_{cube} = l w h \\label{eq:test2} \\end{align}\\] <p>The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\), because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\).</p> \\[\\begin{pmatrix}     3  &amp; -10 &amp; 2 \\\\     -1 &amp;   7 &amp; 4 \\\\     5  &amp;   0 &amp; 1 \\end{pmatrix} \\begin{pmatrix}     x\\\\ y\\\\ z \\end{pmatrix} = \\begin{pmatrix}     3x-10y+2z \\\\     -x+7y+4z \\\\     5x+z \\end{pmatrix}\\] \\[\\begin{equation}     \\int_\\alpha^\\beta f'(x) \\, dx=f(\\beta)-f(\\alpha). \\end{equation}\\] <p>We can use the fundamental theorem of calculus to say that  \\(\\int_2^3 x^2 \\, dx=\\frac{3^3}{3}-\\frac{2^3}{3}=\\frac{19}{3}\\).  </p> <p>Also note that</p> <p>\\(\\displaystyle \\int_2^3 x^2 \\, dx=\\frac{3^3}{3}-\\frac{2^3}{3}=\\frac{19}{3}\\). </p> <p>We can also give this equation its own line </p> \\[\\begin{equation}   \\int_2^3 x^2 \\, dx=\\frac{3^3}{3}-\\frac{2^3}{3}=\\frac{19}{3}. \\end{equation}\\] \\[\\begin{align*}   \\frac{d}{dx}(x\\sin(x^2))  &amp;= x\\frac{d}{dx}(\\sin(x^2)) + \\sin(x^2)\\frac{d}{dx}(x) \\\\                             &amp;= x\\cos(x^2)\\frac{d}{dx}(x^2) + \\sin(x^2)\\\\                             &amp;= x\\cos(x^2)2x + \\sin(x^2)\\\\                             &amp;= 2x^2\\cos(x^2) + \\sin(x^2) \\end{align*}\\] \\[\\left( \\begin{array}{cccc|c}     3 &amp; -2 &amp;  1 &amp; -1 &amp;  7\\\\   -1 &amp;  0 &amp; -5 &amp;  2 &amp;  2\\\\     0 &amp;  1 &amp;  2 &amp;  0 &amp;  0\\\\    -2 &amp;  3 &amp;  0 &amp; -5 &amp; -1 \\end{array} \\right)\\] <p>\\(\\rho_2\\leftrightarrow\\rho_3\\) </p> <p>\\(2\\rho_1+\\rho_2\\\\-3\\rho_1+\\rho_3\\)</p> <p>\\(\\subset, \\subseteq, \\supset,\\supseteq\\) \\(\\{, \\}, \\in, \\notin\\), cup, cap, varnothing$  \\(\\le,\\ge,\\ne,\\approx\\) \\(\\forall,\\exists,\\therefore\\) \\(\\cdot, \\dots, \\cdots, \\vdots, \\ddots\\) \\(\\alpha, \\beta, \\gamma, \\rho, \\dots\\) \\(\\mathbb{R}, \\mathbb{Q}, \\mathbb{N}\\) \\(\\mathscr{A}, \\mathscr{B}, \\dots\\) \\(\\mathcal{A}, \\mathcal{B}, \\dots\\) \\(f\\colon A\\to B\\) \\(\\bigcup_{n=1}^\\infty, \\bigcap_{\\alpha\\in A}\\) \\(\\rightarrow,\\Rightarrow,\\longrightarrow\\) \\(\\leftrightarrow,\\Leftrightarrow\\)</p> \\[\\begin{equation} x+y=z \\end{equation}\\] \\[\\begin{equation*} x+y=z \\end{equation*}\\] \\[\\begin{align} x+y&amp;=z \\\\ m+n&amp;&gt;y \\end{align}\\] \\[\\begin{equation}     (x+3)(x+2)=x^2+5x+6\\notag\\\\     \\geq x^2 \\end{equation}\\] \\[\\begin{gather}     (x+3)(x+2)=x^2+5x+6\\notag\\\\     \\geq x^2 \\end{gather}\\] \\[\\begin{align}     (x+3)(x+2)&amp;=x^2+5x+6\\notag\\\\     &amp;\\geq x^2 \\end{align}\\] <p>\\(\\frac{x}{y}\\)</p> <p>\\(\\dfrac{x}{y}\\)</p> <p>\\(\\alpha \\beta \\gamma\\)</p> <p>\\(\\int_a^b \\iint \\oint\\)</p> <p>\\(\\sum_{n=1}^\\infty\\)</p> \\[\\begin{equation} \\left\\lvert \\sum_{n=1}^\\infty n \\right\\rvert = \\dfrac{1}{12} \\end{equation}\\]"}, {"location": "post/2022/002-testing-boxes/", "title": "Testing boxes!", "text": "<p> On the importance of sentence length </p> <p>          This sentence has five words. Here are five more words.       </p> <p> - Gary Provost (100 Ways to Improve Your Writing, 1985) </p> <p> On the importance of sentence length </p> <p>          This sentence has five words. Here are five more words.       </p> <p> - Gary Provost (100 Ways to Improve Your Writing, 1985) </p> Very Long Title <code>NOTE</code> This is something I want you to notice. It has a lot of text, and I want that text to wrap within a cell to the right of the <code>NOTE</code>, instead of under it. <p><code>permalink</code></p> <p><code>baselevel</code></p> Field Description Optional Default manual_entry_indicator no: is not is allow manual entry  yes: is manual entry enabled yes no amounts json object containing all transaction amounts   Subfield   Description   Optional   Default   tip   transaction tip amount   yes   NA   total   equal to Base Amount + Base amount for Reduced State Tax + City Tax + State Tax + Reduced State Tax + Tip or Cash back   no   NA   cashback   cash back amount   yes   NA   state_tax   State tax amount   yes   NA   city_tax   City tax amount   yes   NA   reduced_tax   Reduced state tax amount   yes   NA   base_reduced_tax   Reduced state tax base amount   yes   NA  no NA"}, {"location": "post/2022/003-testing-long-article/", "title": "Testing long article!", "text": "<p>Contents:</p> <ol> <li>Matrices <code>[Vector, __add__, reflect_y, rotate, dilate, transform]</code></li> <li>Matrices: Overloaded <code>[Matrix, __add__, __str__, __mul__, zero, det, inv, __pow__]</code></li> <li>Bonus: Complex numbers</li> <li>Matrices: The (R)evolution. It\u2019s already in the making (there\u2019s a summary at the end)</li> </ol> <p>Preface: Based on my teaching experience, I think that the courses referenced by others are very good courses. That means if your goal is understanding matrices as mathematicians do, than you should by all means get the whole course. But if your goals are more modest, here\u2019s my try at something more tailored to your needs (but still written with the goal to convey many theoretical concepts, kind of contradicting my original advice.)</p> <p>How to use:</p> <ul> <li>This post is long. You might consider printing this and going slow, like one part a day.</li> <li>Code is essential. This is a course for programmers. Exercises are essential too. </li> <li>You should take a look at the code companion which contains all this code and much more</li> <li>It\u2019s \u201c2 for the price of 1\u201d special: you can also learn Python 3 here. And complex numbers.</li> <li>I\u2019ll highly value any attempt to read this (do I officially qualify for the longest post ever?), so feel free to comment if you don\u2019t understand something (and also if you do).</li> </ul>"}, {"location": "post/2022/003-testing-long-article/#1-matrices", "title": "1. Matrices", "text": ""}, {"location": "post/2022/003-testing-long-article/#vectors", "title": "Vectors", "text": "<p>Before matrices come vectors. You sure know how to handle the 2- and 3- dimensional vectors:</p> <pre><code>class Vector:\n    \"\"\"This will be a simple 2-dimensional vector.\n\n    In case you never encountered Python before, this string is a\n    comment I can put on the definition of the class or any function.\n    It's just one of many cool features of Python, so learn it here!\n\n    \"\"\"\n\n    def __init__(self, x, y): \n        self.x = x\n        self.y = y\n</code></pre> <p>now you can write</p> <pre><code>v = Vector(5, 3)\nw = Vector(7, -1)\n</code></pre> <p>but it\u2019s not much fun by itself. Let\u2019s add more useful methods:</p> <pre><code>    def __str__(self: 'vector') -&gt; 'readable form of vector':\n        return '({0}, {1})'.format(self.x, self.y)\n\n    def __add__(self:'vector', v: 'another vector') -&gt; 'their sum':\n        return Vector(self.x + v.x, self.y + v.y)\n\n    def __mul__(self:'vector', number: 'a real number') -&gt; 'vector':\n        '''Multiplies the vector by a number'''\n        return Vector(self.x * number, self.y * number)\n</code></pre> <p>That makes things more interesting as we can now write:</p> <pre><code>print(v + w * 2)\n</code></pre> <p>and get the answer <code>(19, 1)</code> nicely printed as a vector (if the examples look unfamiliar, think how this code would look in C++). </p>"}, {"location": "post/2022/003-testing-long-article/#tranformations", "title": "Tranformations", "text": "<p>Now it\u2019s all cool to be able to write <code>1274 * w</code> but you need more vector operations for the graphics. Here are some of them: you can flip the vector around <code>(0,0)</code> point, you can reflect it around <code>x</code> or <code>y</code> axis, you can rotate it clockwise or counterclockwise (it\u2019s a good idea to draw a picture here). </p> <p>Let\u2019s do some simple operations:</p> <pre><code>    ...\n\n    def flip(self:'vector') -&gt; 'vector flipped around 0':\n        return Vector(-self.x, -self.y)\n\n    def reflect_x(self:'vector') -&gt; 'vector reflected around x axis':\n        return Vector(self.x, -self.y)\n\n\nprint(v.flip(), v.reflect_x())\n</code></pre> <ul> <li>Question: is it possible to express <code>flip(...)</code> using the operations I had below? What about <code>reflect_x</code>?</li> </ul> <p>Now you may wonder why I omitted <code>reflect_y</code>. Well, it\u2019s because I want you to stop for a moment and write your own version of it. Ok, here\u2019s mine:</p> <pre><code>    def reflect_y(self:'vector') -&gt; 'vector reflected around y axis':\n        return self.flip().reflect_x()\n</code></pre> <p>See, if you look how this function computes, it\u2019s actually quite trivial. But suddenly an amazing thing happened: I was able to write a transformation using only the existing transformations <code>flip</code> and <code>reflect_x</code>. For all I care, <code>reflect_y</code> could be defined in a derived class without access to <code>x</code> and <code>y</code> and it would still work!</p> <p>Mathematicians would call these functions operators. They would say that <code>reflect_y</code> is an operator obtained by composition of operators <code>flip</code> and <code>reflect_x</code> which is denoted by <code>reflect_y = flip ? reflect_x</code> (you should see the small circle, a Unicode symbol <code>25CB</code>).</p> <ul> <li>Note: I will quite freely use the <code>=</code> symbol from now to denote that two operations produce the same result, like in the paragraph above. This is a \u201cmathematical <code>=</code>\u201d, which cannot be expressed as a program.</li> </ul> <p>So if I do </p> <pre><code>print(v.reflect_y())\n</code></pre> <p>I get the result <code>(-5, 3)</code>. Go and picture it!</p> <ul> <li>Question: Consider a composition <code>reflect_y ? reflect_y</code>. How would you name it? </li> </ul>"}, {"location": "post/2022/003-testing-long-article/#rotations", "title": "Rotations", "text": "<p>Those operations were nice and useful, but you are probably wondering why am so slow to introduce rotations. Ok, here I go:</p> <pre><code>    def rotate(self:'vector', angle:'rotation angle') -&gt; 'vector':\n        ??????\n</code></pre> <p>At this point, if you know how to rotate vectors, you should go on and fill in the question marks. Otherwise please bear with me for one more simple case: counterclockwise rotation by <code>90</code> degrees. This one is not hard to draw on a piece of paper:</p> <pre><code>    def rotate_90(self:'vector') -&gt; 'rotated vector':\n        new_x = - self.y\n        new_y =   self.x\n        return Vector(new_x, new_y)\n</code></pre> <p>Trying </p> <pre><code>x_axis = Vector(1, 0)\ny_axis = Vector(0, 1)\n\nprint(x_axis.rotate_90(), y_axis.rotate_90())\n</code></pre> <p>now gives <code>(0, 1) (-1, 0)</code>. Run it yourself!</p> <ul> <li>Question: Prove that <code>flip = rotate_90 ? rotate_90</code>.</li> </ul> <p>Anyway, I won\u2019t hide the secret ingredient for longer:</p> <pre><code>import math   # we'll need math from now on\n  ...\n\nclass Vector:\n\n      ...\n\n    def rotate(self:'vector', angle:'rotation angle') -&gt; 'rotated vector':\n        cos = math.cos(angle)\n        sin = math.sin(angle)\n        new_x = cos * self.x - sin * self.y\n        new_y = sin * self.x + cos * self.y\n        return Vector(new_x, new_y)\n</code></pre> <p>Now let\u2019s try something along the lines:</p> <pre><code>print(x_axis.rotate(90), y_axis.rotate(90))\n</code></pre> <p>If you expect the same result as before, <code>(0, 1) (-1, 0)</code>, you\u2019re bound to be disappointed. That code prints:</p> <pre><code>(-0.448073616129, 0.893996663601) (-0.893996663601, -0.448073616129)\n</code></pre> <p>and boy, is it ugly!</p> <ul> <li> <p>Notation: I will say that we applied operation <code>rotate(90)</code> to <code>x</code> in the example above. The knowledge we gained is that <code>rotate(90) != rotate_90</code>.</p> </li> <li> <p>Question: What happened here? How to express <code>rotate_90</code> in terms of <code>rotate</code>?  How to express <code>flip</code> in terms of <code>rotate</code>?</p> </li> </ul>"}, {"location": "post/2022/003-testing-long-article/#dilations", "title": "Dilations", "text": "<p>Those rotations are certainly useful, but they are not everything you need to do even the 2D graphics. Consider the following transformations: </p> <pre><code>    def dilate(self:'vector', axe_x:'x dilation', axe_y:'y dilation'):\n        '''Dilates a vector along the x and y axes'''\n        new_x = axe_x * self.x\n        new_y = axe_y * self.y\n        return Vector(new_x, new_y)\n</code></pre> <p>This <code>dilate</code> thing dilates the <code>x</code> and <code>y</code> axes in a possibly different way. </p> <ul> <li>Exercise: Fill in the question marks in <code>dilate(?, ?) = flip</code>, <code>dilate(?, ?) = reflect_x</code>.</li> </ul> <p>I will use this <code>dilate</code> function to demonstrate a thing mathematicians call commutativity: that is, for every value of parameters <code>a</code>, <code>b</code>, <code>c</code>, <code>d</code> you can be sure that </p> <pre><code>dilate(a, b) ? dilate(c, d) = dilate(c, d) ? dilate(a, b)\n</code></pre> <ul> <li> <p>Exercise: Prove it. Also, is it true that for all possible values of parameters those below would hold?</p> <ul> <li><code>rotate(a) ? rotate(b) = rotate(b) ? rotate(a)</code></li> <li><code>dilate(a, b) ? rotate(c) = rotate(c) ? dilate(a, b)</code></li> <li><code>rotate(a) ? __mul__(b) = __mul__(b) ? rotate(a)</code></li> </ul> </li> </ul>"}, {"location": "post/2022/003-testing-long-article/#matrices", "title": "Matrices", "text": "<p>Let\u2019s summarize all the stuff we had around here, our operators on vector <code>x</code></p> <ul> <li><code>flip</code>, <code>reflect_x</code>, <code>*</code>, <code>rotate(angle)</code>, <code>dilate(x, y)</code></li> </ul> <p>from which one could make some really crazy stuff like </p> <ul> <li><code>flip ? rotate(angle) ? dilate(x, y) ? rotate(angle_2) ? reflect_y + reflect_x = ???</code></li> </ul> <p>As you create more and more complicated expressions, one would hope for some kind of order that would suddenly reduce all possible expressions to a useful form. Fear not! Magically, every expression of the form above can be simplified to</p> <pre><code>    def ???(self:'vector', parameters):\n        '''A magical representation of a crazy function'''\n        new_x = ? * self.x + ? * self.y\n        new_y = ? * self.x + ? * self.y\n        return Vector(new_x, new_y)\n</code></pre> <p>with some numbers and/or parameters instead of <code>?</code>s.</p> <ul> <li>Example: Work out what the values of \u2018?\u2019 are for <code>__mul__(2) ? rotate(pi/4)</code></li> <li>Another example: Same question for  <code>dilate(x, y) ? rotate(pi/4)</code></li> </ul> <p>This allows us to write a universal function</p> <pre><code>    def transform(self:'vector', m:'matrix') -&gt; 'new vector':\n        new_x = m[0] * self.x + m[1] * self.y\n        new_y = m[2] * self.x + m[3] * self.y\n        return Vector(new_x, new_y)\n</code></pre> <p>which would take any 4-tuple of numbers, called matrix, and apply it to vector <code>x</code>. Here\u2019s an example:</p> <pre><code>rotation_90_matrix = (0, -1, 1, 0)\nprint(v, v.rotate_90(), v.transform(rotation_90_matrix))\n</code></pre> <p>which prints <code>(5, 3) (-3, 5) (-3, 5)</code>. Note that if you apply <code>transform</code> with any matrix to origin, you still get origin:</p> <pre><code>origin = Vector(0, 0)\nprint(origin.transform(rotation_90_matrix))\n</code></pre> <ul> <li>Exercise: what are the tuples <code>m</code> that describe <code>flip</code>, <code>dilate(x, y)</code>, <code>rotate(angle)</code>?</li> </ul> <p>As we part with the <code>Vector</code> class, here\u2019s an exercise for those who want to test both their vector math knowledge and Pythonic skills:</p> <ul> <li>The final battle: Add to the <code>Vector</code> class all vector operations that you can come up with (how many of standard operators can you overload for vectors? Check out my answer).</li> </ul>"}, {"location": "post/2022/003-testing-long-article/#2-matrices-overloaded", "title": "2. Matrices: Overloaded", "text": "<p>As we found out in the previous section, a matrix can be thought of a shorthand that allows us to encode a vector operation in a simple way. For example, <code>rotation_90_matrix</code> encodes the rotation by 90 degrees.</p>"}, {"location": "post/2022/003-testing-long-article/#matrix-objects", "title": "Matrix objects", "text": "<p>Now as we shift our attention from vectors to matrices, we should by all means have a class for matrix as well. Moreover, in that function <code>Vector.transform(...)</code> above the role of the matrix was somewhat misrepresented. It\u2019s more usual for <code>m</code> to be fixed while vector changes, so from now on our transformations will be methods of matrix class:</p> <pre><code>class Matrix:\n\n    def __init__(self:'new matrix', m:'matrix data'):\n        '''Create a new matrix.\n\n        So far a matrix for us is just a 4-tuple, but the action\n        will get hotter once The (R)evolution happens!\n\n        '''\n        self.m = m\n\n    def __call__(self:'matrix', v:'vector'):\n        new_x = self.m[0] * v.x + self.m[1] * v.y\n        new_y = self.m[2] * v.x + self.m[3] * v.y\n        return Vector(new_x, new_y)\n</code></pre> <p>If you don\u2019t know Python, <code>__call__</code> overloads the meaning of <code>(...)</code> for matrices so I can use the standard notation for a matrix acting on a vector. Also, the matrices are usually written using a single uppercase letter:</p> <pre><code>J = Matrix(rotation_90_matrix)\nprint(w, 'rotated is', J(w))\n</code></pre> <ul> <li>Exercise: repeat this example with matrices from the previous exercise. </li> </ul>"}, {"location": "post/2022/003-testing-long-article/#addition", "title": "Addition", "text": "<p>Now, let\u2019s find out what else we can do with matrices. Remember that matrix <code>m</code> is really just a way to encode an operaton on vectors. Note that for  two functions <code>m1(x)</code> and <code>m2(x)</code> I can create a new function (using lambda notation) <code>m = lambda x: m1(x) + m2(x)</code>. It turns out if <code>m1</code> and <code>m2</code> were enconded by matrices, you can also encode this <code>m</code> using matrices!</p> <ul> <li>Exercise: Think through any difficulties you might have with this statement.</li> </ul> <p>You just have to add its data, like <code>(0, 1, -1, 0) + (0, 1, -1, 0) = (0, 2, -2, 0)</code>. Here\u2019s how to add two tuples in Python, with some very useful and highly Pythonic techniques:</p> <pre><code>    def __add__(self:'matrix', snd:'another matrix'):\n        \"\"\"This will add two matrix arguments.\n\n        snd is a standard notation for second argument.\n        (i for i in array) is Python's powerful list comprehension.\n        zip(a, b) is used to iterate over two sequences together\n\n        \"\"\"\n\n        new_m = tuple(i + j for i, j in zip(self.m, snd.m))\n        return Matrix(new_m)\n</code></pre> <p>Now we can write expressions like <code>J + J</code> or even <code>J + J + J</code>, but to see the results we have to figure out how to print a Matrix. A possible way would be to print a 4-tuple of numbers, but let\u2019s take a hint from the <code>Matrix.__call__</code> function that the numbers should be organized into a <code>2x2</code> block:</p> <pre><code>    def as_block(self:'matrix') -&gt; '2-line string':\n        \"\"\"Prints the matrix as a 2x2 block.\n\n        This function is a simple one without any advanced formatting.\n        Writing a better one is an exercise.\n\n        \"\"\"\n\n        return ('| {0} {1} |\\n' .format(self.m[0], self.m[1]) +\n                '| {0} {1} |\\n' .format(self.m[2], self.m[3]) )\n</code></pre> <p>If you look at this function in action you\u2019ll notice there is some room for improvement:</p> <pre><code>print((J + J + J).as_block())\n</code></pre> <ul> <li>Exercise: write a nicer function <code>Matrix.__str__</code> that will round the numbers and print them in the fields of fixed length.</li> </ul> <p>Now you should be able to write the matrix for rotation:</p> <pre><code>def R(a: 'angle') -&gt; 'matrix of rotation by a':\n    cos = math.cos(a)\n    sin = math.sin(a)\n    m = ( ????? )\n    return Matrix(m)\n</code></pre> <ul> <li>Exercise: Examine the code for <code>Vector.rotate(self, angle)</code> and fill in the question marks. Test with<pre><code>from math import pi        \nprint(R(pi/4) + R(-pi/4))\n</code></pre> </li> </ul>"}, {"location": "post/2022/003-testing-long-article/#multiplication", "title": "Multiplication", "text": "<p>The most important thing we can do with one-parameter functions is compose them: <code>f = lambda v: f1(f2(v))</code>. How to mirror that with matrices? This requires us to examine how <code>Matrix(m1) ( Matrix(m2) (v))</code> works. If you expand it, you\u2019ll notice that </p> <pre><code>m(v).x = m1[0] * (m2[0]*v.x + m2[1]*v.y) + m1[1] * (m2[2]*v.x + m2[3]*v.y)\n</code></pre> <p>and similarly for <code>m(v).y</code>, which, if you open the parentheses, looks suspiciously similar to <code>Matrix.__call__</code> using a new tuple <code>m</code>, such that <code>m[0] = m1[0] * m2[0] + m1[2] * m2[2]</code>. So let\u2019s take this as a hint for a new definiton:</p> <pre><code>    def compose(self:'matrix', snd:'another matrix'):\n        \"\"\"Returns a matrix that corresponds to composition of operators\"\"\"\n\n        new_m = (self.m[0] * snd.m[0] + self.m[1] * snd.m[2],\n                 self.m[0] * snd.m[1] + self.m[1] * snd.m[3],\n                 ???,\n                 ???) \n        return Matrix(new_m)\n</code></pre> <ul> <li> <p>Exercise: Fill in the question marks here. Test it with</p> <pre><code>print(R(1).compose(R(2)))\nprint(R(3))\n</code></pre> </li> <li> <p>Math exercise: Prove that <code>R(a).compose(R(b))</code> is always the same as <code>R(a + b)</code>.</p> </li> </ul> <p>Now let me tell the truth: this <code>compose</code> function is actually how mathematicians decided to multiply matrices. This makes sense as a notation: <code>A * B</code> is a matrix that decribes operator <code>A ? B</code>, and as we\u2019ll see next there are deeper reasons to call this \u2018multiplication\u2019 as well.</p> <p>To start using multiplication in Python all we have to do is to order it so in a <code>Matrix</code> class:</p> <pre><code>    class Matrix:\n\n          ...\n\n        __mul__ = compose\n</code></pre> <ul> <li>Exercise: Compute <code>(R(pi/2) + R(pi)) * (R(-pi/2) + R(pi))</code>. Try to find the answer yourself first on a piece of paper.</li> </ul>"}, {"location": "post/2022/003-testing-long-article/#rules-for-and", "title": "Rules for <code>+</code> and <code>*</code>", "text": "<p>Let\u2019s make some good name for the matrix that corresponds to the <code>dilate(a, b)</code> operator. Now there\u2019s nothing wrong with <code>D(a, b)</code>, but I\u2019ll use a chance to introduce a standard notation:</p> <pre><code>def diag(a: 'number', b: 'number') -&gt; 'diagonal 2x2 matrix':\n    m = (a, 0, 0, b)\n    return Matrix(m)\n</code></pre> <p>Try <code>print(diag(2, 12345))</code> to see why it\u2019s called a diagonal matrix. </p> <p>As the composition of operations was found before to be not always commutative, <code>*</code> operator won\u2019t be always commutative for matrices either. </p> <ul> <li>Exercise: go back and refresh the commutativity thing if necessary. Then give examples of matrices <code>A</code>, <code>B</code>, made from <code>R</code> and <code>diag</code>, such that <code>A * B</code> is not equal to <code>B * A</code>.</li> </ul> <p>This is somewhat strange, since multiplication for numbers is always commutative, and raises the question whether <code>compose</code> really deserves to be called <code>__mul__</code>. Here\u2019s quite a lot of rules that <code>+</code> and <code>*</code> do satisfy:</p> <ol> <li><code>A + B = B + A</code></li> <li><code>A * (B + C) = A * B + A * C</code></li> <li><code>(A + B) * C = A * C + B * C</code></li> <li><code>(A * B) * C = A * (B * C)</code></li> <li>There is an operation called <code>A - B</code> and <code>(A - B) + B = A</code></li> </ol> <ul> <li>Exercise: Prove these statements. How to define <code>A - B</code> in terms of <code>+</code>, <code>*</code> and <code>diag</code>? What does <code>A - A</code> equal to? Add the method <code>__sub__</code> to the class <code>Matrix</code>. What happens if you compute <code>R(2) - R(1)*R(1)</code>? What should it be equal to?</li> </ul> <p>The <code>(A * B) * C = A * (B * C)</code> equality is called associativity and is especially nice since it means that we don\u2019t have to worry about putting parentheses in an expression of the form <code>A * B * C</code>:</p> <pre><code>print(R(1) * (diag(2,3) * R(2)))\nprint((R(1) * diag(2,3)) * R(2))\n</code></pre> <p>Let\u2019s find analogues to regular numbers <code>0</code> and <code>1</code> and subtraction:</p> <pre><code>zero = diag(0, 0)\none = diag(1, 1)\n</code></pre> <p>With the following easily verifiable additions:</p> <ol> <li><code>A + zero = A</code></li> <li><code>A * zero = zero</code></li> <li><code>A * one = one * A = A</code></li> </ol> <p>the rules become complete, in the sense that there is a short name for them: ring axioms. Mathematicians thus would say that matrices form a ring, and they indeed always use symbols <code>+</code> and <code>*</code> when talking about rings, and so shall we.</p> <p>Using the rules it\u2019s possible to easily compute the expression from the previous section:</p> <pre><code>(R(pi/2) + R(pi)) * (R(-pi/2) + R(pi)) = R(pi/2) * R(-pi/2) +  ... = one + ...\n</code></pre> <ul> <li>Exercise: Finish this. Prove that <code>(R(a) + R(b)) * (R(a) - R(b)) = R(2a) - R(2b)</code>. </li> </ul>"}, {"location": "post/2022/003-testing-long-article/#affine-transformations", "title": "Affine Transformations", "text": "<p>Time to return to how we defined matrices: they are a shortcut to some operations you can do with vectors, so it\u2019s something you can actually draw. You might want to take a pen or look at the materials that others suggested to see examples of different plane transformations.</p> <p>Among the transformations we\u2019ll be looking for the affine ones, those who look \u2018the same\u2019 everywhere (no bending). For example, a rotation around some point <code>(x, y)</code> qualifies. Now this one cannot be expressed as <code>lambda v: A(v)</code>, but in can be written in the form <code>lambda v: A(v) + b</code> for some matrix <code>A</code> and vector <code>b</code>. </p> <ul> <li>Exercise: find the <code>A</code> and <code>b</code> such that a rotation by <code>pi/2</code> around the point <code>(1, 0)</code> has the form above. Are they unique?</li> </ul> <p>Note that for every vector there is an affine transformation which is a shift by the vector. </p> <p>An affine transformation may stretch or dilate shapes, but it should do in the same way everywhere. Now I hope you believe that the area of any figure changes by a constant number under the transformation. For a transformation given by matrix <code>A</code> this coeffiecient is called the determinant of <code>A</code> and can be computed applying the formula for an area to two vectors <code>A(x_axis)</code> and <code>A(y_axis)</code>:</p> <pre><code>    def det(self: 'matrix') -&gt; 'determinant of a matrix':\n        return self.m[0]*self.m[3] - self.m[1] * self.m[2]\n</code></pre> <p>As a sanity check, <code>diag(a, b).det()</code> is equal to <code>a * b</code>.</p> <ul> <li>Exercise: Check this. What happens when one of arguments is 0? When it\u2019s negative?</li> </ul> <p>As you can see, the determinant of rotation matrix is always the same:</p> <pre><code>from random import random\nr = R(random())\nprint (r, 'det =', r.det())\n</code></pre> <p>One interesting thing about <code>det</code> is that it is multiplicative (it kind of follows from the definition if you meditate long enough):</p> <pre><code>A = Matrix((1, 2, -3, 0))\nB = Matrix((4, 1, 1, 2))\nprint(A.det(), '*', B.det(), 'should be', (A * B).det())\n</code></pre>"}, {"location": "post/2022/003-testing-long-article/#inverse", "title": "Inverse", "text": "<p>A useful thing you can do with matrices is write a system of two linear equations</p> <pre><code>A.m[0]*v.x + A.m[1]*v.y = b.x\nA.m[2]*v.x + A.m[3]*v.y = b.y\n</code></pre> <p>in a simpler way: <code>A(v) = b</code>. Let\u2019s solve the system as they teach in (some) high schools: multiply first equation by <code>A.m[3]</code>, second by -A.m1 and add (if in doubt, do this on a piece of paper) to solve for <code>v.x</code>.</p> <p>If you really tried it, you should have got <code>A.det() * v.x = (A.m[3]) * b.x + (-A.m[1]) * b.y</code>, which suggests that you can always get <code>v</code> by multiplying <code>b</code> by some other matrix. This matrix is called inverse of <code>A</code>:</p> <pre><code>    def inv(self: 'matrix') -&gt; 'inverse matrix':\n        '''This function returns an inverse matrix when it exists,\n        or raises ZeroDivisionError when it doesn't.\n\n        '''\n        new_m = ( self.m[3] / self.det(), -self.m[1] / self.det(),\n                  ????? )\n        return Matrix(new_m)\n</code></pre> <p>As you see, this method fails loudly when determinant of matrix is zero. If you really want you can catch this expection with:</p> <pre><code>try:\n    print(zero.inv())\nexcept ZeroDivisionError as e: ...\n</code></pre> <ul> <li>Exercise: Finish the method. Prove that inverse matrix doesn\u2019t exist when <code>self.det() == 0</code>. Write the method to divide matrices and test it. Use the inverse matrix to solve an equation <code>A(v) = x_axis</code> (<code>A</code> was defined above).</li> </ul>"}, {"location": "post/2022/003-testing-long-article/#powers", "title": "Powers", "text": "<p>The main property of inverse matrix is that <code>A * A.inv()</code> always equals to <code>one</code></p> <ul> <li>Exercise: check that yourself. Explain why that should be so from the definition of inverse matrix.</li> </ul> <p>That\u2019s why mathematicians denote <code>A.inv()</code> by <code>A</code>-1. How about we write a nice function to use <code>A ** n</code> notation for <code>A</code>n? Note that the naive <code>for i in range(n): answer *= self</code> cycle is O(|n|) which is certainly too slow, because this can be done with a  complexity of <code>log |n|</code>:</p> <pre><code>    def __pow__(self: 'matrix', n:'integer') -&gt; 'n-th power':\n        '''This function returns n-th power of the matrix.\n\n        It does it more efficiently than a simple for cycle. A\n        while loop goes over all bits of n, multiplying answer\n        by self ** (2 ** k) whenever it encounters a set bit.\n\n        ...\n</code></pre> <ul> <li> <p>Exercise: Fill in the details in this function. Test it with</p> <p><code>X, Y = A ** 5, A ** -5</code> <code>print (X, Y, X * Y, sep = '\\n')</code></p> </li> </ul> <p>This function only works for integer values of <code>n</code>, even though for some matrices we can also define a fractional power, such as square root (in other words, a matrix <code>B</code> such that <code>B * B = A</code>).</p> <ul> <li>Exercise: Find a square root of <code>diag(-1, -1)</code>. Is this the only possible answer?  Find an example of matrix that doesn\u2019t have a square root.</li> </ul>"}, {"location": "post/2022/003-testing-long-article/#bonus-complex-numbers", "title": "Bonus: Complex numbers", "text": "<p>Here I\u2019m going to introduce you to the subject in exactly one section! Since it\u2019s a complex subject, I\u2019m likely to fail, so please forgive me in advance.</p> <p>First, similarly to how we have matrices <code>zero</code> and <code>one</code>, we can make a matrix out of any real number by doing <code>diag(number, number)</code>. Matrices of that form can be added, subtracted, multiplied, inverted and the results would mimic what happens with the numbers themselves. So for all practical purposes, one can say that, e.g., <code>diag(5, 5)</code> is 5.</p> <p>However, Python doesn\u2019t know yet how to handle expressions of the form <code>A + 1</code> or <code>5 * B</code> where <code>A</code> and <code>B</code> are matrices. If you\u2019re interested, you should by all means go and do the following exercise or look at my implementation (which uses a cool Python feature called decorator); otherwise, just know that it\u2019s been implemented.</p> <ul> <li>Exercise for gurus: Change the operators in a <code>Matrix</code> class so that in all standard operations where one of operands is a matrix and another a number, the number is automatically converted to the <code>diag</code> matrix. Also add comparison for equality.</li> </ul> <p>Here\u2019s an example test:</p> <pre><code>print( 3 * A - B / 2 + 5 )\n</code></pre> <p>Now here\u2019s the first interesting complex number: the matrix <code>J</code>,  introduced in the beginning and equal to <code>Matrix((0, 1, -1, 0))</code>, has a funny property that <code>J * J == -1</code> (try it!). That means <code>J</code> is certainly not a normal number, but, as I just said, matrices and numbers easily mix together. For example,</p> <pre><code>(1 + J) * (2 + J) == 2 + 2 * J + 1 * J + J * J = 1 + 3 * J\n</code></pre> <p>using the rules listed some time before. What happens if we test this in Python?</p> <pre><code>(1 + J) * (2 + J) == 1 + 3*J\n</code></pre> <p>That should happily say <code>True</code>. Another example:</p> <pre><code>(3 + 4*J) / (1 - 2*J) == -1 + 2*J\n</code></pre> <p>As you might have guessed, the mathematicians don\u2019t call those \u2018crazy numbers\u2019, but they do something similar - they call expressions of the form <code>a + b*J</code> complex numbers. Because those are still instances of our <code>Matrix</code> class, we can do quite a lot of operations with those: addition, subtraction, multiplication, division, power - it\u2019s all already implemented! Aren\u2019t matrices amazing?</p> <p>I have overlooked the question of how to print the result of operation like <code>E = (1 + 2*J) * (1 + 3*J)</code> so that it looks like an expression with <code>J</code> rather than a <code>2x2</code> matrix. If you examine it carefully, you\u2019ll see that you need to print the left column of that matrix in the format <code>... + ...J</code> (just one more nice thing: it\u2019s exactly <code>E(x_axis)</code>!) Those who know the difference between <code>str()</code> and <code>repr()</code> should see it\u2019s natural to name a function that would produce expression of such form as <code>repr()</code>.</p> <ul> <li> <p>Exercise: Write the function <code>Matrix.__repr__</code> that would do exactly that and try some tests with it, like <code>(1 + J) ** 3</code>, first computing the result on paper and then trying it with Python.</p> </li> <li> <p>Math question: What is the determinant of <code>a + b*J</code>? If you know what the absolute value of complex number is: how they are connected? What is the absolute value of <code>a</code>? of <code>a*J</code>?</p> </li> </ul>"}, {"location": "post/2022/003-testing-long-article/#4-matrices-the-revolution", "title": "4. Matrices: The (R)evolution", "text": "<p>In the final part of this trilogy we will see that everything is a matrix. We\u2019ll start with general <code>M x N</code> matrices, and find out how vectors can be thought of as <code>1 x N</code> matrices and why numbers are the same as diagonal matrices. As a side note we\u2019ll explore the complex numbers as <code>2 x 2</code> matrices.</p> <p>Finally, we will learn to write affine and projective transformations using matrices.</p> <p>So the classes planned are <code>[MNMatrix, NVector, Affine, Projective]</code>.</p> <p>I guess if you was able to bear with me until here, you could be interested in this sequel, so I\u2019d like to hear if I should continue with this (and where, since I\u2019m pretty much sure I\u2019m beyond what considered reasonable length of a single document).</p>"}, {"location": "post/2022/004-testing-diagrams/", "title": "Testing diagrams!", "text": "<p>Check source code for any of the diagrams.</p> <p>Some diagrams may be properly viewed in light mode only. Dark mode out-of-the-box compatibility is still an issue.</p>"}, {"location": "post/2022/004-testing-diagrams/#diagrams-by-mkdocs", "title": "Diagrams by MkDocs", "text": ""}, {"location": "post/2022/004-testing-diagrams/#sequence-diagram", "title": "Sequence diagram", "text": "<pre><code>sequenceDiagram\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre>"}, {"location": "post/2022/004-testing-diagrams/#state-diagram", "title": "State diagram", "text": "<pre><code>stateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; State2\n    fork_state --&gt; State3\n\n    state join_state &lt;&lt;join&gt;&gt;\n    State2 --&gt; join_state\n    State3 --&gt; join_state\n    join_state --&gt; State4\n    State4 --&gt; [*]</code></pre>"}, {"location": "post/2022/004-testing-diagrams/#class-diagram", "title": "Class diagram", "text": "<pre><code>classDiagram\n  Person &lt;|-- Student\n  Person &lt;|-- Professor\n  Person : +String name\n  Person : +String phoneNumber\n  Person : +String emailAddress\n  Person: +purchaseParkingPass()\n  Address \"1\" &lt;-- \"0..1\" Person:lives at\n  class Student{\n    +int studentNumber\n    +int averageMark\n    +isEligibleToEnrol()\n    +getSeminarsTaken()\n  }\n  class Professor{\n    +int salary\n  }\n  class Address{\n    +String street\n    +String city\n    +String state\n    +int postalCode\n    +String country\n    -validate()\n    +outputAsLabel()\n  }</code></pre>"}, {"location": "post/2022/004-testing-diagrams/#entity-relationship-diagram", "title": "Entity-relationship diagram", "text": "<pre><code>erDiagram\n  CUSTOMER ||--o{ ORDER : places\n  ORDER ||--|{ LINE-ITEM : contains\n  CUSTOMER }|..|{ DELIVERY-ADDRESS : uses</code></pre>"}, {"location": "post/2022/004-testing-diagrams/#diagrams-by-mermaid", "title": "Diagrams by Mermaid", "text": "Here is one mermaid diagram:     <pre>\n            graph TD \n            A[Client] --&gt; B[Load Balancer] \n            B --&gt; C[Server1] \n            B --&gt; D[Server2]\n    </pre>      And here is another:     <pre>\n            graph TD\n            A[Client] --&gt;|tcp_123| B\n            B(Load Balancer)\n            B --&gt;|tcp_456| C[Server1]\n            B --&gt;|tcp_456| D[Server2]\n    </pre>"}, {"location": "post/2022/004-testing-diagrams/#here-is-a-graph-with-subgraphs", "title": "Here is a graph with subgraphs", "text": "<pre>\n      flowchart LR\n        subgraph TOP\n          direction TB\n          subgraph B1\n              direction RL\n              i1 --&gt;f1\n          end\n          subgraph B2\n              direction BT\n              i2 --&gt;f2\n          end\n        end\n        A --&gt; TOP --&gt; B\n        B1 --&gt; B2\n    </pre>"}, {"location": "post/2022/004-testing-diagrams/#another-graph-with-subgraphs", "title": "Another graph with subgraphs", "text": "<pre>\n      flowchart TB\n          c1--&gt;a2\n          subgraph one\n          a1--&gt;a2\n          end\n          subgraph two\n          b1--&gt;b2\n          end\n          subgraph three\n          c1--&gt;c2\n          end\n          one --&gt; two\n          three --&gt; two\n          two --&gt; c2\n    </pre>"}, {"location": "post/2022/004-testing-diagrams/#an-algorithm", "title": "An algorithm", "text": "<pre>\n      flowchart TD\n          A[Start] --&gt; B{Is it?}\n          B -- Yes --&gt; C[OK]\n          C --&gt; D[Rethink]\n          D --&gt; B\n          B -- No ----&gt; E[End]\n    </pre>"}, {"location": "post/2022/004-testing-diagrams/#a-customized-algorithm", "title": "A customized algorithm", "text": "<pre>\n      flowchart LR\n          A[Hard edge] --&gt;|Link text| B(Round edge)\n          B --&gt; C{Decision}\n          C --&gt;|One| D[Result one]\n          C --&gt;|Two| E[Result two]\n    </pre>"}, {"location": "post/2022/004-testing-diagrams/#fontawesome-support-works", "title": "Fontawesome support works?", "text": "<pre>\n      flowchart TD\n          B[\"fab:fa-twitter for peace\"]\n          B--&gt;C[fa:fa-ban forbidden]\n          B--&gt;D(fa:fa-spinner);\n          B--&gt;E(A fa:fa-camera-retro perhaps?)\n    </pre>"}, {"location": "post/2022/004-testing-diagrams/#long-requirement-diagram", "title": "Long requirement diagram", "text": "<pre>\n      requirementDiagram\n\n      requirement test_req {\n      id: 1\n      text: the test text.\n      risk: high\n      verifymethod: test\n      }\n\n      functionalRequirement test_req2 {\n      id: 1.1\n      text: the second test text.\n      risk: low\n      verifymethod: inspection\n      }\n\n      performanceRequirement test_req3 {\n      id: 1.2\n      text: the third test text.\n      risk: medium\n      verifymethod: demonstration\n      }\n\n      interfaceRequirement test_req4 {\n      id: 1.2.1\n      text: the fourth test text.\n      risk: medium\n      verifymethod: analysis\n      }\n\n      physicalRequirement test_req5 {\n      id: 1.2.2\n      text: the fifth test text.\n      risk: medium\n      verifymethod: analysis\n      }\n\n      designConstraint test_req6 {\n      id: 1.2.3\n      text: the sixth test text.\n      risk: medium\n      verifymethod: analysis\n      }\n\n      element test_entity {\n      type: simulation\n      }\n\n      element test_entity2 {\n      type: word doc\n      docRef: reqs/test_entity\n      }\n\n      element test_entity3 {\n      type: \"test suite\"\n      docRef: github.com/all_the_tests\n      }\n\n\n      test_entity - satisfies -&gt; test_req2\n      test_req - traces -&gt; test_req2\n      test_req - contains -&gt; test_req3\n      test_req3 - contains -&gt; test_req4\n      test_req4 - derives -&gt; test_req5\n      test_req5 - refines -&gt; test_req6\n      test_entity3 - verifies -&gt; test_req5\n      test_req &lt;- copies - test_entity2\n      </pre>"}, {"location": "post/2022/004-testing-diagrams/#pie-chart", "title": "Pie chart", "text": "<pre>\n      pie showData\n          title Key elements in Product X\n          \"Calcium\" : 42.96\n          \"Potassium\" : 50.05\n          \"Magnesium\" : 10.01\n          \"Iron\" :  5\n    </pre>"}, {"location": "post/2022/004-testing-diagrams/#c4-diagram", "title": "C4 diagram", "text": "<pre>\n      C4Dynamic\n      title Dynamic diagram for Internet Banking System - API Application\n\n      ContainerDb(c4, \"Database\", \"Relational Database Schema\", \"Stores user registration information, hashed authentication credentials, access logs, etc.\")\n      Container(c1, \"Single-Page Application\", \"JavaScript and Angular\", \"Provides all of the Internet banking functionality to customers via their web browser.\")\n      Container_Boundary(b, \"API Application\") {\n        Component(c3, \"Security Component\", \"Spring Bean\", \"Provides functionality Related to signing in, changing passwords, etc.\")\n        Component(c2, \"Sign In Controller\", \"Spring MVC Rest Controller\", \"Allows users to sign in to the Internet Banking System.\")\n      }\n      Rel(c1, c2, \"Submits credentials to\", \"JSON/HTTPS\")\n      Rel(c2, c3, \"Calls isAuthenticated() on\")\n      Rel(c3, c4, \"select * from users where username = ?\", \"JDBC\")\n\n      UpdateRelStyle(c1, c2, $textColor=\"red\", $offsetY=\"-40\")\n      UpdateRelStyle(c2, c3, $textColor=\"red\", $offsetX=\"-40\", $offsetY=\"60\")\n      UpdateRelStyle(c3, c4, $textColor=\"red\", $offsetY=\"-40\", $offsetX=\"10\")\n    </pre>"}, {"location": "post/2022/004-testing-diagrams/#git-graph", "title": "Git graph", "text": "<pre>\n      gitGraph\n          commit id: \"1\"\n          commit id: \"2\"\n          branch nice_feature\n          checkout nice_feature\n          commit id: \"3\"\n          checkout main\n          commit id: \"4\"\n          checkout nice_feature\n          branch very_nice_feature\n          checkout very_nice_feature\n          commit id: \"5\"\n          checkout main\n          commit id: \"6\"\n          checkout nice_feature\n          commit id: \"7\"\n          checkout main\n          merge nice_feature id: \"customID\" tag: \"customTag\" type: REVERSE\n          checkout very_nice_feature\n          commit id: \"8\"\n          checkout main\n          commit id: \"9\"\n    </pre>"}, {"location": "post/2022/004-testing-diagrams/#gantt-diagram", "title": "Gantt diagram", "text": "<pre>\n      gantt\n          apple :a, 2017-07-20, 1w\n          banana :crit, b, 2017-07-23, 1d\n          cherry :active, c, after b a, 1d\n    </pre>"}, {"location": "post/2022/004-testing-diagrams/#user-journey-diagram", "title": "User journey diagram", "text": "<pre>\n        journey\n            title My working day\n            section Go to work\n              Make tea: 5: Me\n              Go upstairs: 3: Me\n              Do work: 1: Me, Cat\n            section Go home\n              Go downstairs: 5: Me\n              Sit down: 5: Me\n        </pre>"}, {"location": "post/2022/004-testing-diagrams/#custom-theme", "title": "Custom theme", "text": "<p> <pre>\n        %%{init: {'theme': 'base', 'themeVariables': { 'primaryColor': '#ffcccc', 'edgeLabelBackground':'#ffffee', 'tertiaryColor': '#fff0f0'}}}%%\n                graph TD\n                  A[Christmas] --&gt;|Get money| B(Go shopping)\n                  B --&gt; C{Let me think}\n                  B --&gt; G[/Another/]\n                  C ==&gt;|One| D[Laptop]\n                  C --&gt;|Two| E[iPhone]\n                  C --&gt;|Three| F[fa:fa-car Car]\n                  subgraph section\n                    C\n                    D\n                    E\n                    F\n                    G\n                  end\n        </pre> </p>"}, {"location": "post/2023/000-mat-dec/", "title": "Matrix Decomposition", "text": ""}, {"location": "post/2023/000-mat-dec/#cholesky", "title": "Cholesky", "text": ""}, {"location": "post/2023/000-mat-dec/#lu", "title": "LU", "text": ""}, {"location": "post/2023/000-mat-dec/#qr", "title": "QR", "text": ""}, {"location": "post/2023/000-mat-dec/#schur", "title": "Schur", "text": ""}, {"location": "post/2023/000-mat-dec/#spectral", "title": "Spectral", "text": ""}, {"location": "post/2023/000-mat-dec/#svd", "title": "SVD", "text": "<p>A list of benefits is available at: https://ieeexplore.ieee.org/document/814658</p>"}, {"location": "post/2023/000-mat-dec/#applications", "title": "Applications", "text": "<ul> <li> <p>SVD and large scale optimization: https://epubs.siam.org/doi/10.1137/17M1117732</p> </li> <li> <p>Faster SVD via Polar Decomposition: https://nhigham.com/2015/11/24/faster-svd-via-polar-decomposition/</p> </li> <li> <p>Nearest symmetric matrix: https://www.ams.org/journals/proc/1955-006-01/S0002-9939-1955-0067841-7/</p> </li> </ul>"}, {"location": "publication/", "title": "Publications", "text": ""}, {"location": "publication/journalConferencePreprint/", "title": "Journals &amp; Conferences", "text": "<p> Google Scholar: user=GPu9jbIAAAAJ</p> <p> ResearchGate: profile/Israel-Assis</p> <p> ORCiD: 0000-0002-8766-1041</p> <p> Scopus: authorId=57215007400</p> <p> Web of Science:  ResearcherID=AAP-3431-2020</p> <p> arXiv: i-assis</p>"}, {"location": "publication/talks/", "title": "Talks", "text": ""}, {"location": "publication/open/c/", "title": "\ud835\udc02/\ud835\udc02++", "text": ""}, {"location": "publication/open/mathematica/", "title": "\ud835\udc16 Mathematica", "text": ""}, {"location": "publication/open/matlab/", "title": "\ud835\udc0c Matlab", "text": ""}, {"location": "publication/open/node/", "title": "\u260a NodeJS", "text": ""}, {"location": "publication/open/python/", "title": "\ud83d\udc0d Python", "text": ""}, {"location": "publication/open/ruby/", "title": "\u27e1 Ruby on Rails", "text": ""}, {"location": "publication/open/solidity/", "title": "\u223e Solidity", "text": ""}]}